{
  "stats": {
    "suites": 11,
    "tests": 74,
    "passes": 74,
    "pending": 0,
    "failures": 0,
    "start": "2024-11-27T20:51:32.007Z",
    "end": "2024-11-27T20:51:37.660Z",
    "duration": 5653,
    "testsRegistered": 74,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b174898b-8472-4d09-aead-7b15ad9d31ac",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await db.end();",
          "err": {},
          "uuid": "1d20e99d-df53-431c-9524-f97aeafcf4ec",
          "parentUUID": "b174898b-8472-4d09-aead-7b15ad9d31ac",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "b4d77ce9-8701-494a-8818-fdf0eaeebdb3",
          "title": "Bienvenida",
          "fullFile": "C:\\Users\\penar\\OneDrive\\Documentos\\hola\\test\\empleados.test.js",
          "file": "\\test\\empleados.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Bienvenido a los test de la API MS",
              "fullTitle": "Bienvenida Bienvenido a los test de la API MS",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log('***********************************');\nconsole.log('* Bienvenido a los test de la API MS *');\nconsole.log('***********************************');",
              "err": {},
              "uuid": "1ceb0f88-4806-4dd2-a67d-e6b8589d981f",
              "parentUUID": "b4d77ce9-8701-494a-8818-fdf0eaeebdb3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1ceb0f88-4806-4dd2-a67d-e6b8589d981f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "69af556d-ed86-4fa5-97ae-85bfdc3f8bf5",
          "title": "Empleados API Endpoints",
          "fullFile": "C:\\Users\\penar\\OneDrive\\Documentos\\hola\\test\\empleados.test.js",
          "file": "\\test\\empleados.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Empleados API Endpoints\"",
              "fullTitle": "Empleados API Endpoints \"before all\" hook in \"Empleados API Endpoints\"",
              "timedOut": false,
              "duration": 116,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Reiniciar tablas relacionadas y configurar datos iniciales\nawait db.query('TRUNCATE TABLE empleados RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE usuarios RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE roles RESTART IDENTITY CASCADE');\n// Insertar roles\nawait db.query(`\n  INSERT INTO roles (tipo) \n  VALUES ('Administrador'), ('Vendedor'), ('Cliente'), ('Gerente'), ('Soporte Técnico');\n`);\n// Insertar usuarios\nawait db.query(`\n  INSERT INTO usuarios (nombre, correo, password, idRol)\n  VALUES \n    ('Eliezer Cerecedo', 'eliezercerecedo82@gmail.com', 'Bocchi17', 1),\n    ('Juan Pablo', 'juanpablo@gmail.com', 'pablitin18', 2);\n`);\n// Insertar empleados\nawait db.query(`\n  INSERT INTO empleados (nombre, appaterno, apmaterno, fechanacimiento, curp, idusuario)\n  VALUES \n    ('Eliezer Isai', 'Cerecedo', 'Florencia', '2002-11-12', 'ABC123456XYZ789012', 1),\n    ('Juan', 'Perez', 'Lopez', '1985-07-20', 'DEF123456XYZ789012', 2);\n`);",
              "err": {},
              "uuid": "981d7825-540d-47c7-a5fb-22ace99fa3a6",
              "parentUUID": "69af556d-ed86-4fa5-97ae-85bfdc3f8bf5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Empleados API Endpoints\"",
              "fullTitle": "Empleados API Endpoints \"after all\" hook in \"Empleados API Endpoints\"",
              "timedOut": false,
              "duration": 35,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await db.query('TRUNCATE TABLE empleados RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE usuarios RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE roles RESTART IDENTITY CASCADE');",
              "err": {},
              "uuid": "58f5f6fa-9a64-4a6e-a5ef-5ff24c21c77b",
              "parentUUID": "69af556d-ed86-4fa5-97ae-85bfdc3f8bf5",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /api/empleados debe retornar todos los empleados",
              "fullTitle": "Empleados API Endpoints GET /api/empleados debe retornar todos los empleados",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/empleados');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(Array.isArray(res.body), true);\nassert.strictEqual(res.body.length, 2);\nassert.strictEqual(res.body[0].nombre, 'Eliezer Isai');",
              "err": {},
              "uuid": "45e013da-31d2-4123-af69-a109ce25ef9a",
              "parentUUID": "69af556d-ed86-4fa5-97ae-85bfdc3f8bf5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /api/empleados/:id debe retornar un empleado por ID",
              "fullTitle": "Empleados API Endpoints GET /api/empleados/:id debe retornar un empleado por ID",
              "timedOut": false,
              "duration": 55,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/empleados/1');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(res.body.nombre, 'Eliezer Isai');",
              "err": {},
              "uuid": "b427d4c0-5d07-46f7-87ae-3caf46fdd2bb",
              "parentUUID": "69af556d-ed86-4fa5-97ae-85bfdc3f8bf5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /api/empleados debe crear un nuevo empleado con datos válidos",
              "fullTitle": "Empleados API Endpoints POST /api/empleados debe crear un nuevo empleado con datos válidos",
              "timedOut": false,
              "duration": 149,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newEmpleado = {\n  nombre: 'Oscar',\n  appaterno: 'Martinez',\n  apmaterno: 'Gomez',\n  fechanacimiento: '1990-04-15',\n  curp: 'OSMG900415HDFRZS02', // CURP con formato válido\n  idusuario: 1,\n};\nconst res = await request(app).post('/api/empleados').send(newEmpleado);\nassert.strictEqual(res.status, 201);\nassert.strictEqual(res.body.nombre, 'Oscar');",
              "err": {},
              "uuid": "d1b52c8d-ac96-4609-a86b-0b4053c05207",
              "parentUUID": "69af556d-ed86-4fa5-97ae-85bfdc3f8bf5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /api/empleados debe fallar con datos inválidos",
              "fullTitle": "Empleados API Endpoints POST /api/empleados debe fallar con datos inválidos",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidEmpleado = {\n  nombre: 'Os', // Nombre demasiado corto\n  appaterno: '', // Apellido paterno vacío\n  apmaterno: 'ApellidoMuyLargoQueExcedeElLimite', // Apellido materno demasiado largo\n  fechanacimiento: '2025-04-15', // Fecha futura inválida\n  curp: 'CURPINVALIDO', // CURP con formato incorrecto\n  idusuario: 1,\n};\nconst res = await request(app).post('/api/empleados').send(invalidEmpleado);\nassert.strictEqual(res.status, 400);\nassert.strictEqual(Array.isArray(res.body.errores), true);\nassert.ok(res.body.errores.length > 0);",
              "err": {},
              "uuid": "06e7002a-e5f6-430f-a8cb-b6fca6087290",
              "parentUUID": "69af556d-ed86-4fa5-97ae-85bfdc3f8bf5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT /api/empleados/:id debe actualizar un empleado con datos válidos",
              "fullTitle": "Empleados API Endpoints PUT /api/empleados/:id debe actualizar un empleado con datos válidos",
              "timedOut": false,
              "duration": 167,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedEmpleado = {\n  nombre: 'Eliezer Actualizado',\n  appaterno: 'Cerecedo',\n  apmaterno: 'Florencia',\n  fechanacimiento: '2002-11-12',\n  curp: 'ELCF021112HDFRZS04', // CURP con formato válido\n  idusuario: 1,\n};\nconst res = await request(app).put('/api/empleados/1').send(updatedEmpleado);\nassert.strictEqual(res.status, 200);\nassert.strictEqual(res.body.nombre, 'Eliezer Actualizado');",
              "err": {},
              "uuid": "e4ae0df0-651d-42f1-9e15-ab8985a0603e",
              "parentUUID": "69af556d-ed86-4fa5-97ae-85bfdc3f8bf5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE /api/empleados/:id debe eliminar un empleado",
              "fullTitle": "Empleados API Endpoints DELETE /api/empleados/:id debe eliminar un empleado",
              "timedOut": false,
              "duration": 161,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/empleados/1');\nassert.strictEqual(res.status, 204);\n// Verificar que el empleado fue eliminado\nconst getRes = await request(app).get('/api/empleados/1');\nassert.strictEqual(getRes.status, 404);",
              "err": {},
              "uuid": "9439173f-a853-4721-9571-36398404d350",
              "parentUUID": "69af556d-ed86-4fa5-97ae-85bfdc3f8bf5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /api/empleados/:id debe retornar 404 para un empleado inexistente",
              "fullTitle": "Empleados API Endpoints GET /api/empleados/:id debe retornar 404 para un empleado inexistente",
              "timedOut": false,
              "duration": 50,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/empleados/9999');\nassert.strictEqual(res.status, 404);",
              "err": {},
              "uuid": "20d9cb7f-d684-4886-af86-a7bc05c3e02b",
              "parentUUID": "69af556d-ed86-4fa5-97ae-85bfdc3f8bf5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "45e013da-31d2-4123-af69-a109ce25ef9a",
            "b427d4c0-5d07-46f7-87ae-3caf46fdd2bb",
            "d1b52c8d-ac96-4609-a86b-0b4053c05207",
            "06e7002a-e5f6-430f-a8cb-b6fca6087290",
            "e4ae0df0-651d-42f1-9e15-ab8985a0603e",
            "9439173f-a853-4721-9571-36398404d350",
            "20d9cb7f-d684-4886-af86-a7bc05c3e02b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 620,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f2c80c2b-f96a-4b68-9e23-0b3486a42d85",
          "title": "Métodos de Venta API Endpoints",
          "fullFile": "C:\\Users\\penar\\OneDrive\\Documentos\\hola\\test\\metodoVenta.test.js",
          "file": "\\test\\metodoVenta.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Métodos de Venta API Endpoints\"",
              "fullTitle": "Métodos de Venta API Endpoints \"before all\" hook in \"Métodos de Venta API Endpoints\"",
              "timedOut": false,
              "duration": 34,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Reiniciar tablas relacionadas y configurar datos iniciales\nawait db.query('TRUNCATE TABLE MetodoVenta RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE tipoPago RESTART IDENTITY CASCADE');\n// Insertar tipos de pago\nawait db.query(`\n      INSERT INTO tipoPago (descripcion, fecha_creacion, activo) \n      VALUES ('Efectivo', NOW(), TRUE), ('Tarjeta de crédito', NOW(), TRUE);\n    `);\n// Insertar métodos de venta\nawait db.query(`\n      INSERT INTO MetodoVenta (idTipoPago, descripcion, comision, fecha_creacion, activo)\n      VALUES \n(1, 'Efectivo', 0.00, NOW(), TRUE), \n(2, 'Tarjeta de crédito', 0.05, NOW(), TRUE);\n    `);",
              "err": {},
              "uuid": "043ef17a-d2b5-473c-adfd-2a9cb0ac652d",
              "parentUUID": "f2c80c2b-f96a-4b68-9e23-0b3486a42d85",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Métodos de Venta API Endpoints\"",
              "fullTitle": "Métodos de Venta API Endpoints \"after all\" hook in \"Métodos de Venta API Endpoints\"",
              "timedOut": false,
              "duration": 20,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await db.query('TRUNCATE TABLE MetodoVenta RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE tipoPago RESTART IDENTITY CASCADE');",
              "err": {},
              "uuid": "5ca74d7d-9b14-4c11-9d0f-3c8e3646f8a3",
              "parentUUID": "f2c80c2b-f96a-4b68-9e23-0b3486a42d85",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /api/metodos-venta debe retornar todos los métodos de venta",
              "fullTitle": "Métodos de Venta API Endpoints GET /api/metodos-venta debe retornar todos los métodos de venta",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/metodos-venta');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(Array.isArray(res.body), true);\nassert.strictEqual(res.body.length, 2);\nassert.strictEqual(res.body[0].descripcion, 'Efectivo');",
              "err": {},
              "uuid": "e8041e38-a235-4c71-ae8d-89bb1bff840e",
              "parentUUID": "f2c80c2b-f96a-4b68-9e23-0b3486a42d85",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /api/metodos-venta/:id debe retornar un método de venta por ID",
              "fullTitle": "Métodos de Venta API Endpoints GET /api/metodos-venta/:id debe retornar un método de venta por ID",
              "timedOut": false,
              "duration": 58,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/metodos-venta/1');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(res.body.descripcion, 'Efectivo');",
              "err": {},
              "uuid": "32addf01-0fec-446c-803b-bd31bcaa1bc3",
              "parentUUID": "f2c80c2b-f96a-4b68-9e23-0b3486a42d85",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /api/metodos-venta debe crear un nuevo método de venta",
              "fullTitle": "Métodos de Venta API Endpoints POST /api/metodos-venta debe crear un nuevo método de venta",
              "timedOut": false,
              "duration": 110,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newMetodo = {\n    idTipoPago: 1,\n    descripcion: 'Transferencia Bancaria',\n    comision: 0.02,\n    activo: true,\n};\nconst res = await request(app).post('/api/metodos-venta').send(newMetodo);\nassert.strictEqual(res.status, 201);\nassert.strictEqual(res.body.descripcion, 'Transferencia Bancaria');",
              "err": {},
              "uuid": "2d0e1dd9-2d83-4615-94fd-13c7bc2746ca",
              "parentUUID": "f2c80c2b-f96a-4b68-9e23-0b3486a42d85",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /api/metodos-venta debe fallar con datos inválidos",
              "fullTitle": "Métodos de Venta API Endpoints POST /api/metodos-venta debe fallar con datos inválidos",
              "timedOut": false,
              "duration": 54,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidMetodo = {\n    idTipoPago: 99, // No existe\n    descripcion: 'AB', // Descripción muy corta\n    comision: 1.5, // Comisión fuera de rango\n    activo: 'true', // No es booleano\n};\nconst res = await request(app).post('/api/metodos-venta').send(invalidMetodo);\nassert.strictEqual(res.status, 400);\nassert.ok(Array.isArray(res.body.errores));\nassert.ok(res.body.errores.length > 0);",
              "err": {},
              "uuid": "a060170d-0340-4021-bbb1-ed436103b6c9",
              "parentUUID": "f2c80c2b-f96a-4b68-9e23-0b3486a42d85",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT /api/metodos-venta/:id debe actualizar un método de venta",
              "fullTitle": "Métodos de Venta API Endpoints PUT /api/metodos-venta/:id debe actualizar un método de venta",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedMetodo = {\n    idTipoPago: 2,\n    descripcion: 'Pago con Tarjeta',\n    comision: 0.03,\n    activo: false,\n};\nconst res = await request(app).put('/api/metodos-venta/1').send(updatedMetodo);\nassert.strictEqual(res.status, 200);\nassert.strictEqual(res.body.descripcion, 'Pago con Tarjeta');\nassert.strictEqual(Number(res.body.comision), 0.03); // Convertir a número para la comparación",
              "err": {},
              "uuid": "3c29d3f6-36bb-4af2-8652-9dfc3a945128",
              "parentUUID": "f2c80c2b-f96a-4b68-9e23-0b3486a42d85",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE /api/metodos-venta/:id debe eliminar un método de venta",
              "fullTitle": "Métodos de Venta API Endpoints DELETE /api/metodos-venta/:id debe eliminar un método de venta",
              "timedOut": false,
              "duration": 104,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/metodos-venta/1');\nassert.strictEqual(res.status, 204);\n// Verificar que el método de venta fue eliminado\nconst getRes = await request(app).get('/api/metodos-venta/1');\nassert.strictEqual(getRes.status, 404);",
              "err": {},
              "uuid": "56363291-a5de-4175-8cec-975a996e4a64",
              "parentUUID": "f2c80c2b-f96a-4b68-9e23-0b3486a42d85",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /api/metodos-venta/:id debe retornar 404 para un método inexistente",
              "fullTitle": "Métodos de Venta API Endpoints GET /api/metodos-venta/:id debe retornar 404 para un método inexistente",
              "timedOut": false,
              "duration": 59,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/metodos-venta/9999');\nassert.strictEqual(res.status, 404);",
              "err": {},
              "uuid": "dfad72d3-8098-41c2-9a0e-68b760f0634e",
              "parentUUID": "f2c80c2b-f96a-4b68-9e23-0b3486a42d85",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e8041e38-a235-4c71-ae8d-89bb1bff840e",
            "32addf01-0fec-446c-803b-bd31bcaa1bc3",
            "2d0e1dd9-2d83-4615-94fd-13c7bc2746ca",
            "a060170d-0340-4021-bbb1-ed436103b6c9",
            "3c29d3f6-36bb-4af2-8652-9dfc3a945128",
            "56363291-a5de-4175-8cec-975a996e4a64",
            "dfad72d3-8098-41c2-9a0e-68b760f0634e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 509,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b4c79f0b-258d-43c2-b818-fe6c8acda04a",
          "title": "PedidoDetalles API Endpoints",
          "fullFile": "C:\\Users\\penar\\OneDrive\\Documentos\\hola\\test\\pedidoDetalles.test.js",
          "file": "\\test\\pedidoDetalles.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"PedidoDetalles API Endpoints\"",
              "fullTitle": "PedidoDetalles API Endpoints \"before all\" hook in \"PedidoDetalles API Endpoints\"",
              "timedOut": false,
              "duration": 105,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Reiniciar tablas relacionadas y configurar datos iniciales\nawait db.query('TRUNCATE TABLE PedidoDetalles RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Pedidos RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Productos RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Categorias RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE MetodoVenta RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE tipoPago RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Proveedores RESTART IDENTITY CASCADE');\n// Insertar categorías\nawait db.query(`\n    INSERT INTO Categorias (nombre, descripcion)\n    VALUES \n        ('Electrónicos', 'Productos electrónicos de consumo'),\n        ('Papelería', 'Productos de papelería y oficina');\n`);\n// Insertar productos\nawait db.query(`\n    INSERT INTO Productos (nombre, descripcion, precio, stock, idCategoria)\n    VALUES \n        ('Smartphone', 'Teléfono inteligente de última generación', 899.99, 50, 1),\n        ('Lápiz', 'Lápiz de grafito HB', 0.99, 1000, 2);\n`);\n// Insertar tipos de pago y métodos de venta\nawait db.query(`\n    INSERT INTO tipoPago (descripcion, fecha_creacion, activo) \n    VALUES ('Efectivo', NOW(), TRUE), ('Tarjeta de crédito', NOW(), TRUE);\n`);\nawait db.query(`\n    INSERT INTO MetodoVenta (idTipoPago, descripcion, comision, fecha_creacion, activo)\n    VALUES \n        (1, 'Efectivo', 0.00, NOW(), TRUE), \n        (2, 'Tarjeta de crédito', 0.05, NOW(), TRUE);\n`);\n// Insertar proveedores y pedidos\nawait db.query(`\n    INSERT INTO Proveedores (nombre, direccion, rfc, telefono)\n    VALUES ('Proveedor XYZ', 'Calle Principal 123', 'RFC123456789', '5551234561');\n`);\nawait db.query(`\n    INSERT INTO Pedidos (total, estado, fechaPedido, idMetodoV, idProveedor)\n    VALUES \n        (1200.50, 'Pendiente', NOW(), 1, 1);\n`);\n// Insertar detalle de pedido inicial\nawait db.query(`\n    INSERT INTO PedidoDetalles (idPedido, idProducto, cantidad, subtotal, iva)\n    VALUES (1, 1, 5, 500.00, 80.00);\n`);",
              "err": {},
              "uuid": "a857fa49-84d2-4e86-81cc-168af87f7cd4",
              "parentUUID": "b4c79f0b-258d-43c2-b818-fe6c8acda04a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"PedidoDetalles API Endpoints\"",
              "fullTitle": "PedidoDetalles API Endpoints \"after all\" hook in \"PedidoDetalles API Endpoints\"",
              "timedOut": false,
              "duration": 56,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await db.query('TRUNCATE TABLE PedidoDetalles RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Pedidos RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Productos RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE MetodoVenta RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE tipoPago RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Proveedores RESTART IDENTITY CASCADE');",
              "err": {},
              "uuid": "3e442c8e-699f-4187-affe-3f9400f1f756",
              "parentUUID": "b4c79f0b-258d-43c2-b818-fe6c8acda04a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /api/pedido-detalles debe retornar todos los detalles de pedidos",
              "fullTitle": "PedidoDetalles API Endpoints GET /api/pedido-detalles debe retornar todos los detalles de pedidos",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/pedido-detalles');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(Array.isArray(res.body), true);\nassert.strictEqual(res.body.length, 1);",
              "err": {},
              "uuid": "ae3a34ed-a344-48c3-8cf8-ca10fbf8fcaf",
              "parentUUID": "b4c79f0b-258d-43c2-b818-fe6c8acda04a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /api/pedido-detalles/:idPedido/:idProducto debe retornar un detalle de pedido por ID",
              "fullTitle": "PedidoDetalles API Endpoints GET /api/pedido-detalles/:idPedido/:idProducto debe retornar un detalle de pedido por ID",
              "timedOut": false,
              "duration": 56,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/pedido-detalles/1/1');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(res.body.cantidad, 5);",
              "err": {},
              "uuid": "d68ce418-5efa-439f-9dd8-ed7fcab96e13",
              "parentUUID": "b4c79f0b-258d-43c2-b818-fe6c8acda04a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /api/pedido-detalles debe crear un nuevo detalle de pedido",
              "fullTitle": "PedidoDetalles API Endpoints POST /api/pedido-detalles debe crear un nuevo detalle de pedido",
              "timedOut": false,
              "duration": 260,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newDetalle = {\n    idPedido: 1,\n    idProducto: 2,\n    cantidad: 10,\n};\nconst res = await request(app).post('/api/pedido-detalles').send(newDetalle);\nassert.strictEqual(res.status, 201);\nassert.strictEqual(res.body.cantidad, 10);",
              "err": {},
              "uuid": "3435d91d-29ba-45ac-ac11-5a4dc601631a",
              "parentUUID": "b4c79f0b-258d-43c2-b818-fe6c8acda04a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /api/pedido-detalles debe fallar si el stock es insuficiente",
              "fullTitle": "PedidoDetalles API Endpoints POST /api/pedido-detalles debe fallar si el stock es insuficiente",
              "timedOut": false,
              "duration": 109,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidDetalle = {\n    idPedido: 1,\n    idProducto: 2,\n    cantidad: 2000, // Mayor que el stock\n};\nconst res = await request(app).post('/api/pedido-detalles').send(invalidDetalle);\nassert.strictEqual(res.status, 400);",
              "err": {},
              "uuid": "172852bf-497c-42cf-82dd-ecca4333194b",
              "parentUUID": "b4c79f0b-258d-43c2-b818-fe6c8acda04a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /api/pedido-detalles debe fallar si el detalle ya existe",
              "fullTitle": "PedidoDetalles API Endpoints POST /api/pedido-detalles debe fallar si el detalle ya existe",
              "timedOut": false,
              "duration": 154,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const duplicateDetalle = {\n    idPedido: 1,\n    idProducto: 1,\n    cantidad: 5,\n};\nconst res = await request(app).post('/api/pedido-detalles').send(duplicateDetalle);\nassert.strictEqual(res.status, 400);",
              "err": {},
              "uuid": "1ff6c7ce-d512-4dfe-889b-81680b3fc130",
              "parentUUID": "b4c79f0b-258d-43c2-b818-fe6c8acda04a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT /api/pedido-detalles/:idPedido/:idProducto debe actualizar un detalle de pedido",
              "fullTitle": "PedidoDetalles API Endpoints PUT /api/pedido-detalles/:idPedido/:idProducto debe actualizar un detalle de pedido",
              "timedOut": false,
              "duration": 165,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedDetalle = { cantidad: 15 };\nconst res = await request(app).put('/api/pedido-detalles/1/1').send(updatedDetalle);\nassert.strictEqual(res.status, 200);\nassert.strictEqual(res.body.cantidad, 15);",
              "err": {},
              "uuid": "0882d86c-cadd-4d32-a0f4-b8add8e7e5a4",
              "parentUUID": "b4c79f0b-258d-43c2-b818-fe6c8acda04a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE /api/pedido-detalles/:idPedido/:idProducto debe eliminar un detalle de pedido",
              "fullTitle": "PedidoDetalles API Endpoints DELETE /api/pedido-detalles/:idPedido/:idProducto debe eliminar un detalle de pedido",
              "timedOut": false,
              "duration": 226,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/pedido-detalles/1/1');\nassert.strictEqual(res.status, 204);\n// Verificar que fue eliminado\nconst getRes = await request(app).get('/api/pedido-detalles/1/1');\nassert.strictEqual(getRes.status, 404);",
              "err": {},
              "uuid": "29deb632-bb92-4c7e-aa19-29f60e61b0f8",
              "parentUUID": "b4c79f0b-258d-43c2-b818-fe6c8acda04a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /api/pedido-detalles/:idPedido/:idProducto debe retornar 404 para un detalle inexistente",
              "fullTitle": "PedidoDetalles API Endpoints GET /api/pedido-detalles/:idPedido/:idProducto debe retornar 404 para un detalle inexistente",
              "timedOut": false,
              "duration": 57,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/pedido-detalles/9999/9999');\nassert.strictEqual(res.status, 404);",
              "err": {},
              "uuid": "4de381d0-4e86-4423-9dc7-2e862d7470a8",
              "parentUUID": "b4c79f0b-258d-43c2-b818-fe6c8acda04a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ae3a34ed-a344-48c3-8cf8-ca10fbf8fcaf",
            "d68ce418-5efa-439f-9dd8-ed7fcab96e13",
            "3435d91d-29ba-45ac-ac11-5a4dc601631a",
            "172852bf-497c-42cf-82dd-ecca4333194b",
            "1ff6c7ce-d512-4dfe-889b-81680b3fc130",
            "0882d86c-cadd-4d32-a0f4-b8add8e7e5a4",
            "29deb632-bb92-4c7e-aa19-29f60e61b0f8",
            "4de381d0-4e86-4423-9dc7-2e862d7470a8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1039,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f8a3d063-9080-44d6-9ddd-6ff6a382e25d",
          "title": "Pedidos API Endpoints",
          "fullFile": "C:\\Users\\penar\\OneDrive\\Documentos\\hola\\test\\pedidos.test.js",
          "file": "\\test\\pedidos.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Pedidos API Endpoints\"",
              "fullTitle": "Pedidos API Endpoints \"before all\" hook in \"Pedidos API Endpoints\"",
              "timedOut": false,
              "duration": 47,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Reiniciar tablas relacionadas y configurar datos iniciales\nawait db.query('TRUNCATE TABLE Pedidos RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Proveedores RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE MetodoVenta RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE tipoPago RESTART IDENTITY CASCADE');\n// Insertar tipos de pago\nawait db.query(`\n    INSERT INTO tipoPago (descripcion, fecha_creacion, activo) \n    VALUES ('Efectivo', NOW(), TRUE), ('Tarjeta de crédito', NOW(), TRUE);\n`);\n// Insertar métodos de venta\nawait db.query(`\n    INSERT INTO MetodoVenta (idTipoPago, descripcion, comision, fecha_creacion, activo)\n    VALUES \n        (1, 'Efectivo', 0.00, NOW(), TRUE), \n        (2, 'Tarjeta de crédito', 0.05, NOW(), TRUE);\n`);\n// Insertar proveedores\nawait db.query(`\n    INSERT INTO Proveedores (nombre, direccion, rfc, telefono)\n    VALUES \n        ('Proveedor XYZ', 'Calle Principal 123', 'RFC123456789', '5551234561'),\n        ('Proveedor ABC', 'Calle Secundaria 456', 'RFC987654321', '5551234562');\n`);\n// Insertar pedidos\nawait db.query(`\n    INSERT INTO Pedidos (total, estado, fechaPedido, idMetodoV, idProveedor)\n    VALUES \n        (1200.50, 'Pendiente', NOW(), 1, 1),\n        (850.75, 'Completado', NOW(), 2, 2);\n`);",
              "err": {},
              "uuid": "1bac26f2-71ef-48d9-9a63-c9f8e5466af2",
              "parentUUID": "f8a3d063-9080-44d6-9ddd-6ff6a382e25d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Pedidos API Endpoints\"",
              "fullTitle": "Pedidos API Endpoints \"after all\" hook in \"Pedidos API Endpoints\"",
              "timedOut": false,
              "duration": 25,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await db.query('TRUNCATE TABLE Pedidos RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Proveedores RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE MetodoVenta RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE tipoPago RESTART IDENTITY CASCADE');",
              "err": {},
              "uuid": "9294f591-fae1-452a-aa06-6e7af13d7f1b",
              "parentUUID": "f8a3d063-9080-44d6-9ddd-6ff6a382e25d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /api/pedidos debe retornar todos los pedidos",
              "fullTitle": "Pedidos API Endpoints GET /api/pedidos debe retornar todos los pedidos",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/pedidos');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(Array.isArray(res.body), true);\nassert.strictEqual(res.body.length, 2);\nassert.strictEqual(res.body[0].estado, 'Pendiente');",
              "err": {},
              "uuid": "59061965-bfd6-416d-a898-d81011d3488e",
              "parentUUID": "f8a3d063-9080-44d6-9ddd-6ff6a382e25d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /api/pedidos/:id debe retornar un pedido por ID",
              "fullTitle": "Pedidos API Endpoints GET /api/pedidos/:id debe retornar un pedido por ID",
              "timedOut": false,
              "duration": 53,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/pedidos/1');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(res.body.estado, 'Pendiente');",
              "err": {},
              "uuid": "69d3d62a-6434-4558-9e00-87d08990a177",
              "parentUUID": "f8a3d063-9080-44d6-9ddd-6ff6a382e25d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /api/pedidos debe crear un nuevo pedido",
              "fullTitle": "Pedidos API Endpoints POST /api/pedidos debe crear un nuevo pedido",
              "timedOut": false,
              "duration": 72,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newPedido = {\n    total: 500.00,\n    estado: 'Pendiente',\n    idMetodoV: 1,\n    idProveedor: 1,\n};\nconst res = await request(app).post('/api/pedidos').send(newPedido);\nassert.strictEqual(res.status, 201);\nassert.strictEqual(res.body.estado, 'Pendiente');",
              "err": {},
              "uuid": "5ae5ffde-f4d9-4f73-8790-66d641b44afa",
              "parentUUID": "f8a3d063-9080-44d6-9ddd-6ff6a382e25d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /api/pedidos debe fallar con datos inválidos",
              "fullTitle": "Pedidos API Endpoints POST /api/pedidos debe fallar con datos inválidos",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidPedido = {\n    total: -100, // Total inválido\n    estado: '', // Estado vacío\n    idMetodoV: 999, // Método de venta inexistente\n    idProveedor: 999, // Proveedor inexistente\n};\nconst res = await request(app).post('/api/pedidos').send(invalidPedido);\nassert.strictEqual(res.status, 400);",
              "err": {},
              "uuid": "185f458f-e16e-4d7f-821d-145fb95797c6",
              "parentUUID": "f8a3d063-9080-44d6-9ddd-6ff6a382e25d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT /api/pedidos/:id debe actualizar un pedido",
              "fullTitle": "Pedidos API Endpoints PUT /api/pedidos/:id debe actualizar un pedido",
              "timedOut": false,
              "duration": 58,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedPedido = {\n    total: 1300.00,\n    estado: 'Completado',\n    idMetodoV: 2,\n    idProveedor: 2,\n};\nconst res = await request(app).put('/api/pedidos/1').send(updatedPedido);\nassert.strictEqual(res.status, 200);\nassert.strictEqual(res.body.estado, 'Completado');",
              "err": {},
              "uuid": "a83aa3c5-85f2-422f-8e5d-7c48e402049c",
              "parentUUID": "f8a3d063-9080-44d6-9ddd-6ff6a382e25d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE /api/pedidos/:id debe eliminar un pedido",
              "fullTitle": "Pedidos API Endpoints DELETE /api/pedidos/:id debe eliminar un pedido",
              "timedOut": false,
              "duration": 114,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/pedidos/1');\nassert.strictEqual(res.status, 204);\n// Verificar que el pedido fue eliminado\nconst getRes = await request(app).get('/api/pedidos/1');\nassert.strictEqual(getRes.status, 404);",
              "err": {},
              "uuid": "ae989b3d-5277-4c59-a9dc-a9b5776b4f48",
              "parentUUID": "f8a3d063-9080-44d6-9ddd-6ff6a382e25d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /api/pedidos/:id debe retornar 404 para un pedido inexistente",
              "fullTitle": "Pedidos API Endpoints GET /api/pedidos/:id debe retornar 404 para un pedido inexistente",
              "timedOut": false,
              "duration": 59,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/pedidos/9999');\nassert.strictEqual(res.status, 404);",
              "err": {},
              "uuid": "0cc15398-0784-4b21-96e7-8d85b2694bf1",
              "parentUUID": "f8a3d063-9080-44d6-9ddd-6ff6a382e25d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "59061965-bfd6-416d-a898-d81011d3488e",
            "69d3d62a-6434-4558-9e00-87d08990a177",
            "5ae5ffde-f4d9-4f73-8790-66d641b44afa",
            "185f458f-e16e-4d7f-821d-145fb95797c6",
            "a83aa3c5-85f2-422f-8e5d-7c48e402049c",
            "ae989b3d-5277-4c59-a9dc-a9b5776b4f48",
            "0cc15398-0784-4b21-96e7-8d85b2694bf1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 374,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "130307dc-161d-4bff-b124-6e61bca3d347",
          "title": "Productos API Endpoints",
          "fullFile": "C:\\Users\\penar\\OneDrive\\Documentos\\hola\\test\\productos.test.js",
          "file": "\\test\\productos.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Productos API Endpoints\"",
              "fullTitle": "Productos API Endpoints \"before all\" hook in \"Productos API Endpoints\"",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Reset tables and set up initial data\nawait db.query('TRUNCATE TABLE Productos RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Categorias RESTART IDENTITY CASCADE');\n// Insert categories\nawait db.query(`\n    INSERT INTO Categorias (nombre, descripcion)\n    VALUES \n        ('Electrónicos', 'Productos electrónicos de consumo'),\n        ('Papelería', 'Productos de papelería y oficina');\n`);\n// Insert initial products\nawait db.query(`\n    INSERT INTO Productos (nombre, descripcion, precio, stock, idcategoria)\n    VALUES \n        ('Smartphone', 'Teléfono inteligente de última generación', 899.99, 50, 1),\n        ('Lápiz', 'Lápiz de grafito HB', 0.99, 1000, 2);\n`);",
              "err": {},
              "uuid": "6a74767a-1ea8-4ec6-9e4a-a2942bf328d5",
              "parentUUID": "130307dc-161d-4bff-b124-6e61bca3d347",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Productos API Endpoints\"",
              "fullTitle": "Productos API Endpoints \"after all\" hook in \"Productos API Endpoints\"",
              "timedOut": false,
              "duration": 28,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await db.query('TRUNCATE TABLE Productos RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Categorias RESTART IDENTITY CASCADE');",
              "err": {},
              "uuid": "d91bf246-7a7f-4c95-ae69-8d9b3dfdec0a",
              "parentUUID": "130307dc-161d-4bff-b124-6e61bca3d347",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /api/productos debe retornar todos los productos",
              "fullTitle": "Productos API Endpoints GET /api/productos debe retornar todos los productos",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/productos');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(Array.isArray(res.body), true);\nassert.strictEqual(res.body.length, 2);\nassert.strictEqual(res.body[0].nombre, 'Smartphone');",
              "err": {},
              "uuid": "40099bb8-fdac-40dd-adfc-98a3736a39e3",
              "parentUUID": "130307dc-161d-4bff-b124-6e61bca3d347",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /api/productos/:id debe retornar un producto por ID",
              "fullTitle": "Productos API Endpoints GET /api/productos/:id debe retornar un producto por ID",
              "timedOut": false,
              "duration": 53,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/productos/1');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(res.body.nombre, 'Smartphone');",
              "err": {},
              "uuid": "dcb0bd3a-defe-4101-81c7-a9010e37070f",
              "parentUUID": "130307dc-161d-4bff-b124-6e61bca3d347",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /api/productos/:id debe retornar 404 para un producto inexistente",
              "fullTitle": "Productos API Endpoints GET /api/productos/:id debe retornar 404 para un producto inexistente",
              "timedOut": false,
              "duration": 60,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/productos/9999');\nassert.strictEqual(res.status, 404);",
              "err": {},
              "uuid": "14b777e2-c4bd-404e-bf12-b398f8866855",
              "parentUUID": "130307dc-161d-4bff-b124-6e61bca3d347",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /api/productos debe crear un nuevo producto",
              "fullTitle": "Productos API Endpoints POST /api/productos debe crear un nuevo producto",
              "timedOut": false,
              "duration": 53,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newProducto = {\n    nombre: 'Tablet',\n    descripcion: 'Tablet de última generación',\n    precio: 499.99,\n    stock: 30,\n    idcategoria: 1,\n};\nconst res = await request(app).post('/api/productos').send(newProducto);\nassert.strictEqual(res.status, 201);\nassert.strictEqual(res.body.nombre, 'Tablet');",
              "err": {},
              "uuid": "79758cae-b475-4a62-937b-78758d3d167c",
              "parentUUID": "130307dc-161d-4bff-b124-6e61bca3d347",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /api/productos debe fallar con datos inválidos",
              "fullTitle": "Productos API Endpoints POST /api/productos debe fallar con datos inválidos",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidProducto = {\n    nombre: '', // Nombre vacío\n    descripcion: 'Producto inválido',\n    precio: -100, // Precio negativo\n    stock: -10, // Stock negativo\n    idcategoria: 9999, // Categoría inexistente\n};\nconst res = await request(app).post('/api/productos').send(invalidProducto);\nassert.strictEqual(res.status, 400);",
              "err": {},
              "uuid": "0a131ff5-bc2d-40bd-a182-825c8ddc87a2",
              "parentUUID": "130307dc-161d-4bff-b124-6e61bca3d347",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT /api/productos/:id debe actualizar un producto existente",
              "fullTitle": "Productos API Endpoints PUT /api/productos/:id debe actualizar un producto existente",
              "timedOut": false,
              "duration": 60,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedProducto = {\n    nombre: 'Smartphone Pro',\n    descripcion: 'Teléfono inteligente avanzado',\n    precio: 999.99,\n    stock: 60,\n    idcategoria: 1,\n};\nconst res = await request(app).put('/api/productos/1').send(updatedProducto);\nassert.strictEqual(res.status, 200);\nassert.strictEqual(res.body.nombre, 'Smartphone Pro');",
              "err": {},
              "uuid": "682efce4-ae1b-4f94-b484-02a75e5ff546",
              "parentUUID": "130307dc-161d-4bff-b124-6e61bca3d347",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT /api/productos/:id debe retornar 404 para un producto inexistente",
              "fullTitle": "Productos API Endpoints PUT /api/productos/:id debe retornar 404 para un producto inexistente",
              "timedOut": false,
              "duration": 57,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedProducto = {\n    nombre: 'Producto Fantasma',\n    descripcion: 'Descripción fantasma',\n    precio: 100,\n    stock: 10,\n    idcategoria: 1,\n};\nconst res = await request(app).put('/api/productos/9999').send(updatedProducto);\nassert.strictEqual(res.status, 404);",
              "err": {},
              "uuid": "ad63cad4-368e-46e3-a5fd-56c125117011",
              "parentUUID": "130307dc-161d-4bff-b124-6e61bca3d347",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE /api/productos/:id debe eliminar un producto existente",
              "fullTitle": "Productos API Endpoints DELETE /api/productos/:id debe eliminar un producto existente",
              "timedOut": false,
              "duration": 116,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/productos/1');\nassert.strictEqual(res.status, 204);\n// Verify it was deleted\nconst getRes = await request(app).get('/api/productos/1');\nassert.strictEqual(getRes.status, 404);",
              "err": {},
              "uuid": "069cb0e6-17a2-4b86-8588-65f58204db61",
              "parentUUID": "130307dc-161d-4bff-b124-6e61bca3d347",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE /api/productos/:id debe retornar 404 para un producto inexistente",
              "fullTitle": "Productos API Endpoints DELETE /api/productos/:id debe retornar 404 para un producto inexistente",
              "timedOut": false,
              "duration": 59,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/productos/9999');\nassert.strictEqual(res.status, 404);",
              "err": {},
              "uuid": "2fe942c4-6420-4f3a-99f9-096bc98a9525",
              "parentUUID": "130307dc-161d-4bff-b124-6e61bca3d347",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "40099bb8-fdac-40dd-adfc-98a3736a39e3",
            "dcb0bd3a-defe-4101-81c7-a9010e37070f",
            "14b777e2-c4bd-404e-bf12-b398f8866855",
            "79758cae-b475-4a62-937b-78758d3d167c",
            "0a131ff5-bc2d-40bd-a182-825c8ddc87a2",
            "682efce4-ae1b-4f94-b484-02a75e5ff546",
            "ad63cad4-368e-46e3-a5fd-56c125117011",
            "069cb0e6-17a2-4b86-8588-65f58204db61",
            "2fe942c4-6420-4f3a-99f9-096bc98a9525"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 472,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "72b596d6-899a-4961-a960-89fd7050387b",
          "title": "Proveedores API Endpoints",
          "fullFile": "C:\\Users\\penar\\OneDrive\\Documentos\\hola\\test\\proveedores.test.js",
          "file": "\\test\\proveedores.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Proveedores API Endpoints\"",
              "fullTitle": "Proveedores API Endpoints \"before all\" hook in \"Proveedores API Endpoints\"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await db.query('TRUNCATE TABLE Proveedores RESTART IDENTITY CASCADE');\n// Insertar datos iniciales válidos\nawait db.query(`\n  INSERT INTO Proveedores (nombre, direccion, rfc, telefono)\n  VALUES \n    ('Proveedor XYZ', 'Calle Principal 123, Ciudad', 'RFC123456789A', '5551234561'),\n    ('Proveedor ABC', 'Calle Secundaria 456, Ciudad', 'RFC987654321B', '5551234562');\n`);",
              "err": {},
              "uuid": "5865f5d3-0495-4c2c-bfa8-aff3a4a6defc",
              "parentUUID": "72b596d6-899a-4961-a960-89fd7050387b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Proveedores API Endpoints\"",
              "fullTitle": "Proveedores API Endpoints \"after all\" hook in \"Proveedores API Endpoints\"",
              "timedOut": false,
              "duration": 10,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await db.query('TRUNCATE TABLE Proveedores RESTART IDENTITY CASCADE');",
              "err": {},
              "uuid": "da7da69d-f9b7-45fd-9fee-ed78438bf6e8",
              "parentUUID": "72b596d6-899a-4961-a960-89fd7050387b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /api/proveedores debe retornar todos los proveedores",
              "fullTitle": "Proveedores API Endpoints GET /api/proveedores debe retornar todos los proveedores",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/proveedores');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(Array.isArray(res.body), true);\nassert.strictEqual(res.body.length, 2);",
              "err": {},
              "uuid": "a6186328-5861-42d4-a1f9-3d2e0ffdeadc",
              "parentUUID": "72b596d6-899a-4961-a960-89fd7050387b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /api/proveedores/:id debe retornar un proveedor por ID",
              "fullTitle": "Proveedores API Endpoints GET /api/proveedores/:id debe retornar un proveedor por ID",
              "timedOut": false,
              "duration": 59,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/proveedores/1');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(res.body.nombre, 'Proveedor XYZ');",
              "err": {},
              "uuid": "7d00d291-d3a4-4917-872b-c070a986094b",
              "parentUUID": "72b596d6-899a-4961-a960-89fd7050387b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /api/proveedores debe crear un nuevo proveedor",
              "fullTitle": "Proveedores API Endpoints POST /api/proveedores debe crear un nuevo proveedor",
              "timedOut": false,
              "duration": 61,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newProveedor = {\n  nombre: 'Proveedor DEF',\n  direccion: 'Calle Tercera 789',\n  rfc: 'RFC112233445C',\n  telefono: '5551234563',\n};\nconst res = await request(app).post('/api/proveedores').send(newProveedor);\nassert.strictEqual(res.status, 201);\nassert.strictEqual(res.body.nombre, 'Proveedor DEF');",
              "err": {},
              "uuid": "9ba50c78-33f7-446a-89ae-7f34893652d7",
              "parentUUID": "72b596d6-899a-4961-a960-89fd7050387b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /api/proveedores debe fallar con datos inválidos",
              "fullTitle": "Proveedores API Endpoints POST /api/proveedores debe fallar con datos inválidos",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidProveedor = {\n  nombre: '',\n  direccion: 'Dirección sin nombre',\n  rfc: '123', // RFC inválido\n  telefono: '123456', // Teléfono inválido\n};\nconst res = await request(app).post('/api/proveedores').send(invalidProveedor);\nassert.strictEqual(res.status, 400);",
              "err": {},
              "uuid": "79e079b0-c951-478b-8cfa-fd9bc0a7a7da",
              "parentUUID": "72b596d6-899a-4961-a960-89fd7050387b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT /api/proveedores/:id debe actualizar un proveedor existente",
              "fullTitle": "Proveedores API Endpoints PUT /api/proveedores/:id debe actualizar un proveedor existente",
              "timedOut": false,
              "duration": 61,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedProveedor = {\n  nombre: 'Proveedor XYZ Modificado',\n  direccion: 'Nueva dirección',\n  rfc: 'RFC0987654321',\n  telefono: '5559876543',\n};\nconst res = await request(app).put('/api/proveedores/1').send(updatedProveedor);\nassert.strictEqual(res.status, 200);\nassert.strictEqual(res.body.nombre, 'Proveedor XYZ Modificado');",
              "err": {},
              "uuid": "31c4504a-0798-49d2-8a2e-4381ad573bba",
              "parentUUID": "72b596d6-899a-4961-a960-89fd7050387b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE /api/proveedores/:id debe eliminar un proveedor existente",
              "fullTitle": "Proveedores API Endpoints DELETE /api/proveedores/:id debe eliminar un proveedor existente",
              "timedOut": false,
              "duration": 114,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/proveedores/1');\nassert.strictEqual(res.status, 204);\n// Verificar que fue eliminado\nconst getRes = await request(app).get('/api/proveedores/1');\nassert.strictEqual(getRes.status, 404);",
              "err": {},
              "uuid": "6e385d75-3cb0-48de-a819-bc3f0ee99c34",
              "parentUUID": "72b596d6-899a-4961-a960-89fd7050387b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a6186328-5861-42d4-a1f9-3d2e0ffdeadc",
            "7d00d291-d3a4-4917-872b-c070a986094b",
            "9ba50c78-33f7-446a-89ae-7f34893652d7",
            "79e079b0-c951-478b-8cfa-fd9bc0a7a7da",
            "31c4504a-0798-49d2-8a2e-4381ad573bba",
            "6e385d75-3cb0-48de-a819-bc3f0ee99c34"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 312,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0a1271d7-5907-4e6f-a6e9-eac1b8c78927",
          "title": "Roles API Endpoints",
          "fullFile": "C:\\Users\\penar\\OneDrive\\Documentos\\hola\\test\\roles.test.js",
          "file": "\\test\\roles.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Roles API Endpoints\"",
              "fullTitle": "Roles API Endpoints \"before all\" hook in \"Roles API Endpoints\"",
              "timedOut": false,
              "duration": 20,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Reiniciar tabla de roles\nawait db.query('TRUNCATE TABLE Roles RESTART IDENTITY CASCADE');\n// Insertar datos iniciales desde la base de datos proporcionada\nawait db.query(`\n  INSERT INTO Roles (tipo) \n  VALUES \n  ('Administrador'), \n  ('Vendedor'), \n  ('Cliente'), \n  ('Gerente'), \n  ('Soporte Técnico');\n`);",
              "err": {},
              "uuid": "55aab11b-c559-4b94-ae86-bb31d29e2040",
              "parentUUID": "0a1271d7-5907-4e6f-a6e9-eac1b8c78927",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Roles API Endpoints\"",
              "fullTitle": "Roles API Endpoints \"after all\" hook in \"Roles API Endpoints\"",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Limpieza después de las pruebas\nawait db.query('TRUNCATE TABLE Roles RESTART IDENTITY CASCADE');",
              "err": {},
              "uuid": "3e769970-eac3-4f7d-80a3-eadb76ddbeea",
              "parentUUID": "0a1271d7-5907-4e6f-a6e9-eac1b8c78927",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /api/roles debe retornar todos los roles",
              "fullTitle": "Roles API Endpoints GET /api/roles debe retornar todos los roles",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/roles');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(Array.isArray(res.body), true);\nassert.strictEqual(res.body.length, 5); // Verifica que hay 5 roles en la base de datos",
              "err": {},
              "uuid": "d0a452f0-1ab2-4a91-a8ba-30332c33c8ea",
              "parentUUID": "0a1271d7-5907-4e6f-a6e9-eac1b8c78927",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /api/roles/:id debe retornar un rol por ID",
              "fullTitle": "Roles API Endpoints GET /api/roles/:id debe retornar un rol por ID",
              "timedOut": false,
              "duration": 55,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/roles/1'); // Rol con id 1 debería ser 'Administrador'\nassert.strictEqual(res.status, 200);\nassert.strictEqual(res.body.tipo, 'Administrador');",
              "err": {},
              "uuid": "038e5e3c-b6c2-4a6e-8de1-b7aaee1c3e9e",
              "parentUUID": "0a1271d7-5907-4e6f-a6e9-eac1b8c78927",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /api/roles debe crear un nuevo rol",
              "fullTitle": "Roles API Endpoints POST /api/roles debe crear un nuevo rol",
              "timedOut": false,
              "duration": 59,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newRol = { tipo: 'Moderador' };\nconst res = await request(app).post('/api/roles').send(newRol);\nassert.strictEqual(res.status, 201);\nassert.strictEqual(res.body.tipo, 'Moderador');",
              "err": {},
              "uuid": "15f14945-d973-4cca-bb25-85ac4342a00b",
              "parentUUID": "0a1271d7-5907-4e6f-a6e9-eac1b8c78927",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /api/roles debe fallar si falta el campo tipo",
              "fullTitle": "Roles API Endpoints POST /api/roles debe fallar si falta el campo tipo",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidRol = {}; // Aquí falta el campo \"tipo\"\nconst res = await request(app).post('/api/roles').send(invalidRol);\nassert.strictEqual(res.status, 400); // Espera un error 400\nassert.strictEqual(res.body.message, 'El campo \"tipo\" es obligatorio.'); // Verifica el mensaje de error",
              "err": {},
              "uuid": "f42d204b-1ff8-4bc3-8778-b1a6635ed844",
              "parentUUID": "0a1271d7-5907-4e6f-a6e9-eac1b8c78927",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT /api/roles/:id debe actualizar un rol",
              "fullTitle": "Roles API Endpoints PUT /api/roles/:id debe actualizar un rol",
              "timedOut": false,
              "duration": 51,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedRol = { tipo: 'SuperAdmin' };\nconst res = await request(app).put('/api/roles/1').send(updatedRol); // Actualizar rol 'Administrador'\nassert.strictEqual(res.status, 200);\nassert.strictEqual(res.body.tipo, 'SuperAdmin');",
              "err": {},
              "uuid": "4370c6ad-f0b2-4f63-94ff-1e83f56a23c6",
              "parentUUID": "0a1271d7-5907-4e6f-a6e9-eac1b8c78927",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE /api/roles/:id debe eliminar un rol",
              "fullTitle": "Roles API Endpoints DELETE /api/roles/:id debe eliminar un rol",
              "timedOut": false,
              "duration": 97,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/roles/1'); // Eliminar rol 'Administrador'\nassert.strictEqual(res.status, 204); // No Content\n// Verificar que el rol fue eliminado\nconst getRes = await request(app).get('/api/roles/1');\nassert.strictEqual(getRes.status, 404);",
              "err": {},
              "uuid": "f9d71222-e1bd-4efb-9bf2-0f2266f851a2",
              "parentUUID": "0a1271d7-5907-4e6f-a6e9-eac1b8c78927",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /api/roles/:id debe retornar 404 para un rol inexistente",
              "fullTitle": "Roles API Endpoints GET /api/roles/:id debe retornar 404 para un rol inexistente",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/roles/9999'); // ID que no existe\nassert.strictEqual(res.status, 404);",
              "err": {},
              "uuid": "95f96cda-e863-4b97-82ae-e0649446dcce",
              "parentUUID": "0a1271d7-5907-4e6f-a6e9-eac1b8c78927",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d0a452f0-1ab2-4a91-a8ba-30332c33c8ea",
            "038e5e3c-b6c2-4a6e-8de1-b7aaee1c3e9e",
            "15f14945-d973-4cca-bb25-85ac4342a00b",
            "f42d204b-1ff8-4bc3-8778-b1a6635ed844",
            "4370c6ad-f0b2-4f63-94ff-1e83f56a23c6",
            "f9d71222-e1bd-4efb-9bf2-0f2266f851a2",
            "95f96cda-e863-4b97-82ae-e0649446dcce"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 329,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "62903a27-ebed-4558-95be-fbc70443c6e4",
          "title": "Tipos de Pago API Endpoints",
          "fullFile": "C:\\Users\\penar\\OneDrive\\Documentos\\hola\\test\\tipoPago.test.js",
          "file": "\\test\\tipoPago.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Tipos de Pago API Endpoints\"",
              "fullTitle": "Tipos de Pago API Endpoints \"before all\" hook in \"Tipos de Pago API Endpoints\"",
              "timedOut": false,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Reiniciar tabla TipoPago y configurar datos iniciales\nawait db.query('TRUNCATE TABLE TipoPago RESTART IDENTITY CASCADE');\n// Insertar datos iniciales de tipos de pago\nawait db.query(`\n  INSERT INTO TipoPago (descripcion, fecha_creacion, activo)\n  VALUES \n    ('Efectivo', NOW(), TRUE),\n    ('Tarjeta de crédito', NOW(), TRUE);\n`);",
              "err": {},
              "uuid": "980b6830-348e-485b-9acc-ebb25ef349d2",
              "parentUUID": "62903a27-ebed-4558-95be-fbc70443c6e4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Tipos de Pago API Endpoints\"",
              "fullTitle": "Tipos de Pago API Endpoints \"after all\" hook in \"Tipos de Pago API Endpoints\"",
              "timedOut": false,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Limpiar la tabla TipoPago después de las pruebas\nawait db.query('TRUNCATE TABLE TipoPago RESTART IDENTITY CASCADE');",
              "err": {},
              "uuid": "95c597c1-844e-4988-aca9-6a7e640ccf4d",
              "parentUUID": "62903a27-ebed-4558-95be-fbc70443c6e4",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /api/tipos-pago debe retornar todos los tipos de pago",
              "fullTitle": "Tipos de Pago API Endpoints GET /api/tipos-pago debe retornar todos los tipos de pago",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/tipos-pago');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(Array.isArray(res.body), true);\nassert.strictEqual(res.body.length, 2); \nassert.strictEqual(res.body[0].descripcion, 'Efectivo');\nassert.strictEqual(res.body[1].descripcion, 'Tarjeta de crédito');",
              "err": {},
              "uuid": "e94a2264-3842-4b2a-9b10-be095a031e81",
              "parentUUID": "62903a27-ebed-4558-95be-fbc70443c6e4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /api/tipos-pago/:id debe retornar un tipo de pago por ID",
              "fullTitle": "Tipos de Pago API Endpoints GET /api/tipos-pago/:id debe retornar un tipo de pago por ID",
              "timedOut": false,
              "duration": 55,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/tipos-pago/1');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(res.body.descripcion, 'Efectivo');",
              "err": {},
              "uuid": "dcdfc93e-b236-48bd-81b8-cc5941fa1180",
              "parentUUID": "62903a27-ebed-4558-95be-fbc70443c6e4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /api/tipos-pago debe crear un nuevo tipo de pago",
              "fullTitle": "Tipos de Pago API Endpoints POST /api/tipos-pago debe crear un nuevo tipo de pago",
              "timedOut": false,
              "duration": 60,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newTipo = {\n  descripcion: 'Transferencia bancaria',\n  activo: true,\n};\nconst res = await request(app).post('/api/tipos-pago').send(newTipo);\nassert.strictEqual(res.status, 201);\nassert.strictEqual(res.body.descripcion, 'Transferencia bancaria');\nassert.strictEqual(res.body.activo, true);",
              "err": {},
              "uuid": "e5bf62c1-d8f4-4751-9313-a38535de3f6f",
              "parentUUID": "62903a27-ebed-4558-95be-fbc70443c6e4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /api/tipos-pago debe fallar con datos inválidos",
              "fullTitle": "Tipos de Pago API Endpoints POST /api/tipos-pago debe fallar con datos inválidos",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidTipo = {\n  descripcion: '', // Descripción vacía\n  activo: 'invalid', // Valor no booleano\n};\nconst res = await request(app).post('/api/tipos-pago').send(invalidTipo);\nassert.strictEqual(res.status, 400);\nassert.ok(Array.isArray(res.body.errores));\nassert.ok(res.body.errores.length > 0);",
              "err": {},
              "uuid": "2bd51f5e-8036-414b-be28-7b82f8e8d9fe",
              "parentUUID": "62903a27-ebed-4558-95be-fbc70443c6e4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT /api/tipos-pago/:id debe actualizar un tipo de pago existente",
              "fullTitle": "Tipos de Pago API Endpoints PUT /api/tipos-pago/:id debe actualizar un tipo de pago existente",
              "timedOut": false,
              "duration": 59,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedTipo = {\n  descripcion: 'Efectivo Modificado',\n  activo: false,\n};\nconst res = await request(app).put('/api/tipos-pago/1').send(updatedTipo);\nassert.strictEqual(res.status, 200);\nassert.strictEqual(res.body.descripcion, 'Efectivo Modificado');\nassert.strictEqual(res.body.activo, false);",
              "err": {},
              "uuid": "8c6aaf61-f242-49d0-bf4b-37b183861a67",
              "parentUUID": "62903a27-ebed-4558-95be-fbc70443c6e4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE /api/tipos-pago/:id debe eliminar un tipo de pago existente",
              "fullTitle": "Tipos de Pago API Endpoints DELETE /api/tipos-pago/:id debe eliminar un tipo de pago existente",
              "timedOut": false,
              "duration": 116,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/tipos-pago/1');\nassert.strictEqual(res.status, 204);\n// Verificar que el tipo de pago fue eliminado\nconst getRes = await request(app).get('/api/tipos-pago/1');\nassert.strictEqual(getRes.status, 404);",
              "err": {},
              "uuid": "340a566d-8163-49a4-9ffe-7b89c77a1e0a",
              "parentUUID": "62903a27-ebed-4558-95be-fbc70443c6e4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /api/tipos-pago/:id debe retornar 404 para un tipo de pago inexistente",
              "fullTitle": "Tipos de Pago API Endpoints GET /api/tipos-pago/:id debe retornar 404 para un tipo de pago inexistente",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/tipos-pago/9999'); // ID inexistente\nassert.strictEqual(res.status, 404);",
              "err": {},
              "uuid": "b07520c7-0d0e-48ef-8f0a-e017a7ae60e7",
              "parentUUID": "62903a27-ebed-4558-95be-fbc70443c6e4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e94a2264-3842-4b2a-9b10-be095a031e81",
            "dcdfc93e-b236-48bd-81b8-cc5941fa1180",
            "e5bf62c1-d8f4-4751-9313-a38535de3f6f",
            "2bd51f5e-8036-414b-be28-7b82f8e8d9fe",
            "8c6aaf61-f242-49d0-bf4b-37b183861a67",
            "340a566d-8163-49a4-9ffe-7b89c77a1e0a",
            "b07520c7-0d0e-48ef-8f0a-e017a7ae60e7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 353,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "43bd996c-7f45-4e18-b152-fbb5bb041bd1",
          "title": "Usuarios API Endpoints",
          "fullFile": "C:\\Users\\penar\\OneDrive\\Documentos\\hola\\test\\usuarios.test.js",
          "file": "\\test\\usuarios.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Usuarios API Endpoints\"",
              "fullTitle": "Usuarios API Endpoints \"before all\" hook in \"Usuarios API Endpoints\"",
              "timedOut": false,
              "duration": 65,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Limpiar las tablas y agregar datos iniciales\nawait db.query('TRUNCATE TABLE Usuarios RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Roles RESTART IDENTITY CASCADE');\n// Insertar roles\nawait db.query(`\n  INSERT INTO Roles (tipo)\n  VALUES ('Administrador'), ('Vendedor'), ('Cliente');\n`);\n// Insertar usuarios\nawait db.query(`\n  INSERT INTO Usuarios (nombre, correo, password, idRol)\n  VALUES \n  ('Juan Pérez', 'juan@gmail.com', '123456', 1),\n  ('Ana García', 'ana@gmail.com', 'abcdef', 2);\n`);",
              "err": {},
              "uuid": "fcee5d9e-8796-45ed-9700-2fbd5f759f42",
              "parentUUID": "43bd996c-7f45-4e18-b152-fbb5bb041bd1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Usuarios API Endpoints\"",
              "fullTitle": "Usuarios API Endpoints \"after all\" hook in \"Usuarios API Endpoints\"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Limpiar las tablas después de las pruebas\nawait db.query('TRUNCATE TABLE Usuarios RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Roles RESTART IDENTITY CASCADE');",
              "err": {},
              "uuid": "27ae0227-619f-4b12-8e41-a987d2c8c7d7",
              "parentUUID": "43bd996c-7f45-4e18-b152-fbb5bb041bd1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /api/usuarios debe retornar todos los usuarios",
              "fullTitle": "Usuarios API Endpoints GET /api/usuarios debe retornar todos los usuarios",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/usuarios');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(Array.isArray(res.body), true);\nassert.strictEqual(res.body.length, 2);\nassert.strictEqual(res.body[0].nombre, 'Juan Pérez');",
              "err": {},
              "uuid": "94da8f0e-ddfc-4e8e-99cb-2cd579af85df",
              "parentUUID": "43bd996c-7f45-4e18-b152-fbb5bb041bd1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /api/usuarios/:id debe retornar un usuario por ID",
              "fullTitle": "Usuarios API Endpoints GET /api/usuarios/:id debe retornar un usuario por ID",
              "timedOut": false,
              "duration": 52,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/usuarios/1');\nassert.strictEqual(res.status, 200);\nassert.ok(res.body.hasOwnProperty('nombre'));\nassert.strictEqual(res.body.nombre, 'Juan Pérez');",
              "err": {},
              "uuid": "b0f83019-741d-47ef-9448-7337f8939391",
              "parentUUID": "43bd996c-7f45-4e18-b152-fbb5bb041bd1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /api/usuarios debe crear un nuevo usuario",
              "fullTitle": "Usuarios API Endpoints POST /api/usuarios debe crear un nuevo usuario",
              "timedOut": false,
              "duration": 95,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUsuario = {\n  nombre: 'Oscar López',\n  correo: 'oscar@gmail.com',\n  password: '12345678',\n  idRol: 3,\n};\nconst res = await request(app).post('/api/usuarios').send(newUsuario);\nassert.strictEqual(res.status, 201);\nassert.ok(res.body.hasOwnProperty('nombre'));\nassert.strictEqual(res.body.nombre, 'Oscar López');\n// Verificar que se agregó correctamente\nconst allUsuarios = await request(app).get('/api/usuarios');\nassert.strictEqual(allUsuarios.body.length, 3);",
              "err": {},
              "uuid": "5767b4b6-f1e8-4952-a686-d180567cd447",
              "parentUUID": "43bd996c-7f45-4e18-b152-fbb5bb041bd1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /api/usuarios debe fallar con datos inválidos",
              "fullTitle": "Usuarios API Endpoints POST /api/usuarios debe fallar con datos inválidos",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidUsuario = {\n  nombre: '', // Nombre vacío\n  correo: 'oscar.com', // Correo inválido\n  password: '123', // Contraseña corta\n  idRol: 'admin', // idRol inválido\n};\nconst res = await request(app).post('/api/usuarios').send(invalidUsuario);\nassert.strictEqual(res.status, 400);\nassert.ok(Array.isArray(res.body.errores));\nassert.ok(res.body.errores.length > 0);",
              "err": {},
              "uuid": "aa24b9e1-b8bd-4c04-8d1b-c28703fbc46c",
              "parentUUID": "43bd996c-7f45-4e18-b152-fbb5bb041bd1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT /api/usuarios/:id debe actualizar un usuario existente",
              "fullTitle": "Usuarios API Endpoints PUT /api/usuarios/:id debe actualizar un usuario existente",
              "timedOut": false,
              "duration": 77,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedUsuario = {\n  nombre: 'Juan Pérez Actualizado',\n  correo: 'juan.actualizado@gmail.com',\n  password: '654321',\n  idRol: 2,\n};\nconst res = await request(app).put('/api/usuarios/1').send(updatedUsuario);\nassert.strictEqual(res.status, 200);\nassert.ok(res.body.hasOwnProperty('nombre'));\nassert.strictEqual(res.body.nombre, 'Juan Pérez Actualizado');",
              "err": {},
              "uuid": "b80900fc-5756-4fe6-88fa-b8c0c7f1506e",
              "parentUUID": "43bd996c-7f45-4e18-b152-fbb5bb041bd1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT /api/usuarios/:id debe fallar con datos inválidos",
              "fullTitle": "Usuarios API Endpoints PUT /api/usuarios/:id debe fallar con datos inválidos",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidUsuario = {\n  nombre: 'A', // Nombre demasiado corto\n  correo: 'invalid.com', // Correo inválido\n  password: '123', // Contraseña corta\n  idRol: 'rol', // idRol inválido\n};\nconst res = await request(app).put('/api/usuarios/1').send(invalidUsuario);\nassert.strictEqual(res.status, 400);\nassert.ok(Array.isArray(res.body.errores));\nassert.ok(res.body.errores.length > 0);",
              "err": {},
              "uuid": "05dbd517-b20d-4a68-b269-2c73708ceeee",
              "parentUUID": "43bd996c-7f45-4e18-b152-fbb5bb041bd1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE /api/usuarios/:id debe eliminar un usuario existente",
              "fullTitle": "Usuarios API Endpoints DELETE /api/usuarios/:id debe eliminar un usuario existente",
              "timedOut": false,
              "duration": 113,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/usuarios/1');\nassert.strictEqual(res.status, 204);\n// Verificar que el usuario fue eliminado\nconst getRes = await request(app).get('/api/usuarios/1');\nassert.strictEqual(getRes.status, 404);",
              "err": {},
              "uuid": "fb11e1a5-78de-4ae0-aa83-60f25121559c",
              "parentUUID": "43bd996c-7f45-4e18-b152-fbb5bb041bd1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /api/usuarios/:id debe retornar 404 para un usuario inexistente",
              "fullTitle": "Usuarios API Endpoints GET /api/usuarios/:id debe retornar 404 para un usuario inexistente",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/usuarios/999');\nassert.strictEqual(res.status, 404);",
              "err": {},
              "uuid": "54e3ee9e-e37d-4aa9-8f78-c52c0c49838e",
              "parentUUID": "43bd996c-7f45-4e18-b152-fbb5bb041bd1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "94da8f0e-ddfc-4e8e-99cb-2cd579af85df",
            "b0f83019-741d-47ef-9448-7337f8939391",
            "5767b4b6-f1e8-4952-a686-d180567cd447",
            "aa24b9e1-b8bd-4c04-8d1b-c28703fbc46c",
            "b80900fc-5756-4fe6-88fa-b8c0c7f1506e",
            "05dbd517-b20d-4a68-b269-2c73708ceeee",
            "fb11e1a5-78de-4ae0-aa83-60f25121559c",
            "54e3ee9e-e37d-4aa9-8f78-c52c0c49838e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 408,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "91b7908e-5f03-42bf-a110-8a044b2388db",
          "title": "Ventas API Endpoints",
          "fullFile": "C:\\Users\\penar\\OneDrive\\Documentos\\hola\\test\\ventas.test.js",
          "file": "\\test\\ventas.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Ventas API Endpoints\"",
              "fullTitle": "Ventas API Endpoints \"before all\" hook in \"Ventas API Endpoints\"",
              "timedOut": false,
              "duration": 54,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Limpieza y reinicio de las tablas\nawait db.query('TRUNCATE TABLE Ventas RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Empleados RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Usuarios RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Roles RESTART IDENTITY CASCADE');\n// Insertar roles\nawait db.query(`\n  INSERT INTO Roles (tipo)\n  VALUES ('Administrador'), ('Vendedor');\n`);\n// Insertar usuarios\nawait db.query(`\n  INSERT INTO Usuarios (nombre, correo, password, idRol)\n  VALUES\n  ('Eliezer Cerecedo', 'eliezercerecedo82@gmail.com', 'Bocchi17', 1),\n  ('Juan Pablo', 'juanpablo@gmail.com', 'pablitin18', 2);\n`);\n// Insertar empleados\nawait db.query(`\n  INSERT INTO Empleados (nombre, apPaterno, apMaterno, fechaNacimiento, curp, idUsuario)\n  VALUES\n  ('Eliezer Isai', 'Cerecedo', 'Florencia', '2002-11-12', 'ABC123456XYZ789012', 1),\n  ('Juan', 'Perez', 'Lopez', '1985-07-20', 'DEF123456XYZ789012', 2);\n`);\n// Insertar ventas (asegúrate de que idEmpleado corresponda a un id válido)\nawait db.query(`\n  INSERT INTO Ventas (fechaVenta, monto, idEmpleado)\n  VALUES (NOW(), 1000.50, 1), (NOW(), 500.75, 2);\n`);",
              "err": {},
              "uuid": "97e0970d-707c-4396-9cce-52a990f7e355",
              "parentUUID": "91b7908e-5f03-42bf-a110-8a044b2388db",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Ventas API Endpoints\"",
              "fullTitle": "Ventas API Endpoints \"after all\" hook in \"Ventas API Endpoints\"",
              "timedOut": false,
              "duration": 40,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Limpieza después de las pruebas\nawait db.query('TRUNCATE TABLE Ventas RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Empleados RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Usuarios RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Roles RESTART IDENTITY CASCADE');",
              "err": {},
              "uuid": "1e1aa5e4-65d3-4e17-be6b-5c4a56be30ba",
              "parentUUID": "91b7908e-5f03-42bf-a110-8a044b2388db",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /api/ventas debe retornar todas las ventas",
              "fullTitle": "Ventas API Endpoints GET /api/ventas debe retornar todas las ventas",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/ventas');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(Array.isArray(res.body), true);\nassert.strictEqual(res.body.length, 2); // Verifica que hay dos ventas",
              "err": {},
              "uuid": "ccb74120-fd28-4678-9d00-ffa08b5ae5f9",
              "parentUUID": "91b7908e-5f03-42bf-a110-8a044b2388db",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /api/ventas/:folio debe retornar una venta por folio",
              "fullTitle": "Ventas API Endpoints GET /api/ventas/:folio debe retornar una venta por folio",
              "timedOut": false,
              "duration": 52,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/ventas/1');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(res.body.folio, 1);\nassert.strictEqual(res.body.monto, 1000.50);",
              "err": {},
              "uuid": "73504f84-8a65-4724-8d9e-a8effb003a22",
              "parentUUID": "91b7908e-5f03-42bf-a110-8a044b2388db",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /api/ventas debe crear una nueva venta",
              "fullTitle": "Ventas API Endpoints POST /api/ventas debe crear una nueva venta",
              "timedOut": false,
              "duration": 55,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newVenta = { monto: 700.25, idempleado: 2 }; // asegurarse de que los datos sean correctos\nconst res = await request(app).post('/api/ventas').send(newVenta);\nassert.strictEqual(res.status, 201); // Espera 201: Created\nassert.strictEqual(res.body.monto, 700.25); // Verifica el monto\nassert.strictEqual(res.body.idempleado, 2); // Verifica el id del empleado",
              "err": {},
              "uuid": "31513f29-f7c0-47f8-96c3-61e67c4bc920",
              "parentUUID": "91b7908e-5f03-42bf-a110-8a044b2388db",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /api/ventas debe fallar si falta el campo monto",
              "fullTitle": "Ventas API Endpoints POST /api/ventas debe fallar si falta el campo monto",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidVenta = { idEmpleado: 2 }; // Monto faltante\nconst res = await request(app).post('/api/ventas').send(invalidVenta);\nassert.strictEqual(res.status, 400); // Bad Request",
              "err": {},
              "uuid": "61131ea0-bbcf-41f3-a16e-4c396be440c5",
              "parentUUID": "91b7908e-5f03-42bf-a110-8a044b2388db",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT /api/ventas/:folio debe actualizar una venta",
              "fullTitle": "Ventas API Endpoints PUT /api/ventas/:folio debe actualizar una venta",
              "timedOut": false,
              "duration": 64,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedVenta = { monto: 1200.75, idempleado: 1 }; // asegurarse de que los datos sean correctos\nconst res = await request(app).put('/api/ventas/1').send(updatedVenta);\nassert.strictEqual(res.status, 200); // Espera 200: OK\nassert.strictEqual(res.body.monto, 1200.75); // Verifica el monto actualizado\nassert.strictEqual(res.body.idempleado, 1); // Verifica el id del empleado",
              "err": {},
              "uuid": "66b4a240-784c-4053-b1a2-6165ee6925c4",
              "parentUUID": "91b7908e-5f03-42bf-a110-8a044b2388db",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE /api/ventas/:folio debe eliminar una venta",
              "fullTitle": "Ventas API Endpoints DELETE /api/ventas/:folio debe eliminar una venta",
              "timedOut": false,
              "duration": 114,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/ventas/1');\nassert.strictEqual(res.status, 204); // No Content\n// Verificar que la venta fue eliminada\nconst getRes = await request(app).get('/api/ventas/1');\nassert.strictEqual(getRes.status, 404); // Venta no encontrada",
              "err": {},
              "uuid": "f2227254-d943-4b0e-8d8e-8ce8115c0811",
              "parentUUID": "91b7908e-5f03-42bf-a110-8a044b2388db",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /api/ventas/:folio debe retornar 404 para una venta inexistente",
              "fullTitle": "Ventas API Endpoints GET /api/ventas/:folio debe retornar 404 para una venta inexistente",
              "timedOut": false,
              "duration": 60,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/ventas/9999'); // Folio inexistente\nassert.strictEqual(res.status, 404); // No se encuentra la venta",
              "err": {},
              "uuid": "e11e7707-a7f7-4228-8f10-56a26985546d",
              "parentUUID": "91b7908e-5f03-42bf-a110-8a044b2388db",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ccb74120-fd28-4678-9d00-ffa08b5ae5f9",
            "73504f84-8a65-4724-8d9e-a8effb003a22",
            "31513f29-f7c0-47f8-96c3-61e67c4bc920",
            "61131ea0-bbcf-41f3-a16e-4c396be440c5",
            "66b4a240-784c-4053-b1a2-6165ee6925c4",
            "f2227254-d943-4b0e-8d8e-8ce8115c0811",
            "e11e7707-a7f7-4228-8f10-56a26985546d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 361,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}