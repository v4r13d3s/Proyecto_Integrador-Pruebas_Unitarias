{
  "stats": {
    "suites": 13,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2024-11-27T21:46:48.142Z",
    "end": "2024-11-27T21:46:50.139Z",
    "duration": 1997,
    "testsRegistered": 86,
    "passPercent": 1.1627906976744187,
    "pendingPercent": 0,
    "other": 24,
    "hasOther": true,
    "skipped": 85,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "836594c2-9419-4594-bf93-36b1e7bc0825",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await db.end();",
          "err": {},
          "uuid": "5e6f64b7-28cf-447a-9e88-73f587f2e24e",
          "parentUUID": "836594c2-9419-4594-bf93-36b1e7bc0825",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "b65380da-652a-4e80-ac8c-bbe5d1b4c99b",
          "title": "Categorías API Endpoints",
          "fullFile": "C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\test\\categorias.test.js",
          "file": "\\test\\categorias.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"GET /api/categorias debe retornar todas las categorías\"",
              "fullTitle": "Categorías API Endpoints \"before all\" hook for \"GET /api/categorias debe retornar todas las categorías\"",
              "timedOut": false,
              "duration": 92,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Limpiar los datos existentes en la tabla y establecer datos iniciales\nawait db.query('TRUNCATE TABLE Categorias RESTART IDENTITY CASCADE');\nawait db.query(\"INSERT INTO Categorias (nombre, descripcion) VALUES ('General', 'Categoría general')\");",
              "err": {
                "message": "error: la autentificaci�n password fall� para el usuario �postgres�",
                "estack": "error: la autentificaci�n password fall� para el usuario �postgres�\n    at C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test\\categorias.test.js:12:5)",
                "diff": null
              },
              "uuid": "744dfef3-2ea4-4351-98b1-72f882cff94b",
              "parentUUID": "b65380da-652a-4e80-ac8c-bbe5d1b4c99b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook for \"GET /api/categorias/:id debe retornar 404 para categoría inexistente\"",
              "fullTitle": "Categorías API Endpoints \"after all\" hook for \"GET /api/categorias/:id debe retornar 404 para categoría inexistente\"",
              "timedOut": false,
              "duration": 67,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Restaurar el estado inicial de la tabla (sin cerrar la conexión, ya lo maneja el archivo global)\nawait db.query('TRUNCATE TABLE Categorias RESTART IDENTITY CASCADE');",
              "err": {
                "message": "error: la autentificaci�n password fall� para el usuario �postgres�",
                "estack": "error: la autentificaci�n password fall� para el usuario �postgres�\n    at C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test\\categorias.test.js:18:5)",
                "diff": null
              },
              "uuid": "84305875-0882-49e1-8c7f-c5ee88a20695",
              "parentUUID": "b65380da-652a-4e80-ac8c-bbe5d1b4c99b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /api/categorias debe retornar todas las categorías",
              "fullTitle": "Categorías API Endpoints GET /api/categorias debe retornar todas las categorías",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/categorias');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(Array.isArray(res.body), true);\nassert.strictEqual(res.body.length, 1);",
              "err": {},
              "uuid": "6bf7484c-4989-4503-9303-780e616fc7ca",
              "parentUUID": "b65380da-652a-4e80-ac8c-bbe5d1b4c99b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/categorias/:id debe retornar una categoría por ID",
              "fullTitle": "Categorías API Endpoints GET /api/categorias/:id debe retornar una categoría por ID",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/categorias/1');\nassert.strictEqual(res.status, 200);\nassert.ok(res.body.hasOwnProperty('nombre'));\nassert.strictEqual(res.body.nombre, 'General');",
              "err": {},
              "uuid": "0459f0c6-5a34-4c6a-a591-7c41e4a996c0",
              "parentUUID": "b65380da-652a-4e80-ac8c-bbe5d1b4c99b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "POST /api/categorias debe crear una nueva categoría",
              "fullTitle": "Categorías API Endpoints POST /api/categorias debe crear una nueva categoría",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newCategoria = { nombre: 'Electronica', descripcion: 'Categoría relacionada con Electronica' };\nconst res = await request(app).post('/api/categorias').send(newCategoria);\nassert.strictEqual(res.status, 201);\nassert.ok(res.body.hasOwnProperty('nombre'));\nassert.strictEqual(res.body.nombre, 'Electronica');\n// Verificar que la categoría se agregó\nconst allCategorias = await request(app).get('/api/categorias');\nassert.strictEqual(allCategorias.body.length, 2);",
              "err": {},
              "uuid": "252d1cec-148a-497d-9f3b-6438d08ca7c5",
              "parentUUID": "b65380da-652a-4e80-ac8c-bbe5d1b4c99b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "PUT /api/categorias/:id debe actualizar una categoría",
              "fullTitle": "Categorías API Endpoints PUT /api/categorias/:id debe actualizar una categoría",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedCategoria = { nombre: 'Papeleria', descripcion: 'Categoría relacionada con Papeleria' };\nconst res = await request(app).put('/api/categorias/1').send(updatedCategoria);\nassert.strictEqual(res.status, 200);\nassert.ok(res.body.hasOwnProperty('nombre'));\nassert.strictEqual(res.body.nombre, 'Papeleria');",
              "err": {},
              "uuid": "658ee2b5-d147-465b-9540-85733a276f2f",
              "parentUUID": "b65380da-652a-4e80-ac8c-bbe5d1b4c99b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "DELETE /api/categorias/:id debe eliminar una categoría",
              "fullTitle": "Categorías API Endpoints DELETE /api/categorias/:id debe eliminar una categoría",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/categorias/1');\nassert.strictEqual(res.status, 204);\n// Verificar que la categoría fue eliminada\nconst allCategorias = await request(app).get('/api/categorias');\nassert.strictEqual(allCategorias.body.length, 1); // La categoría eliminada ya no debería estar",
              "err": {},
              "uuid": "16f33183-1de7-4cfc-8e42-7de35965d64d",
              "parentUUID": "b65380da-652a-4e80-ac8c-bbe5d1b4c99b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/categorias/:id debe retornar 404 para categoría inexistente",
              "fullTitle": "Categorías API Endpoints GET /api/categorias/:id debe retornar 404 para categoría inexistente",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/categorias/9999');\nassert.strictEqual(res.status, 404);",
              "err": {},
              "uuid": "9301a252-e456-4e60-b430-4ea66efcbce4",
              "parentUUID": "b65380da-652a-4e80-ac8c-bbe5d1b4c99b",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "6bf7484c-4989-4503-9303-780e616fc7ca",
            "0459f0c6-5a34-4c6a-a591-7c41e4a996c0",
            "252d1cec-148a-497d-9f3b-6438d08ca7c5",
            "658ee2b5-d147-465b-9540-85733a276f2f",
            "16f33183-1de7-4cfc-8e42-7de35965d64d",
            "9301a252-e456-4e60-b430-4ea66efcbce4"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3196b5cc-af69-41cb-89d0-c3baacac7a0f",
          "title": "DetalleVentas API Endpoints",
          "fullFile": "C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\test\\detalleVentas.test.js",
          "file": "\\test\\detalleVentas.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"GET /api/detalleVentas debe retornar todos los detalles de ventas\"",
              "fullTitle": "DetalleVentas API Endpoints \"before all\" hook for \"GET /api/detalleVentas debe retornar todos los detalles de ventas\"",
              "timedOut": false,
              "duration": 168,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Limpiar las tablas y establecer datos iniciales\nawait db.query('TRUNCATE TABLE DetalleVentas RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Productos RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Categorias RESTART IDENTITY CASCADE');\n// Insertar categorías de ejemplo con nombre y descripcion\nawait db.query(\n  \"INSERT INTO Categorias (idCategoria, nombre, descripcion) VALUES (1, 'Electrónica', 'Categoría de productos electrónicos')\"\n);\nawait db.query(\n  \"INSERT INTO Categorias (idCategoria, nombre, descripcion) VALUES (2, 'Ropa', 'Categoría de ropa y vestimenta')\"\n);\n// Insertar productos con una categoría asignada\nawait db.query(\n  \"INSERT INTO Productos (idProducto, nombre, precio, descripcion, stock, idCategoria) VALUES (101, 'Producto A', 450.0, 'Descripción del producto A', 100, 1)\"\n);\nawait db.query(\n  \"INSERT INTO Productos (idProducto, nombre, precio, descripcion, stock, idCategoria) VALUES (102, 'Producto B', 500.0, 'Descripción del producto B', 50, 2)\"\n);\n// Insertar un detalle de ventas con productos existentes\nawait db.query(\n  \"INSERT INTO DetalleVentas (folio, idProducto, cantidad, total) VALUES (1, 101, 2, 900)\"\n);",
              "err": {
                "message": "error: la autentificaci�n password fall� para el usuario �postgres�",
                "estack": "error: la autentificaci�n password fall� para el usuario �postgres�\n    at C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test\\detalleVentas.test.js:11:5)",
                "diff": null
              },
              "uuid": "a1b49ce4-f7ca-4ed4-843c-6811f52dd96e",
              "parentUUID": "3196b5cc-af69-41cb-89d0-c3baacac7a0f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook for \"GET /api/detalleVentas/:folio/:idProducto debe retornar 404 para un detalle inexistente\"",
              "fullTitle": "DetalleVentas API Endpoints \"after all\" hook for \"GET /api/detalleVentas/:folio/:idProducto debe retornar 404 para un detalle inexistente\"",
              "timedOut": false,
              "duration": 67,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Restaurar el estado inicial de las tablas (sin cerrar la conexión, ya lo maneja el archivo global)\nawait db.query('TRUNCATE TABLE DetalleVentas RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Productos RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Categorias RESTART IDENTITY CASCADE');",
              "err": {
                "message": "error: la autentificaci�n password fall� para el usuario �postgres�",
                "estack": "error: la autentificaci�n password fall� para el usuario �postgres�\n    at C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test\\detalleVentas.test.js:39:5)",
                "diff": null
              },
              "uuid": "11b72d83-226b-4880-832e-69eedb3e31e7",
              "parentUUID": "3196b5cc-af69-41cb-89d0-c3baacac7a0f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /api/detalleVentas debe retornar todos los detalles de ventas",
              "fullTitle": "DetalleVentas API Endpoints GET /api/detalleVentas debe retornar todos los detalles de ventas",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/detalleVentas');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(Array.isArray(res.body), true);\nassert.strictEqual(res.body.length, 1);",
              "err": {},
              "uuid": "38df55cb-7292-4160-93b8-a7315d718059",
              "parentUUID": "3196b5cc-af69-41cb-89d0-c3baacac7a0f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/detalleVentas/:folio/:idProducto debe retornar un detalle específico",
              "fullTitle": "DetalleVentas API Endpoints GET /api/detalleVentas/:folio/:idProducto debe retornar un detalle específico",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/detalleVentas/1/101');\nassert.strictEqual(res.status, 200);\nassert.ok(res.body.hasOwnProperty('cantidad'));\nassert.strictEqual(res.body.cantidad, 2);\nassert.ok(res.body.hasOwnProperty('total'));\nassert.strictEqual(res.body.total, 900);",
              "err": {},
              "uuid": "633b348d-fb9a-44c5-a8e6-99d5e7988953",
              "parentUUID": "3196b5cc-af69-41cb-89d0-c3baacac7a0f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "POST /api/detalleVentas debe crear un nuevo detalle de venta",
              "fullTitle": "DetalleVentas API Endpoints POST /api/detalleVentas debe crear un nuevo detalle de venta",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newDetalle = { folio: 2, idProducto: 102, cantidad: 3, total: 1350 };\nconst res = await request(app).post('/api/detalleVentas').send(newDetalle);\nassert.strictEqual(res.status, 201);\nassert.ok(res.body.hasOwnProperty('folio'));\nassert.strictEqual(res.body.folio, 2);\n// Verificar que se agregó el nuevo detalle\nconst allDetalles = await request(app).get('/api/detalleVentas');\nassert.strictEqual(allDetalles.body.length, 2);",
              "err": {},
              "uuid": "83ec1146-0b06-4687-9fab-1465f38140ec",
              "parentUUID": "3196b5cc-af69-41cb-89d0-c3baacac7a0f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "PUT /api/detalleVentas/:folio/:idProducto debe actualizar un detalle",
              "fullTitle": "DetalleVentas API Endpoints PUT /api/detalleVentas/:folio/:idProducto debe actualizar un detalle",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedDetalle = { cantidad: 5, total: 2250 };\nconst res = await request(app).put('/api/detalleVentas/1/101').send(updatedDetalle);\nassert.strictEqual(res.status, 200);\nassert.ok(res.body.hasOwnProperty('cantidad'));\nassert.strictEqual(res.body.cantidad, 5);\nassert.ok(res.body.hasOwnProperty('total'));\nassert.strictEqual(res.body.total, 2250);",
              "err": {},
              "uuid": "cb19dc86-659c-4afd-9d48-b074a4b5e1d3",
              "parentUUID": "3196b5cc-af69-41cb-89d0-c3baacac7a0f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "DELETE /api/detalleVentas/:folio/:idProducto debe eliminar un detalle",
              "fullTitle": "DetalleVentas API Endpoints DELETE /api/detalleVentas/:folio/:idProducto debe eliminar un detalle",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/detalleVentas/1/101');\nassert.strictEqual(res.status, 204);\n// Verificar que el detalle fue eliminado\nconst allDetalles = await request(app).get('/api/detalleVentas');\nassert.strictEqual(allDetalles.body.length, 1);",
              "err": {},
              "uuid": "79c12ef2-be79-4e38-b0fd-60dd303327a1",
              "parentUUID": "3196b5cc-af69-41cb-89d0-c3baacac7a0f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/detalleVentas/:folio/:idProducto debe retornar 404 para un detalle inexistente",
              "fullTitle": "DetalleVentas API Endpoints GET /api/detalleVentas/:folio/:idProducto debe retornar 404 para un detalle inexistente",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/detalleVentas/9999/9999');\nassert.strictEqual(res.status, 404);",
              "err": {},
              "uuid": "84db8510-d5cb-41fb-832d-634d374bb397",
              "parentUUID": "3196b5cc-af69-41cb-89d0-c3baacac7a0f",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "38df55cb-7292-4160-93b8-a7315d718059",
            "633b348d-fb9a-44c5-a8e6-99d5e7988953",
            "83ec1146-0b06-4687-9fab-1465f38140ec",
            "cb19dc86-659c-4afd-9d48-b074a4b5e1d3",
            "79c12ef2-be79-4e38-b0fd-60dd303327a1",
            "84db8510-d5cb-41fb-832d-634d374bb397"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6d653c70-2ae0-4282-812a-8ede9ba67247",
          "title": "Bienvenida",
          "fullFile": "C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\test\\empleados.test.js",
          "file": "\\test\\empleados.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Bienvenido a los test de la API MS",
              "fullTitle": "Bienvenida Bienvenido a los test de la API MS",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log('***********************************');\nconsole.log('* Bienvenido a los test de la API MS *');\nconsole.log('***********************************');",
              "err": {},
              "uuid": "c9cefd68-1467-4f73-a856-fbc5123d0623",
              "parentUUID": "6d653c70-2ae0-4282-812a-8ede9ba67247",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c9cefd68-1467-4f73-a856-fbc5123d0623"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7d6fdf71-481a-4775-b4bd-9c3e00644944",
          "title": "Empleados API Endpoints",
          "fullFile": "C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\test\\empleados.test.js",
          "file": "\\test\\empleados.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"GET /api/empleados debe retornar todos los empleados\"",
              "fullTitle": "Empleados API Endpoints \"before all\" hook for \"GET /api/empleados debe retornar todos los empleados\"",
              "timedOut": false,
              "duration": 66,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Reiniciar tablas relacionadas y configurar datos iniciales\nawait db.query('TRUNCATE TABLE empleados RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE usuarios RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE roles RESTART IDENTITY CASCADE');\n// Insertar roles\nawait db.query(`\n  INSERT INTO roles (tipo) \n  VALUES ('Administrador'), ('Vendedor'), ('Cliente'), ('Gerente'), ('Soporte Técnico');\n`);\n// Insertar usuarios\nawait db.query(`\n  INSERT INTO usuarios (nombre, correo, password, idRol)\n  VALUES \n    ('Eliezer Cerecedo', 'eliezercerecedo82@gmail.com', 'Bocchi17', 1),\n    ('Juan Pablo', 'juanpablo@gmail.com', 'pablitin18', 2);\n`);\n// Insertar empleados\nawait db.query(`\n  INSERT INTO empleados (nombre, appaterno, apmaterno, fechanacimiento, curp, idusuario)\n  VALUES \n    ('Eliezer Isai', 'Cerecedo', 'Florencia', '2002-11-12', 'ABC123456XYZ789012', 1),\n    ('Juan', 'Perez', 'Lopez', '1985-07-20', 'DEF123456XYZ789012', 2);\n`);",
              "err": {
                "message": "error: la autentificaci�n password fall� para el usuario �postgres�",
                "estack": "error: la autentificaci�n password fall� para el usuario �postgres�\n    at C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test\\empleados.test.js:19:5)",
                "diff": null
              },
              "uuid": "f9e420ef-4bf4-4d56-961b-532d918becc6",
              "parentUUID": "7d6fdf71-481a-4775-b4bd-9c3e00644944",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook for \"GET /api/empleados/:id debe retornar 404 para un empleado inexistente\"",
              "fullTitle": "Empleados API Endpoints \"after all\" hook for \"GET /api/empleados/:id debe retornar 404 para un empleado inexistente\"",
              "timedOut": false,
              "duration": 67,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await db.query('TRUNCATE TABLE empleados RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE usuarios RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE roles RESTART IDENTITY CASCADE');",
              "err": {
                "message": "error: la autentificaci�n password fall� para el usuario �postgres�",
                "estack": "error: la autentificaci�n password fall� para el usuario �postgres�\n    at C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test\\empleados.test.js:47:5)",
                "diff": null
              },
              "uuid": "c97be09b-629a-47c7-9e6d-97f27d66558a",
              "parentUUID": "7d6fdf71-481a-4775-b4bd-9c3e00644944",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /api/empleados debe retornar todos los empleados",
              "fullTitle": "Empleados API Endpoints GET /api/empleados debe retornar todos los empleados",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/empleados');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(Array.isArray(res.body), true);\nassert.strictEqual(res.body.length, 2);\nassert.strictEqual(res.body[0].nombre, 'Eliezer Isai');",
              "err": {},
              "uuid": "ca81b2c9-1ea8-40a0-83eb-9f6ad736c8e2",
              "parentUUID": "7d6fdf71-481a-4775-b4bd-9c3e00644944",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/empleados/:id debe retornar un empleado por ID",
              "fullTitle": "Empleados API Endpoints GET /api/empleados/:id debe retornar un empleado por ID",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/empleados/1');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(res.body.nombre, 'Eliezer Isai');",
              "err": {},
              "uuid": "d67682e3-9bb8-4fa3-9841-6a38b21038b1",
              "parentUUID": "7d6fdf71-481a-4775-b4bd-9c3e00644944",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "POST /api/empleados debe crear un nuevo empleado con datos válidos",
              "fullTitle": "Empleados API Endpoints POST /api/empleados debe crear un nuevo empleado con datos válidos",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newEmpleado = {\n  nombre: 'Oscar',\n  appaterno: 'Martinez',\n  apmaterno: 'Gomez',\n  fechanacimiento: '1990-04-15',\n  curp: 'OSMG900415HDFRZS02', // CURP con formato válido\n  idusuario: 1,\n};\nconst res = await request(app).post('/api/empleados').send(newEmpleado);\nassert.strictEqual(res.status, 201);\nassert.strictEqual(res.body.nombre, 'Oscar');",
              "err": {},
              "uuid": "ee34e863-14c3-42e4-b25c-43f3bfcb8757",
              "parentUUID": "7d6fdf71-481a-4775-b4bd-9c3e00644944",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "POST /api/empleados debe fallar con datos inválidos",
              "fullTitle": "Empleados API Endpoints POST /api/empleados debe fallar con datos inválidos",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidEmpleado = {\n  nombre: 'Os', // Nombre demasiado corto\n  appaterno: '', // Apellido paterno vacío\n  apmaterno: 'ApellidoMuyLargoQueExcedeElLimite', // Apellido materno demasiado largo\n  fechanacimiento: '2025-04-15', // Fecha futura inválida\n  curp: 'CURPINVALIDO', // CURP con formato incorrecto\n  idusuario: 1,\n};\nconst res = await request(app).post('/api/empleados').send(invalidEmpleado);\nassert.strictEqual(res.status, 400);\nassert.strictEqual(Array.isArray(res.body.errores), true);\nassert.ok(res.body.errores.length > 0);",
              "err": {},
              "uuid": "cdc536c2-849c-4ca1-990c-a0c2a1d16c3c",
              "parentUUID": "7d6fdf71-481a-4775-b4bd-9c3e00644944",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "PUT /api/empleados/:id debe actualizar un empleado con datos válidos",
              "fullTitle": "Empleados API Endpoints PUT /api/empleados/:id debe actualizar un empleado con datos válidos",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedEmpleado = {\n  nombre: 'Eliezer Actualizado',\n  appaterno: 'Cerecedo',\n  apmaterno: 'Florencia',\n  fechanacimiento: '2002-11-12',\n  curp: 'ELCF021112HDFRZS04', // CURP con formato válido\n  idusuario: 1,\n};\nconst res = await request(app).put('/api/empleados/1').send(updatedEmpleado);\nassert.strictEqual(res.status, 200);\nassert.strictEqual(res.body.nombre, 'Eliezer Actualizado');",
              "err": {},
              "uuid": "938d3dde-e285-4d81-b5ce-5256248b53ed",
              "parentUUID": "7d6fdf71-481a-4775-b4bd-9c3e00644944",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "DELETE /api/empleados/:id debe eliminar un empleado",
              "fullTitle": "Empleados API Endpoints DELETE /api/empleados/:id debe eliminar un empleado",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/empleados/1');\nassert.strictEqual(res.status, 204);\n// Verificar que el empleado fue eliminado\nconst getRes = await request(app).get('/api/empleados/1');\nassert.strictEqual(getRes.status, 404);",
              "err": {},
              "uuid": "504a0757-3f5e-4b9b-ae1e-6dd396065acc",
              "parentUUID": "7d6fdf71-481a-4775-b4bd-9c3e00644944",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/empleados/:id debe retornar 404 para un empleado inexistente",
              "fullTitle": "Empleados API Endpoints GET /api/empleados/:id debe retornar 404 para un empleado inexistente",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/empleados/9999');\nassert.strictEqual(res.status, 404);",
              "err": {},
              "uuid": "b2000fd0-146d-4d38-80cd-050d90f51583",
              "parentUUID": "7d6fdf71-481a-4775-b4bd-9c3e00644944",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "ca81b2c9-1ea8-40a0-83eb-9f6ad736c8e2",
            "d67682e3-9bb8-4fa3-9841-6a38b21038b1",
            "ee34e863-14c3-42e4-b25c-43f3bfcb8757",
            "cdc536c2-849c-4ca1-990c-a0c2a1d16c3c",
            "938d3dde-e285-4d81-b5ce-5256248b53ed",
            "504a0757-3f5e-4b9b-ae1e-6dd396065acc",
            "b2000fd0-146d-4d38-80cd-050d90f51583"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c362d529-0a4d-4586-bad7-cfc0d78b6743",
          "title": "Métodos de Venta API Endpoints",
          "fullFile": "C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\test\\metodoVenta.test.js",
          "file": "\\test\\metodoVenta.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"GET /api/metodos-venta debe retornar todos los métodos de venta\"",
              "fullTitle": "Métodos de Venta API Endpoints \"before all\" hook for \"GET /api/metodos-venta debe retornar todos los métodos de venta\"",
              "timedOut": false,
              "duration": 57,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Reiniciar tablas relacionadas y configurar datos iniciales\nawait db.query('TRUNCATE TABLE MetodoVenta RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE tipoPago RESTART IDENTITY CASCADE');\n// Insertar tipos de pago\nawait db.query(`\n      INSERT INTO tipoPago (descripcion, fecha_creacion, activo) \n      VALUES ('Efectivo', NOW(), TRUE), ('Tarjeta de crédito', NOW(), TRUE);\n    `);\n// Insertar métodos de venta\nawait db.query(`\n      INSERT INTO MetodoVenta (idTipoPago, descripcion, comision, fecha_creacion, activo)\n      VALUES \n(1, 'Efectivo', 0.00, NOW(), TRUE), \n(2, 'Tarjeta de crédito', 0.05, NOW(), TRUE);\n    `);",
              "err": {
                "message": "error: la autentificaci�n password fall� para el usuario �postgres�",
                "estack": "error: la autentificaci�n password fall� para el usuario �postgres�\n    at C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test\\metodoVenta.test.js:11:9)",
                "diff": null
              },
              "uuid": "9e49bb7f-911e-4029-903e-addcb954e2bb",
              "parentUUID": "c362d529-0a4d-4586-bad7-cfc0d78b6743",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook for \"GET /api/metodos-venta/:id debe retornar 404 para un método inexistente\"",
              "fullTitle": "Métodos de Venta API Endpoints \"after all\" hook for \"GET /api/metodos-venta/:id debe retornar 404 para un método inexistente\"",
              "timedOut": false,
              "duration": 158,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await db.query('TRUNCATE TABLE MetodoVenta RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE tipoPago RESTART IDENTITY CASCADE');",
              "err": {
                "message": "error: la autentificaci�n password fall� para el usuario �postgres�",
                "estack": "error: la autentificaci�n password fall� para el usuario �postgres�\n    at C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test\\metodoVenta.test.js:30:9)",
                "diff": null
              },
              "uuid": "d61f9bb8-a3e8-484f-a546-172bb65927a3",
              "parentUUID": "c362d529-0a4d-4586-bad7-cfc0d78b6743",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /api/metodos-venta debe retornar todos los métodos de venta",
              "fullTitle": "Métodos de Venta API Endpoints GET /api/metodos-venta debe retornar todos los métodos de venta",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/metodos-venta');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(Array.isArray(res.body), true);\nassert.strictEqual(res.body.length, 2);\nassert.strictEqual(res.body[0].descripcion, 'Efectivo');",
              "err": {},
              "uuid": "2fa241da-0cb4-4da3-88c2-1025ee80e6d3",
              "parentUUID": "c362d529-0a4d-4586-bad7-cfc0d78b6743",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/metodos-venta/:id debe retornar un método de venta por ID",
              "fullTitle": "Métodos de Venta API Endpoints GET /api/metodos-venta/:id debe retornar un método de venta por ID",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/metodos-venta/1');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(res.body.descripcion, 'Efectivo');",
              "err": {},
              "uuid": "a68c6eec-ddb5-4de3-a832-1b5892e1bf1a",
              "parentUUID": "c362d529-0a4d-4586-bad7-cfc0d78b6743",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "POST /api/metodos-venta debe crear un nuevo método de venta",
              "fullTitle": "Métodos de Venta API Endpoints POST /api/metodos-venta debe crear un nuevo método de venta",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newMetodo = {\n    idTipoPago: 1,\n    descripcion: 'Transferencia Bancaria',\n    comision: 0.02,\n    activo: true,\n};\nconst res = await request(app).post('/api/metodos-venta').send(newMetodo);\nassert.strictEqual(res.status, 201);\nassert.strictEqual(res.body.descripcion, 'Transferencia Bancaria');",
              "err": {},
              "uuid": "1ea3be5d-6ade-406f-b720-45c3746c997d",
              "parentUUID": "c362d529-0a4d-4586-bad7-cfc0d78b6743",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "POST /api/metodos-venta debe fallar con datos inválidos",
              "fullTitle": "Métodos de Venta API Endpoints POST /api/metodos-venta debe fallar con datos inválidos",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidMetodo = {\n    idTipoPago: 99, // No existe\n    descripcion: 'AB', // Descripción muy corta\n    comision: 1.5, // Comisión fuera de rango\n    activo: 'true', // No es booleano\n};\nconst res = await request(app).post('/api/metodos-venta').send(invalidMetodo);\nassert.strictEqual(res.status, 400);\nassert.ok(Array.isArray(res.body.errores));\nassert.ok(res.body.errores.length > 0);",
              "err": {},
              "uuid": "e2011856-3daf-4434-9555-11ca603107be",
              "parentUUID": "c362d529-0a4d-4586-bad7-cfc0d78b6743",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "PUT /api/metodos-venta/:id debe actualizar un método de venta",
              "fullTitle": "Métodos de Venta API Endpoints PUT /api/metodos-venta/:id debe actualizar un método de venta",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedMetodo = {\n    idTipoPago: 2,\n    descripcion: 'Pago con Tarjeta',\n    comision: 0.03,\n    activo: false,\n};\nconst res = await request(app).put('/api/metodos-venta/1').send(updatedMetodo);\nassert.strictEqual(res.status, 200);\nassert.strictEqual(res.body.descripcion, 'Pago con Tarjeta');\nassert.strictEqual(Number(res.body.comision), 0.03); // Convertir a número para la comparación",
              "err": {},
              "uuid": "0a035b97-2db2-47b5-98e6-15bb6d19ac5b",
              "parentUUID": "c362d529-0a4d-4586-bad7-cfc0d78b6743",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "DELETE /api/metodos-venta/:id debe eliminar un método de venta",
              "fullTitle": "Métodos de Venta API Endpoints DELETE /api/metodos-venta/:id debe eliminar un método de venta",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/metodos-venta/1');\nassert.strictEqual(res.status, 204);\n// Verificar que el método de venta fue eliminado\nconst getRes = await request(app).get('/api/metodos-venta/1');\nassert.strictEqual(getRes.status, 404);",
              "err": {},
              "uuid": "8a1884ca-bd5f-4e29-bdd7-4cf4e707f005",
              "parentUUID": "c362d529-0a4d-4586-bad7-cfc0d78b6743",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/metodos-venta/:id debe retornar 404 para un método inexistente",
              "fullTitle": "Métodos de Venta API Endpoints GET /api/metodos-venta/:id debe retornar 404 para un método inexistente",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/metodos-venta/9999');\nassert.strictEqual(res.status, 404);",
              "err": {},
              "uuid": "ec5c3145-da1e-4922-84e2-3c71d3ef1fff",
              "parentUUID": "c362d529-0a4d-4586-bad7-cfc0d78b6743",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "2fa241da-0cb4-4da3-88c2-1025ee80e6d3",
            "a68c6eec-ddb5-4de3-a832-1b5892e1bf1a",
            "1ea3be5d-6ade-406f-b720-45c3746c997d",
            "e2011856-3daf-4434-9555-11ca603107be",
            "0a035b97-2db2-47b5-98e6-15bb6d19ac5b",
            "8a1884ca-bd5f-4e29-bdd7-4cf4e707f005",
            "ec5c3145-da1e-4922-84e2-3c71d3ef1fff"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2de9573d-d07a-42ac-8eab-2a4017b5dc6f",
          "title": "PedidoDetalles API Endpoints",
          "fullFile": "C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\test\\pedidoDetalles.test.js",
          "file": "\\test\\pedidoDetalles.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"GET /api/pedido-detalles debe retornar todos los detalles de pedidos\"",
              "fullTitle": "PedidoDetalles API Endpoints \"before all\" hook for \"GET /api/pedido-detalles debe retornar todos los detalles de pedidos\"",
              "timedOut": false,
              "duration": 73,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Reiniciar tablas relacionadas y configurar datos iniciales\nawait db.query('TRUNCATE TABLE PedidoDetalles RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Pedidos RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Productos RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Categorias RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE MetodoVenta RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE tipoPago RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Proveedores RESTART IDENTITY CASCADE');\n// Insertar categorías\nawait db.query(`\n    INSERT INTO Categorias (nombre, descripcion)\n    VALUES \n        ('Electrónicos', 'Productos electrónicos de consumo'),\n        ('Papelería', 'Productos de papelería y oficina');\n`);\n// Insertar productos\nawait db.query(`\n    INSERT INTO Productos (nombre, descripcion, precio, stock, idCategoria)\n    VALUES \n        ('Smartphone', 'Teléfono inteligente de última generación', 899.99, 50, 1),\n        ('Lápiz', 'Lápiz de grafito HB', 0.99, 1000, 2);\n`);\n// Insertar tipos de pago y métodos de venta\nawait db.query(`\n    INSERT INTO tipoPago (descripcion, fecha_creacion, activo) \n    VALUES ('Efectivo', NOW(), TRUE), ('Tarjeta de crédito', NOW(), TRUE);\n`);\nawait db.query(`\n    INSERT INTO MetodoVenta (idTipoPago, descripcion, comision, fecha_creacion, activo)\n    VALUES \n        (1, 'Efectivo', 0.00, NOW(), TRUE), \n        (2, 'Tarjeta de crédito', 0.05, NOW(), TRUE);\n`);\n// Insertar proveedores y pedidos\nawait db.query(`\n    INSERT INTO Proveedores (nombre, direccion, rfc, telefono)\n    VALUES ('Proveedor XYZ', 'Calle Principal 123', 'RFC123456789', '5551234561');\n`);\nawait db.query(`\n    INSERT INTO Pedidos (total, estado, fechaPedido, idMetodoV, idProveedor)\n    VALUES \n        (1200.50, 'Pendiente', NOW(), 1, 1);\n`);\n// Insertar detalle de pedido inicial\nawait db.query(`\n    INSERT INTO PedidoDetalles (idPedido, idProducto, cantidad, subtotal, iva)\n    VALUES (1, 1, 5, 500.00, 80.00);\n`);",
              "err": {
                "message": "error: la autentificaci�n password fall� para el usuario �postgres�",
                "estack": "error: la autentificaci�n password fall� para el usuario �postgres�\n    at C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test\\pedidoDetalles.test.js:11:9)",
                "diff": null
              },
              "uuid": "649269b0-dbc0-4aaf-bb63-bc834967f68a",
              "parentUUID": "2de9573d-d07a-42ac-8eab-2a4017b5dc6f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook for \"GET /api/pedido-detalles/:idPedido/:idProducto debe retornar 404 para un detalle inexistente\"",
              "fullTitle": "PedidoDetalles API Endpoints \"after all\" hook for \"GET /api/pedido-detalles/:idPedido/:idProducto debe retornar 404 para un detalle inexistente\"",
              "timedOut": false,
              "duration": 179,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await db.query('TRUNCATE TABLE PedidoDetalles RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Pedidos RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Productos RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE MetodoVenta RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE tipoPago RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Proveedores RESTART IDENTITY CASCADE');",
              "err": {
                "message": "error: la autentificaci�n password fall� para el usuario �postgres�",
                "estack": "error: la autentificaci�n password fall� para el usuario �postgres�\n    at C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test\\pedidoDetalles.test.js:68:9)",
                "diff": null
              },
              "uuid": "52274084-84b0-4ff4-9fc1-b796f7fcaaa5",
              "parentUUID": "2de9573d-d07a-42ac-8eab-2a4017b5dc6f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /api/pedido-detalles debe retornar todos los detalles de pedidos",
              "fullTitle": "PedidoDetalles API Endpoints GET /api/pedido-detalles debe retornar todos los detalles de pedidos",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/pedido-detalles');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(Array.isArray(res.body), true);\nassert.strictEqual(res.body.length, 1);",
              "err": {},
              "uuid": "946f10c1-eed3-4bdc-a528-efe8cb3eaeab",
              "parentUUID": "2de9573d-d07a-42ac-8eab-2a4017b5dc6f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/pedido-detalles/:idPedido/:idProducto debe retornar un detalle de pedido por ID",
              "fullTitle": "PedidoDetalles API Endpoints GET /api/pedido-detalles/:idPedido/:idProducto debe retornar un detalle de pedido por ID",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/pedido-detalles/1/1');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(res.body.cantidad, 5);",
              "err": {},
              "uuid": "0c321e03-86bb-4dfc-83a1-de0d20bc7288",
              "parentUUID": "2de9573d-d07a-42ac-8eab-2a4017b5dc6f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "POST /api/pedido-detalles debe crear un nuevo detalle de pedido",
              "fullTitle": "PedidoDetalles API Endpoints POST /api/pedido-detalles debe crear un nuevo detalle de pedido",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newDetalle = {\n    idPedido: 1,\n    idProducto: 2,\n    cantidad: 10,\n};\nconst res = await request(app).post('/api/pedido-detalles').send(newDetalle);\nassert.strictEqual(res.status, 201);\nassert.strictEqual(res.body.cantidad, 10);",
              "err": {},
              "uuid": "e2770bdf-aff9-4bcc-9149-91ee0a96293d",
              "parentUUID": "2de9573d-d07a-42ac-8eab-2a4017b5dc6f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "POST /api/pedido-detalles debe fallar si el stock es insuficiente",
              "fullTitle": "PedidoDetalles API Endpoints POST /api/pedido-detalles debe fallar si el stock es insuficiente",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidDetalle = {\n    idPedido: 1,\n    idProducto: 2,\n    cantidad: 2000, // Mayor que el stock\n};\nconst res = await request(app).post('/api/pedido-detalles').send(invalidDetalle);\nassert.strictEqual(res.status, 400);",
              "err": {},
              "uuid": "943193cc-124e-4a3e-9333-983a3a7caf4b",
              "parentUUID": "2de9573d-d07a-42ac-8eab-2a4017b5dc6f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "POST /api/pedido-detalles debe fallar si el detalle ya existe",
              "fullTitle": "PedidoDetalles API Endpoints POST /api/pedido-detalles debe fallar si el detalle ya existe",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const duplicateDetalle = {\n    idPedido: 1,\n    idProducto: 1,\n    cantidad: 5,\n};\nconst res = await request(app).post('/api/pedido-detalles').send(duplicateDetalle);\nassert.strictEqual(res.status, 400);",
              "err": {},
              "uuid": "7f3d8332-28be-45de-8adc-f516da9e5475",
              "parentUUID": "2de9573d-d07a-42ac-8eab-2a4017b5dc6f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "PUT /api/pedido-detalles/:idPedido/:idProducto debe actualizar un detalle de pedido",
              "fullTitle": "PedidoDetalles API Endpoints PUT /api/pedido-detalles/:idPedido/:idProducto debe actualizar un detalle de pedido",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedDetalle = { cantidad: 15 };\nconst res = await request(app).put('/api/pedido-detalles/1/1').send(updatedDetalle);\nassert.strictEqual(res.status, 200);\nassert.strictEqual(res.body.cantidad, 15);",
              "err": {},
              "uuid": "8b63d5a5-79a1-4c7b-a969-7df9c29391c4",
              "parentUUID": "2de9573d-d07a-42ac-8eab-2a4017b5dc6f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "DELETE /api/pedido-detalles/:idPedido/:idProducto debe eliminar un detalle de pedido",
              "fullTitle": "PedidoDetalles API Endpoints DELETE /api/pedido-detalles/:idPedido/:idProducto debe eliminar un detalle de pedido",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/pedido-detalles/1/1');\nassert.strictEqual(res.status, 204);\n// Verificar que fue eliminado\nconst getRes = await request(app).get('/api/pedido-detalles/1/1');\nassert.strictEqual(getRes.status, 404);",
              "err": {},
              "uuid": "c591137a-37e8-4425-8e6f-a70f3787f1d7",
              "parentUUID": "2de9573d-d07a-42ac-8eab-2a4017b5dc6f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/pedido-detalles/:idPedido/:idProducto debe retornar 404 para un detalle inexistente",
              "fullTitle": "PedidoDetalles API Endpoints GET /api/pedido-detalles/:idPedido/:idProducto debe retornar 404 para un detalle inexistente",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/pedido-detalles/9999/9999');\nassert.strictEqual(res.status, 404);",
              "err": {},
              "uuid": "01e2b11b-dce2-4e52-8970-ebbc5f2f6ea2",
              "parentUUID": "2de9573d-d07a-42ac-8eab-2a4017b5dc6f",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "946f10c1-eed3-4bdc-a528-efe8cb3eaeab",
            "0c321e03-86bb-4dfc-83a1-de0d20bc7288",
            "e2770bdf-aff9-4bcc-9149-91ee0a96293d",
            "943193cc-124e-4a3e-9333-983a3a7caf4b",
            "7f3d8332-28be-45de-8adc-f516da9e5475",
            "8b63d5a5-79a1-4c7b-a969-7df9c29391c4",
            "c591137a-37e8-4425-8e6f-a70f3787f1d7",
            "01e2b11b-dce2-4e52-8970-ebbc5f2f6ea2"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9f5188a5-ddff-4714-adb1-2b0edd1559d7",
          "title": "Pedidos API Endpoints",
          "fullFile": "C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\test\\pedidos.test.js",
          "file": "\\test\\pedidos.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"GET /api/pedidos debe retornar todos los pedidos\"",
              "fullTitle": "Pedidos API Endpoints \"before all\" hook for \"GET /api/pedidos debe retornar todos los pedidos\"",
              "timedOut": false,
              "duration": 71,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Reiniciar tablas relacionadas y configurar datos iniciales\nawait db.query('TRUNCATE TABLE Pedidos RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Proveedores RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE MetodoVenta RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE tipoPago RESTART IDENTITY CASCADE');\n// Insertar tipos de pago\nawait db.query(`\n    INSERT INTO tipoPago (descripcion, fecha_creacion, activo) \n    VALUES ('Efectivo', NOW(), TRUE), ('Tarjeta de crédito', NOW(), TRUE);\n`);\n// Insertar métodos de venta\nawait db.query(`\n    INSERT INTO MetodoVenta (idTipoPago, descripcion, comision, fecha_creacion, activo)\n    VALUES \n        (1, 'Efectivo', 0.00, NOW(), TRUE), \n        (2, 'Tarjeta de crédito', 0.05, NOW(), TRUE);\n`);\n// Insertar proveedores\nawait db.query(`\n    INSERT INTO Proveedores (nombre, direccion, rfc, telefono)\n    VALUES \n        ('Proveedor XYZ', 'Calle Principal 123', 'RFC123456789', '5551234561'),\n        ('Proveedor ABC', 'Calle Secundaria 456', 'RFC987654321', '5551234562');\n`);\n// Insertar pedidos\nawait db.query(`\n    INSERT INTO Pedidos (total, estado, fechaPedido, idMetodoV, idProveedor)\n    VALUES \n        (1200.50, 'Pendiente', NOW(), 1, 1),\n        (850.75, 'Completado', NOW(), 2, 2);\n`);",
              "err": {
                "message": "error: la autentificaci�n password fall� para el usuario �postgres�",
                "estack": "error: la autentificaci�n password fall� para el usuario �postgres�\n    at C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test\\pedidos.test.js:11:9)",
                "diff": null
              },
              "uuid": "5339ecff-e2a9-4723-9530-c94213fe571f",
              "parentUUID": "9f5188a5-ddff-4714-adb1-2b0edd1559d7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook for \"GET /api/pedidos/:id debe retornar 404 para un pedido inexistente\"",
              "fullTitle": "Pedidos API Endpoints \"after all\" hook for \"GET /api/pedidos/:id debe retornar 404 para un pedido inexistente\"",
              "timedOut": false,
              "duration": 67,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await db.query('TRUNCATE TABLE Pedidos RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Proveedores RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE MetodoVenta RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE tipoPago RESTART IDENTITY CASCADE');",
              "err": {
                "message": "error: la autentificaci�n password fall� para el usuario �postgres�",
                "estack": "error: la autentificaci�n password fall� para el usuario �postgres�\n    at C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test\\pedidos.test.js:48:9)",
                "diff": null
              },
              "uuid": "26732864-633e-4607-9c35-fc25c603ae6b",
              "parentUUID": "9f5188a5-ddff-4714-adb1-2b0edd1559d7",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /api/pedidos debe retornar todos los pedidos",
              "fullTitle": "Pedidos API Endpoints GET /api/pedidos debe retornar todos los pedidos",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/pedidos');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(Array.isArray(res.body), true);\nassert.strictEqual(res.body.length, 2);\nassert.strictEqual(res.body[0].estado, 'Pendiente');",
              "err": {},
              "uuid": "c9621511-e0a8-4bd1-9957-84ba9e90caa1",
              "parentUUID": "9f5188a5-ddff-4714-adb1-2b0edd1559d7",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/pedidos/:id debe retornar un pedido por ID",
              "fullTitle": "Pedidos API Endpoints GET /api/pedidos/:id debe retornar un pedido por ID",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/pedidos/1');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(res.body.estado, 'Pendiente');",
              "err": {},
              "uuid": "d2a5ab5b-eb1b-4e72-839b-e5374a815fd3",
              "parentUUID": "9f5188a5-ddff-4714-adb1-2b0edd1559d7",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "POST /api/pedidos debe crear un nuevo pedido",
              "fullTitle": "Pedidos API Endpoints POST /api/pedidos debe crear un nuevo pedido",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newPedido = {\n    total: 500.00,\n    estado: 'Pendiente',\n    idMetodoV: 1,\n    idProveedor: 1,\n};\nconst res = await request(app).post('/api/pedidos').send(newPedido);\nassert.strictEqual(res.status, 201);\nassert.strictEqual(res.body.estado, 'Pendiente');",
              "err": {},
              "uuid": "7bdebcab-0bb6-40ff-8ab0-cc78dd9f9b77",
              "parentUUID": "9f5188a5-ddff-4714-adb1-2b0edd1559d7",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "POST /api/pedidos debe fallar con datos inválidos",
              "fullTitle": "Pedidos API Endpoints POST /api/pedidos debe fallar con datos inválidos",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidPedido = {\n    total: -100, // Total inválido\n    estado: '', // Estado vacío\n    idMetodoV: 999, // Método de venta inexistente\n    idProveedor: 999, // Proveedor inexistente\n};\nconst res = await request(app).post('/api/pedidos').send(invalidPedido);\nassert.strictEqual(res.status, 400);",
              "err": {},
              "uuid": "4397d3a9-066f-4591-ae2f-94cd0846c14b",
              "parentUUID": "9f5188a5-ddff-4714-adb1-2b0edd1559d7",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "PUT /api/pedidos/:id debe actualizar un pedido",
              "fullTitle": "Pedidos API Endpoints PUT /api/pedidos/:id debe actualizar un pedido",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedPedido = {\n    total: 1300.00,\n    estado: 'Completado',\n    idMetodoV: 2,\n    idProveedor: 2,\n};\nconst res = await request(app).put('/api/pedidos/1').send(updatedPedido);\nassert.strictEqual(res.status, 200);\nassert.strictEqual(res.body.estado, 'Completado');",
              "err": {},
              "uuid": "df10aa29-1392-449e-a405-039067f6c2f0",
              "parentUUID": "9f5188a5-ddff-4714-adb1-2b0edd1559d7",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "DELETE /api/pedidos/:id debe eliminar un pedido",
              "fullTitle": "Pedidos API Endpoints DELETE /api/pedidos/:id debe eliminar un pedido",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/pedidos/1');\nassert.strictEqual(res.status, 204);\n// Verificar que el pedido fue eliminado\nconst getRes = await request(app).get('/api/pedidos/1');\nassert.strictEqual(getRes.status, 404);",
              "err": {},
              "uuid": "fd5eaaac-9254-4d27-8920-602bf47bc0c6",
              "parentUUID": "9f5188a5-ddff-4714-adb1-2b0edd1559d7",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/pedidos/:id debe retornar 404 para un pedido inexistente",
              "fullTitle": "Pedidos API Endpoints GET /api/pedidos/:id debe retornar 404 para un pedido inexistente",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/pedidos/9999');\nassert.strictEqual(res.status, 404);",
              "err": {},
              "uuid": "802a3150-7fe9-4fc6-96e9-3d7ec0128968",
              "parentUUID": "9f5188a5-ddff-4714-adb1-2b0edd1559d7",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "c9621511-e0a8-4bd1-9957-84ba9e90caa1",
            "d2a5ab5b-eb1b-4e72-839b-e5374a815fd3",
            "7bdebcab-0bb6-40ff-8ab0-cc78dd9f9b77",
            "4397d3a9-066f-4591-ae2f-94cd0846c14b",
            "df10aa29-1392-449e-a405-039067f6c2f0",
            "fd5eaaac-9254-4d27-8920-602bf47bc0c6",
            "802a3150-7fe9-4fc6-96e9-3d7ec0128968"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ec44c2b7-cf05-4174-add1-0562e6dd5811",
          "title": "Productos API Endpoints",
          "fullFile": "C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\test\\productos.test.js",
          "file": "\\test\\productos.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"GET /api/productos debe retornar todos los productos\"",
              "fullTitle": "Productos API Endpoints \"before all\" hook for \"GET /api/productos debe retornar todos los productos\"",
              "timedOut": false,
              "duration": 60,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Reset tables and set up initial data\nawait db.query('TRUNCATE TABLE Productos RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Categorias RESTART IDENTITY CASCADE');\n// Insert categories\nawait db.query(`\n    INSERT INTO Categorias (nombre, descripcion)\n    VALUES \n        ('Electrónicos', 'Productos electrónicos de consumo'),\n        ('Papelería', 'Productos de papelería y oficina');\n`);\n// Insert initial products\nawait db.query(`\n    INSERT INTO Productos (nombre, descripcion, precio, stock, idcategoria)\n    VALUES \n        ('Smartphone', 'Teléfono inteligente de última generación', 899.99, 50, 1),\n        ('Lápiz', 'Lápiz de grafito HB', 0.99, 1000, 2);\n`);",
              "err": {
                "message": "error: la autentificaci�n password fall� para el usuario �postgres�",
                "estack": "error: la autentificaci�n password fall� para el usuario �postgres�\n    at C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test\\productos.test.js:11:9)",
                "diff": null
              },
              "uuid": "7047f0a8-3259-48ab-80cc-b1462172e3a7",
              "parentUUID": "ec44c2b7-cf05-4174-add1-0562e6dd5811",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook for \"DELETE /api/productos/:id debe retornar 404 para un producto inexistente\"",
              "fullTitle": "Productos API Endpoints \"after all\" hook for \"DELETE /api/productos/:id debe retornar 404 para un producto inexistente\"",
              "timedOut": false,
              "duration": 55,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await db.query('TRUNCATE TABLE Productos RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Categorias RESTART IDENTITY CASCADE');",
              "err": {
                "message": "error: la autentificaci�n password fall� para el usuario �postgres�",
                "estack": "error: la autentificaci�n password fall� para el usuario �postgres�\n    at C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test\\productos.test.js:32:9)",
                "diff": null
              },
              "uuid": "3b5334b4-892f-4aac-b06f-61201c768700",
              "parentUUID": "ec44c2b7-cf05-4174-add1-0562e6dd5811",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /api/productos debe retornar todos los productos",
              "fullTitle": "Productos API Endpoints GET /api/productos debe retornar todos los productos",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/productos');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(Array.isArray(res.body), true);\nassert.strictEqual(res.body.length, 2);\nassert.strictEqual(res.body[0].nombre, 'Smartphone');",
              "err": {},
              "uuid": "eeafade2-25b9-44df-a20a-423d665f7123",
              "parentUUID": "ec44c2b7-cf05-4174-add1-0562e6dd5811",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/productos/:id debe retornar un producto por ID",
              "fullTitle": "Productos API Endpoints GET /api/productos/:id debe retornar un producto por ID",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/productos/1');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(res.body.nombre, 'Smartphone');",
              "err": {},
              "uuid": "39eff650-efc0-468c-93c0-6218671f55f3",
              "parentUUID": "ec44c2b7-cf05-4174-add1-0562e6dd5811",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/productos/:id debe retornar 404 para un producto inexistente",
              "fullTitle": "Productos API Endpoints GET /api/productos/:id debe retornar 404 para un producto inexistente",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/productos/9999');\nassert.strictEqual(res.status, 404);",
              "err": {},
              "uuid": "ecafe922-3ef2-4fbe-8d81-78f680e2c816",
              "parentUUID": "ec44c2b7-cf05-4174-add1-0562e6dd5811",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "POST /api/productos debe crear un nuevo producto",
              "fullTitle": "Productos API Endpoints POST /api/productos debe crear un nuevo producto",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newProducto = {\n    nombre: 'Tablet',\n    descripcion: 'Tablet de última generación',\n    precio: 499.99,\n    stock: 30,\n    idcategoria: 1,\n};\nconst res = await request(app).post('/api/productos').send(newProducto);\nassert.strictEqual(res.status, 201);\nassert.strictEqual(res.body.nombre, 'Tablet');",
              "err": {},
              "uuid": "cf7c0f7b-6bac-4f1a-b1f6-231ba90cfa52",
              "parentUUID": "ec44c2b7-cf05-4174-add1-0562e6dd5811",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "POST /api/productos debe fallar con datos inválidos",
              "fullTitle": "Productos API Endpoints POST /api/productos debe fallar con datos inválidos",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidProducto = {\n    nombre: '', // Nombre vacío\n    descripcion: 'Producto inválido',\n    precio: -100, // Precio negativo\n    stock: -10, // Stock negativo\n    idcategoria: 9999, // Categoría inexistente\n};\nconst res = await request(app).post('/api/productos').send(invalidProducto);\nassert.strictEqual(res.status, 400);",
              "err": {},
              "uuid": "20c70e63-bab5-4bb7-9a9d-2f25af09870d",
              "parentUUID": "ec44c2b7-cf05-4174-add1-0562e6dd5811",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "PUT /api/productos/:id debe actualizar un producto existente",
              "fullTitle": "Productos API Endpoints PUT /api/productos/:id debe actualizar un producto existente",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedProducto = {\n    nombre: 'Smartphone Pro',\n    descripcion: 'Teléfono inteligente avanzado',\n    precio: 999.99,\n    stock: 60,\n    idcategoria: 1,\n};\nconst res = await request(app).put('/api/productos/1').send(updatedProducto);\nassert.strictEqual(res.status, 200);\nassert.strictEqual(res.body.nombre, 'Smartphone Pro');",
              "err": {},
              "uuid": "6a7af463-9df0-48b9-941c-44558210b3b2",
              "parentUUID": "ec44c2b7-cf05-4174-add1-0562e6dd5811",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "PUT /api/productos/:id debe retornar 404 para un producto inexistente",
              "fullTitle": "Productos API Endpoints PUT /api/productos/:id debe retornar 404 para un producto inexistente",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedProducto = {\n    nombre: 'Producto Fantasma',\n    descripcion: 'Descripción fantasma',\n    precio: 100,\n    stock: 10,\n    idcategoria: 1,\n};\nconst res = await request(app).put('/api/productos/9999').send(updatedProducto);\nassert.strictEqual(res.status, 404);",
              "err": {},
              "uuid": "3e27f88f-3563-4696-81e5-e00a42ba2a72",
              "parentUUID": "ec44c2b7-cf05-4174-add1-0562e6dd5811",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "DELETE /api/productos/:id debe eliminar un producto existente",
              "fullTitle": "Productos API Endpoints DELETE /api/productos/:id debe eliminar un producto existente",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/productos/1');\nassert.strictEqual(res.status, 204);\n// Verify it was deleted\nconst getRes = await request(app).get('/api/productos/1');\nassert.strictEqual(getRes.status, 404);",
              "err": {},
              "uuid": "670ea231-8463-439f-b1ee-046e830c6aad",
              "parentUUID": "ec44c2b7-cf05-4174-add1-0562e6dd5811",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "DELETE /api/productos/:id debe retornar 404 para un producto inexistente",
              "fullTitle": "Productos API Endpoints DELETE /api/productos/:id debe retornar 404 para un producto inexistente",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/productos/9999');\nassert.strictEqual(res.status, 404);",
              "err": {},
              "uuid": "09e2f7aa-8d43-40d8-8642-ebe337d42c37",
              "parentUUID": "ec44c2b7-cf05-4174-add1-0562e6dd5811",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "eeafade2-25b9-44df-a20a-423d665f7123",
            "39eff650-efc0-468c-93c0-6218671f55f3",
            "ecafe922-3ef2-4fbe-8d81-78f680e2c816",
            "cf7c0f7b-6bac-4f1a-b1f6-231ba90cfa52",
            "20c70e63-bab5-4bb7-9a9d-2f25af09870d",
            "6a7af463-9df0-48b9-941c-44558210b3b2",
            "3e27f88f-3563-4696-81e5-e00a42ba2a72",
            "670ea231-8463-439f-b1ee-046e830c6aad",
            "09e2f7aa-8d43-40d8-8642-ebe337d42c37"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1fd22886-61e3-4ea0-89c2-e1be761526ba",
          "title": "Proveedores API Endpoints",
          "fullFile": "C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\test\\proveedores.test.js",
          "file": "\\test\\proveedores.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"GET /api/proveedores debe retornar todos los proveedores\"",
              "fullTitle": "Proveedores API Endpoints \"before all\" hook for \"GET /api/proveedores debe retornar todos los proveedores\"",
              "timedOut": false,
              "duration": 56,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await db.query('TRUNCATE TABLE Proveedores RESTART IDENTITY CASCADE');\n// Insertar datos iniciales válidos\nawait db.query(`\n  INSERT INTO Proveedores (nombre, direccion, rfc, telefono)\n  VALUES \n    ('Proveedor XYZ', 'Calle Principal 123, Ciudad', 'RFC123456789A', '5551234561'),\n    ('Proveedor ABC', 'Calle Secundaria 456, Ciudad', 'RFC987654321B', '5551234562');\n`);",
              "err": {
                "message": "error: la autentificaci�n password fall� para el usuario �postgres�",
                "estack": "error: la autentificaci�n password fall� para el usuario �postgres�\n    at C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test\\proveedores.test.js:10:5)",
                "diff": null
              },
              "uuid": "fe265d61-46cf-46c3-ac20-c90a480ed82e",
              "parentUUID": "1fd22886-61e3-4ea0-89c2-e1be761526ba",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook for \"DELETE /api/proveedores/:id debe eliminar un proveedor existente\"",
              "fullTitle": "Proveedores API Endpoints \"after all\" hook for \"DELETE /api/proveedores/:id debe eliminar un proveedor existente\"",
              "timedOut": false,
              "duration": 54,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await db.query('TRUNCATE TABLE Proveedores RESTART IDENTITY CASCADE');",
              "err": {
                "message": "error: la autentificaci�n password fall� para el usuario �postgres�",
                "estack": "error: la autentificaci�n password fall� para el usuario �postgres�\n    at C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test\\proveedores.test.js:22:5)",
                "diff": null
              },
              "uuid": "8ce416a0-7f7d-4a4d-bd0e-7fffc8cc5668",
              "parentUUID": "1fd22886-61e3-4ea0-89c2-e1be761526ba",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /api/proveedores debe retornar todos los proveedores",
              "fullTitle": "Proveedores API Endpoints GET /api/proveedores debe retornar todos los proveedores",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/proveedores');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(Array.isArray(res.body), true);\nassert.strictEqual(res.body.length, 2);",
              "err": {},
              "uuid": "ea5499a3-6eb0-42c1-822a-6d67f22c0e29",
              "parentUUID": "1fd22886-61e3-4ea0-89c2-e1be761526ba",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/proveedores/:id debe retornar un proveedor por ID",
              "fullTitle": "Proveedores API Endpoints GET /api/proveedores/:id debe retornar un proveedor por ID",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/proveedores/1');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(res.body.nombre, 'Proveedor XYZ');",
              "err": {},
              "uuid": "24cfd7a1-deb4-4d5f-9ac5-0a55dd439204",
              "parentUUID": "1fd22886-61e3-4ea0-89c2-e1be761526ba",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "POST /api/proveedores debe crear un nuevo proveedor",
              "fullTitle": "Proveedores API Endpoints POST /api/proveedores debe crear un nuevo proveedor",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newProveedor = {\n  nombre: 'Proveedor DEF',\n  direccion: 'Calle Tercera 789',\n  rfc: 'RFC112233445C',\n  telefono: '5551234563',\n};\nconst res = await request(app).post('/api/proveedores').send(newProveedor);\nassert.strictEqual(res.status, 201);\nassert.strictEqual(res.body.nombre, 'Proveedor DEF');",
              "err": {},
              "uuid": "74d26d1b-5b79-45a0-8f71-7c7858f4d8e3",
              "parentUUID": "1fd22886-61e3-4ea0-89c2-e1be761526ba",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "POST /api/proveedores debe fallar con datos inválidos",
              "fullTitle": "Proveedores API Endpoints POST /api/proveedores debe fallar con datos inválidos",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidProveedor = {\n  nombre: '',\n  direccion: 'Dirección sin nombre',\n  rfc: '123', // RFC inválido\n  telefono: '123456', // Teléfono inválido\n};\nconst res = await request(app).post('/api/proveedores').send(invalidProveedor);\nassert.strictEqual(res.status, 400);",
              "err": {},
              "uuid": "e202d2a5-3665-46ea-93c7-a03aea21ce02",
              "parentUUID": "1fd22886-61e3-4ea0-89c2-e1be761526ba",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "PUT /api/proveedores/:id debe actualizar un proveedor existente",
              "fullTitle": "Proveedores API Endpoints PUT /api/proveedores/:id debe actualizar un proveedor existente",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedProveedor = {\n  nombre: 'Proveedor XYZ Modificado',\n  direccion: 'Nueva dirección',\n  rfc: 'RFC0987654321',\n  telefono: '5559876543',\n};\nconst res = await request(app).put('/api/proveedores/1').send(updatedProveedor);\nassert.strictEqual(res.status, 200);\nassert.strictEqual(res.body.nombre, 'Proveedor XYZ Modificado');",
              "err": {},
              "uuid": "7f687207-0929-4962-ad9d-3283b74747d2",
              "parentUUID": "1fd22886-61e3-4ea0-89c2-e1be761526ba",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "DELETE /api/proveedores/:id debe eliminar un proveedor existente",
              "fullTitle": "Proveedores API Endpoints DELETE /api/proveedores/:id debe eliminar un proveedor existente",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/proveedores/1');\nassert.strictEqual(res.status, 204);\n// Verificar que fue eliminado\nconst getRes = await request(app).get('/api/proveedores/1');\nassert.strictEqual(getRes.status, 404);",
              "err": {},
              "uuid": "e89e3409-c023-4576-a3f3-f9e611bfc35d",
              "parentUUID": "1fd22886-61e3-4ea0-89c2-e1be761526ba",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "ea5499a3-6eb0-42c1-822a-6d67f22c0e29",
            "24cfd7a1-deb4-4d5f-9ac5-0a55dd439204",
            "74d26d1b-5b79-45a0-8f71-7c7858f4d8e3",
            "e202d2a5-3665-46ea-93c7-a03aea21ce02",
            "7f687207-0929-4962-ad9d-3283b74747d2",
            "e89e3409-c023-4576-a3f3-f9e611bfc35d"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6e596b23-d375-4df1-bebc-6df1d55fc3e3",
          "title": "Roles API Endpoints",
          "fullFile": "C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\test\\roles.test.js",
          "file": "\\test\\roles.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"GET /api/roles debe retornar todos los roles\"",
              "fullTitle": "Roles API Endpoints \"before all\" hook for \"GET /api/roles debe retornar todos los roles\"",
              "timedOut": false,
              "duration": 57,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Reiniciar tabla de roles\nawait db.query('TRUNCATE TABLE Roles RESTART IDENTITY CASCADE');\n// Insertar datos iniciales desde la base de datos proporcionada\nawait db.query(`\n  INSERT INTO Roles (tipo) \n  VALUES \n  ('Administrador'), \n  ('Vendedor'), \n  ('Cliente'), \n  ('Gerente'), \n  ('Soporte Técnico');\n`);",
              "err": {
                "message": "error: la autentificaci�n password fall� para el usuario �postgres�",
                "estack": "error: la autentificaci�n password fall� para el usuario �postgres�\n    at C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test\\roles.test.js:11:5)",
                "diff": null
              },
              "uuid": "46cb217e-09ef-4710-8168-5d45448b149b",
              "parentUUID": "6e596b23-d375-4df1-bebc-6df1d55fc3e3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook for \"GET /api/roles/:id debe retornar 404 para un rol inexistente\"",
              "fullTitle": "Roles API Endpoints \"after all\" hook for \"GET /api/roles/:id debe retornar 404 para un rol inexistente\"",
              "timedOut": false,
              "duration": 55,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Limpieza después de las pruebas\nawait db.query('TRUNCATE TABLE Roles RESTART IDENTITY CASCADE');",
              "err": {
                "message": "error: la autentificaci�n password fall� para el usuario �postgres�",
                "estack": "error: la autentificaci�n password fall� para el usuario �postgres�\n    at C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test\\roles.test.js:27:5)",
                "diff": null
              },
              "uuid": "e9ac572f-b4e9-49c3-bde2-39009c959f4d",
              "parentUUID": "6e596b23-d375-4df1-bebc-6df1d55fc3e3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /api/roles debe retornar todos los roles",
              "fullTitle": "Roles API Endpoints GET /api/roles debe retornar todos los roles",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/roles');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(Array.isArray(res.body), true);\nassert.strictEqual(res.body.length, 5); // Verifica que hay 5 roles en la base de datos",
              "err": {},
              "uuid": "ec9cdec2-afd7-4831-afe7-308bcb11d59e",
              "parentUUID": "6e596b23-d375-4df1-bebc-6df1d55fc3e3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/roles/:id debe retornar un rol por ID",
              "fullTitle": "Roles API Endpoints GET /api/roles/:id debe retornar un rol por ID",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/roles/1'); // Rol con id 1 debería ser 'Administrador'\nassert.strictEqual(res.status, 200);\nassert.strictEqual(res.body.tipo, 'Administrador');",
              "err": {},
              "uuid": "ca07989c-ce94-4d33-8414-507b9e2f73ba",
              "parentUUID": "6e596b23-d375-4df1-bebc-6df1d55fc3e3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "POST /api/roles debe crear un nuevo rol",
              "fullTitle": "Roles API Endpoints POST /api/roles debe crear un nuevo rol",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newRol = { tipo: 'Moderador' };\nconst res = await request(app).post('/api/roles').send(newRol);\nassert.strictEqual(res.status, 201);\nassert.strictEqual(res.body.tipo, 'Moderador');",
              "err": {},
              "uuid": "d22ec8ca-0510-44e7-814c-7a3a36397018",
              "parentUUID": "6e596b23-d375-4df1-bebc-6df1d55fc3e3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "POST /api/roles debe fallar si falta el campo tipo",
              "fullTitle": "Roles API Endpoints POST /api/roles debe fallar si falta el campo tipo",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidRol = {}; // Aquí falta el campo \"tipo\"\nconst res = await request(app).post('/api/roles').send(invalidRol);\nassert.strictEqual(res.status, 400); // Espera un error 400\nassert.strictEqual(res.body.message, 'El campo \"tipo\" es obligatorio.'); // Verifica el mensaje de error",
              "err": {},
              "uuid": "d548cf5f-d78f-4ec6-af6f-a06f709ddffb",
              "parentUUID": "6e596b23-d375-4df1-bebc-6df1d55fc3e3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "PUT /api/roles/:id debe actualizar un rol",
              "fullTitle": "Roles API Endpoints PUT /api/roles/:id debe actualizar un rol",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedRol = { tipo: 'SuperAdmin' };\nconst res = await request(app).put('/api/roles/1').send(updatedRol); // Actualizar rol 'Administrador'\nassert.strictEqual(res.status, 200);\nassert.strictEqual(res.body.tipo, 'SuperAdmin');",
              "err": {},
              "uuid": "61a24624-bb84-40c9-9248-33f77f5f64e8",
              "parentUUID": "6e596b23-d375-4df1-bebc-6df1d55fc3e3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "DELETE /api/roles/:id debe eliminar un rol",
              "fullTitle": "Roles API Endpoints DELETE /api/roles/:id debe eliminar un rol",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/roles/1'); // Eliminar rol 'Administrador'\nassert.strictEqual(res.status, 204); // No Content\n// Verificar que el rol fue eliminado\nconst getRes = await request(app).get('/api/roles/1');\nassert.strictEqual(getRes.status, 404);",
              "err": {},
              "uuid": "f31972e2-2ffe-4833-809d-80bcd90f01b0",
              "parentUUID": "6e596b23-d375-4df1-bebc-6df1d55fc3e3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/roles/:id debe retornar 404 para un rol inexistente",
              "fullTitle": "Roles API Endpoints GET /api/roles/:id debe retornar 404 para un rol inexistente",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/roles/9999'); // ID que no existe\nassert.strictEqual(res.status, 404);",
              "err": {},
              "uuid": "47cae044-f43f-4cde-a4bf-c9bdd6a50ec7",
              "parentUUID": "6e596b23-d375-4df1-bebc-6df1d55fc3e3",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "ec9cdec2-afd7-4831-afe7-308bcb11d59e",
            "ca07989c-ce94-4d33-8414-507b9e2f73ba",
            "d22ec8ca-0510-44e7-814c-7a3a36397018",
            "d548cf5f-d78f-4ec6-af6f-a06f709ddffb",
            "61a24624-bb84-40c9-9248-33f77f5f64e8",
            "f31972e2-2ffe-4833-809d-80bcd90f01b0",
            "47cae044-f43f-4cde-a4bf-c9bdd6a50ec7"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "13fa17db-520f-408b-b100-80aec1d66ec8",
          "title": "Tipos de Pago API Endpoints",
          "fullFile": "C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\test\\tipoPago.test.js",
          "file": "\\test\\tipoPago.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"GET /api/tipos-pago debe retornar todos los tipos de pago\"",
              "fullTitle": "Tipos de Pago API Endpoints \"before all\" hook for \"GET /api/tipos-pago debe retornar todos los tipos de pago\"",
              "timedOut": false,
              "duration": 54,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Reiniciar tabla TipoPago y configurar datos iniciales\nawait db.query('TRUNCATE TABLE TipoPago RESTART IDENTITY CASCADE');\n// Insertar datos iniciales de tipos de pago\nawait db.query(`\n  INSERT INTO TipoPago (descripcion, fecha_creacion, activo)\n  VALUES \n    ('Efectivo', NOW(), TRUE),\n    ('Tarjeta de crédito', NOW(), TRUE);\n`);",
              "err": {
                "message": "error: la autentificaci�n password fall� para el usuario �postgres�",
                "estack": "error: la autentificaci�n password fall� para el usuario �postgres�\n    at C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test\\tipoPago.test.js:11:5)",
                "diff": null
              },
              "uuid": "1fdacac3-b6d8-4176-8c04-f963f8034fd3",
              "parentUUID": "13fa17db-520f-408b-b100-80aec1d66ec8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook for \"GET /api/tipos-pago/:id debe retornar 404 para un tipo de pago inexistente\"",
              "fullTitle": "Tipos de Pago API Endpoints \"after all\" hook for \"GET /api/tipos-pago/:id debe retornar 404 para un tipo de pago inexistente\"",
              "timedOut": false,
              "duration": 52,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Limpiar la tabla TipoPago después de las pruebas\nawait db.query('TRUNCATE TABLE TipoPago RESTART IDENTITY CASCADE');",
              "err": {
                "message": "error: la autentificaci�n password fall� para el usuario �postgres�",
                "estack": "error: la autentificaci�n password fall� para el usuario �postgres�\n    at C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test\\tipoPago.test.js:24:5)",
                "diff": null
              },
              "uuid": "ca66c73c-750c-4954-bded-6f3fa3f8679a",
              "parentUUID": "13fa17db-520f-408b-b100-80aec1d66ec8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /api/tipos-pago debe retornar todos los tipos de pago",
              "fullTitle": "Tipos de Pago API Endpoints GET /api/tipos-pago debe retornar todos los tipos de pago",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/tipos-pago');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(Array.isArray(res.body), true);\nassert.strictEqual(res.body.length, 2); \nassert.strictEqual(res.body[0].descripcion, 'Efectivo');\nassert.strictEqual(res.body[1].descripcion, 'Tarjeta de crédito');",
              "err": {},
              "uuid": "b853af50-d441-42bd-a82a-b851c96cf8a3",
              "parentUUID": "13fa17db-520f-408b-b100-80aec1d66ec8",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/tipos-pago/:id debe retornar un tipo de pago por ID",
              "fullTitle": "Tipos de Pago API Endpoints GET /api/tipos-pago/:id debe retornar un tipo de pago por ID",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/tipos-pago/1');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(res.body.descripcion, 'Efectivo');",
              "err": {},
              "uuid": "8029eb3f-9fee-4e62-9c8f-b95785590bbe",
              "parentUUID": "13fa17db-520f-408b-b100-80aec1d66ec8",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "POST /api/tipos-pago debe crear un nuevo tipo de pago",
              "fullTitle": "Tipos de Pago API Endpoints POST /api/tipos-pago debe crear un nuevo tipo de pago",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newTipo = {\n  descripcion: 'Transferencia bancaria',\n  activo: true,\n};\nconst res = await request(app).post('/api/tipos-pago').send(newTipo);\nassert.strictEqual(res.status, 201);\nassert.strictEqual(res.body.descripcion, 'Transferencia bancaria');\nassert.strictEqual(res.body.activo, true);",
              "err": {},
              "uuid": "b3d06f80-c66e-487a-94c4-4d7da983e3c2",
              "parentUUID": "13fa17db-520f-408b-b100-80aec1d66ec8",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "POST /api/tipos-pago debe fallar con datos inválidos",
              "fullTitle": "Tipos de Pago API Endpoints POST /api/tipos-pago debe fallar con datos inválidos",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidTipo = {\n  descripcion: '', // Descripción vacía\n  activo: 'invalid', // Valor no booleano\n};\nconst res = await request(app).post('/api/tipos-pago').send(invalidTipo);\nassert.strictEqual(res.status, 400);\nassert.ok(Array.isArray(res.body.errores));\nassert.ok(res.body.errores.length > 0);",
              "err": {},
              "uuid": "505c52b2-2b47-4d84-8510-5c323d0c6120",
              "parentUUID": "13fa17db-520f-408b-b100-80aec1d66ec8",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "PUT /api/tipos-pago/:id debe actualizar un tipo de pago existente",
              "fullTitle": "Tipos de Pago API Endpoints PUT /api/tipos-pago/:id debe actualizar un tipo de pago existente",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedTipo = {\n  descripcion: 'Efectivo Modificado',\n  activo: false,\n};\nconst res = await request(app).put('/api/tipos-pago/1').send(updatedTipo);\nassert.strictEqual(res.status, 200);\nassert.strictEqual(res.body.descripcion, 'Efectivo Modificado');\nassert.strictEqual(res.body.activo, false);",
              "err": {},
              "uuid": "adda560d-9846-49ab-a220-f2033abbadfd",
              "parentUUID": "13fa17db-520f-408b-b100-80aec1d66ec8",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "DELETE /api/tipos-pago/:id debe eliminar un tipo de pago existente",
              "fullTitle": "Tipos de Pago API Endpoints DELETE /api/tipos-pago/:id debe eliminar un tipo de pago existente",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/tipos-pago/1');\nassert.strictEqual(res.status, 204);\n// Verificar que el tipo de pago fue eliminado\nconst getRes = await request(app).get('/api/tipos-pago/1');\nassert.strictEqual(getRes.status, 404);",
              "err": {},
              "uuid": "34e21280-4653-4c3e-ba33-7aa94f48e83e",
              "parentUUID": "13fa17db-520f-408b-b100-80aec1d66ec8",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/tipos-pago/:id debe retornar 404 para un tipo de pago inexistente",
              "fullTitle": "Tipos de Pago API Endpoints GET /api/tipos-pago/:id debe retornar 404 para un tipo de pago inexistente",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/tipos-pago/9999'); // ID inexistente\nassert.strictEqual(res.status, 404);",
              "err": {},
              "uuid": "85bbb04a-cd92-4f26-8ab2-adb05f144e68",
              "parentUUID": "13fa17db-520f-408b-b100-80aec1d66ec8",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "b853af50-d441-42bd-a82a-b851c96cf8a3",
            "8029eb3f-9fee-4e62-9c8f-b95785590bbe",
            "b3d06f80-c66e-487a-94c4-4d7da983e3c2",
            "505c52b2-2b47-4d84-8510-5c323d0c6120",
            "adda560d-9846-49ab-a220-f2033abbadfd",
            "34e21280-4653-4c3e-ba33-7aa94f48e83e",
            "85bbb04a-cd92-4f26-8ab2-adb05f144e68"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "65f9c121-4b8e-4f88-97f3-c7b3818d1146",
          "title": "Usuarios API Endpoints",
          "fullFile": "C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\test\\usuarios.test.js",
          "file": "\\test\\usuarios.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"GET /api/usuarios debe retornar todos los usuarios\"",
              "fullTitle": "Usuarios API Endpoints \"before all\" hook for \"GET /api/usuarios debe retornar todos los usuarios\"",
              "timedOut": false,
              "duration": 57,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Limpiar las tablas y agregar datos iniciales\nawait db.query('TRUNCATE TABLE Usuarios RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Roles RESTART IDENTITY CASCADE');\n// Insertar roles\nawait db.query(`\n  INSERT INTO Roles (tipo)\n  VALUES ('Administrador'), ('Vendedor'), ('Cliente');\n`);\n// Insertar usuarios\nawait db.query(`\n  INSERT INTO Usuarios (nombre, correo, password, idRol)\n  VALUES \n  ('Juan Pérez', 'juan@gmail.com', '123456', 1),\n  ('Ana García', 'ana@gmail.com', 'abcdef', 2);\n`);",
              "err": {
                "message": "error: la autentificaci�n password fall� para el usuario �postgres�",
                "estack": "error: la autentificaci�n password fall� para el usuario �postgres�\n    at C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test\\usuarios.test.js:12:5)",
                "diff": null
              },
              "uuid": "ddf07446-65a2-4101-a128-5883bd724d75",
              "parentUUID": "65f9c121-4b8e-4f88-97f3-c7b3818d1146",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook for \"GET /api/usuarios/:id debe retornar 404 para un usuario inexistente\"",
              "fullTitle": "Usuarios API Endpoints \"after all\" hook for \"GET /api/usuarios/:id debe retornar 404 para un usuario inexistente\"",
              "timedOut": false,
              "duration": 53,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Limpiar las tablas después de las pruebas\nawait db.query('TRUNCATE TABLE Usuarios RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Roles RESTART IDENTITY CASCADE');",
              "err": {
                "message": "error: la autentificaci�n password fall� para el usuario �postgres�",
                "estack": "error: la autentificaci�n password fall� para el usuario �postgres�\n    at C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test\\usuarios.test.js:32:5)",
                "diff": null
              },
              "uuid": "83c49960-904e-4d64-bb87-a515f88b7bff",
              "parentUUID": "65f9c121-4b8e-4f88-97f3-c7b3818d1146",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /api/usuarios debe retornar todos los usuarios",
              "fullTitle": "Usuarios API Endpoints GET /api/usuarios debe retornar todos los usuarios",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/usuarios');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(Array.isArray(res.body), true);\nassert.strictEqual(res.body.length, 2);\nassert.strictEqual(res.body[0].nombre, 'Juan Pérez');",
              "err": {},
              "uuid": "15b6ecc2-fecb-4c9f-a7c2-5eb3afdcae8b",
              "parentUUID": "65f9c121-4b8e-4f88-97f3-c7b3818d1146",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/usuarios/:id debe retornar un usuario por ID",
              "fullTitle": "Usuarios API Endpoints GET /api/usuarios/:id debe retornar un usuario por ID",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/usuarios/1');\nassert.strictEqual(res.status, 200);\nassert.ok(res.body.hasOwnProperty('nombre'));\nassert.strictEqual(res.body.nombre, 'Juan Pérez');",
              "err": {},
              "uuid": "9b57c0fe-f639-415b-a40f-8205f867b35a",
              "parentUUID": "65f9c121-4b8e-4f88-97f3-c7b3818d1146",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "POST /api/usuarios debe crear un nuevo usuario",
              "fullTitle": "Usuarios API Endpoints POST /api/usuarios debe crear un nuevo usuario",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUsuario = {\n  nombre: 'Oscar López',\n  correo: 'oscar@gmail.com',\n  password: '12345678',\n  idRol: 3,\n};\nconst res = await request(app).post('/api/usuarios').send(newUsuario);\nassert.strictEqual(res.status, 201);\nassert.ok(res.body.hasOwnProperty('nombre'));\nassert.strictEqual(res.body.nombre, 'Oscar López');\n// Verificar que se agregó correctamente\nconst allUsuarios = await request(app).get('/api/usuarios');\nassert.strictEqual(allUsuarios.body.length, 3);",
              "err": {},
              "uuid": "1a2d2ac0-9df0-4d36-8413-8a90a5a446ef",
              "parentUUID": "65f9c121-4b8e-4f88-97f3-c7b3818d1146",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "POST /api/usuarios debe fallar con datos inválidos",
              "fullTitle": "Usuarios API Endpoints POST /api/usuarios debe fallar con datos inválidos",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidUsuario = {\n  nombre: '', // Nombre vacío\n  correo: 'oscar.com', // Correo inválido\n  password: '123', // Contraseña corta\n  idRol: 'admin', // idRol inválido\n};\nconst res = await request(app).post('/api/usuarios').send(invalidUsuario);\nassert.strictEqual(res.status, 400);\nassert.ok(Array.isArray(res.body.errores));\nassert.ok(res.body.errores.length > 0);",
              "err": {},
              "uuid": "a50ec951-adc7-409a-a25f-c16ce151199c",
              "parentUUID": "65f9c121-4b8e-4f88-97f3-c7b3818d1146",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "PUT /api/usuarios/:id debe actualizar un usuario existente",
              "fullTitle": "Usuarios API Endpoints PUT /api/usuarios/:id debe actualizar un usuario existente",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedUsuario = {\n  nombre: 'Juan Pérez Actualizado',\n  correo: 'juan.actualizado@gmail.com',\n  password: '654321',\n  idRol: 2,\n};\nconst res = await request(app).put('/api/usuarios/1').send(updatedUsuario);\nassert.strictEqual(res.status, 200);\nassert.ok(res.body.hasOwnProperty('nombre'));\nassert.strictEqual(res.body.nombre, 'Juan Pérez Actualizado');",
              "err": {},
              "uuid": "cc4f8fed-e0fd-4c69-9485-6b9415a8dcc3",
              "parentUUID": "65f9c121-4b8e-4f88-97f3-c7b3818d1146",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "PUT /api/usuarios/:id debe fallar con datos inválidos",
              "fullTitle": "Usuarios API Endpoints PUT /api/usuarios/:id debe fallar con datos inválidos",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidUsuario = {\n  nombre: 'A', // Nombre demasiado corto\n  correo: 'invalid.com', // Correo inválido\n  password: '123', // Contraseña corta\n  idRol: 'rol', // idRol inválido\n};\nconst res = await request(app).put('/api/usuarios/1').send(invalidUsuario);\nassert.strictEqual(res.status, 400);\nassert.ok(Array.isArray(res.body.errores));\nassert.ok(res.body.errores.length > 0);",
              "err": {},
              "uuid": "afac941e-9826-4804-bf53-6d2a6c86523a",
              "parentUUID": "65f9c121-4b8e-4f88-97f3-c7b3818d1146",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "DELETE /api/usuarios/:id debe eliminar un usuario existente",
              "fullTitle": "Usuarios API Endpoints DELETE /api/usuarios/:id debe eliminar un usuario existente",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/usuarios/1');\nassert.strictEqual(res.status, 204);\n// Verificar que el usuario fue eliminado\nconst getRes = await request(app).get('/api/usuarios/1');\nassert.strictEqual(getRes.status, 404);",
              "err": {},
              "uuid": "ef925e72-0945-468a-8d15-1fb2b26d964c",
              "parentUUID": "65f9c121-4b8e-4f88-97f3-c7b3818d1146",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/usuarios/:id debe retornar 404 para un usuario inexistente",
              "fullTitle": "Usuarios API Endpoints GET /api/usuarios/:id debe retornar 404 para un usuario inexistente",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/usuarios/999');\nassert.strictEqual(res.status, 404);",
              "err": {},
              "uuid": "f282e302-4092-447e-b092-6c65874d0a44",
              "parentUUID": "65f9c121-4b8e-4f88-97f3-c7b3818d1146",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "15b6ecc2-fecb-4c9f-a7c2-5eb3afdcae8b",
            "9b57c0fe-f639-415b-a40f-8205f867b35a",
            "1a2d2ac0-9df0-4d36-8413-8a90a5a446ef",
            "a50ec951-adc7-409a-a25f-c16ce151199c",
            "cc4f8fed-e0fd-4c69-9485-6b9415a8dcc3",
            "afac941e-9826-4804-bf53-6d2a6c86523a",
            "ef925e72-0945-468a-8d15-1fb2b26d964c",
            "f282e302-4092-447e-b092-6c65874d0a44"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "516302c4-8deb-4d06-a75a-dd3b229d33fe",
          "title": "Ventas API Endpoints",
          "fullFile": "C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\test\\ventas.test.js",
          "file": "\\test\\ventas.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"GET /api/ventas debe retornar todas las ventas\"",
              "fullTitle": "Ventas API Endpoints \"before all\" hook for \"GET /api/ventas debe retornar todas las ventas\"",
              "timedOut": false,
              "duration": 178,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Limpieza y reinicio de las tablas\nawait db.query('TRUNCATE TABLE Ventas RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Empleados RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Usuarios RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Roles RESTART IDENTITY CASCADE');\n// Insertar roles\nawait db.query(`\n  INSERT INTO Roles (tipo)\n  VALUES ('Administrador'), ('Vendedor');\n`);\n// Insertar usuarios\nawait db.query(`\n  INSERT INTO Usuarios (nombre, correo, password, idRol)\n  VALUES\n  ('Eliezer Cerecedo', 'eliezercerecedo82@gmail.com', 'Bocchi17', 1),\n  ('Juan Pablo', 'juanpablo@gmail.com', 'pablitin18', 2);\n`);\n// Insertar empleados\nawait db.query(`\n  INSERT INTO Empleados (nombre, apPaterno, apMaterno, fechaNacimiento, curp, idUsuario)\n  VALUES\n  ('Eliezer Isai', 'Cerecedo', 'Florencia', '2002-11-12', 'ABC123456XYZ789012', 1),\n  ('Juan', 'Perez', 'Lopez', '1985-07-20', 'DEF123456XYZ789012', 2);\n`);\n// Insertar ventas (asegúrate de que idEmpleado corresponda a un id válido)\nawait db.query(`\n  INSERT INTO Ventas (fechaVenta, monto, idEmpleado)\n  VALUES (NOW(), 1000.50, 1), (NOW(), 500.75, 2);\n`);",
              "err": {
                "message": "error: la autentificaci�n password fall� para el usuario �postgres�",
                "estack": "error: la autentificaci�n password fall� para el usuario �postgres�\n    at C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test\\ventas.test.js:11:5)",
                "diff": null
              },
              "uuid": "afef46fb-2180-4e15-94c2-66a3153eea72",
              "parentUUID": "516302c4-8deb-4d06-a75a-dd3b229d33fe",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook for \"GET /api/ventas/:folio debe retornar 404 para una venta inexistente\"",
              "fullTitle": "Ventas API Endpoints \"after all\" hook for \"GET /api/ventas/:folio debe retornar 404 para una venta inexistente\"",
              "timedOut": false,
              "duration": 74,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Limpieza después de las pruebas\nawait db.query('TRUNCATE TABLE Ventas RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Empleados RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Usuarios RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Roles RESTART IDENTITY CASCADE');",
              "err": {
                "message": "error: la autentificaci�n password fall� para el usuario �postgres�",
                "estack": "error: la autentificaci�n password fall� para el usuario �postgres�\n    at C:\\Users\\Oscar\\Desktop\\Pruebas_unitarias\\Proyecto_Integrador-Pruebas_Unitarias\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test\\ventas.test.js:47:5)",
                "diff": null
              },
              "uuid": "7d1b5440-82f5-4d97-ba63-92a7eb4de9be",
              "parentUUID": "516302c4-8deb-4d06-a75a-dd3b229d33fe",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /api/ventas debe retornar todas las ventas",
              "fullTitle": "Ventas API Endpoints GET /api/ventas debe retornar todas las ventas",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/ventas');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(Array.isArray(res.body), true);\nassert.strictEqual(res.body.length, 2); // Verifica que hay dos ventas",
              "err": {},
              "uuid": "65cfa6ca-57e3-4316-9533-33dc778208c9",
              "parentUUID": "516302c4-8deb-4d06-a75a-dd3b229d33fe",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/ventas/:folio debe retornar una venta por folio",
              "fullTitle": "Ventas API Endpoints GET /api/ventas/:folio debe retornar una venta por folio",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/ventas/1');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(res.body.folio, 1);\nassert.strictEqual(res.body.monto, 1000.50);",
              "err": {},
              "uuid": "50ca399b-ad19-4728-ad03-427391652924",
              "parentUUID": "516302c4-8deb-4d06-a75a-dd3b229d33fe",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "POST /api/ventas debe crear una nueva venta",
              "fullTitle": "Ventas API Endpoints POST /api/ventas debe crear una nueva venta",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newVenta = { monto: 700.25, idempleado: 2 }; // asegurarse de que los datos sean correctos\nconst res = await request(app).post('/api/ventas').send(newVenta);\nassert.strictEqual(res.status, 201); // Espera 201: Created\nassert.strictEqual(res.body.monto, 700.25); // Verifica el monto\nassert.strictEqual(res.body.idempleado, 2); // Verifica el id del empleado",
              "err": {},
              "uuid": "6e1372f5-b80d-481d-96d3-03991f726412",
              "parentUUID": "516302c4-8deb-4d06-a75a-dd3b229d33fe",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "POST /api/ventas debe fallar si falta el campo monto",
              "fullTitle": "Ventas API Endpoints POST /api/ventas debe fallar si falta el campo monto",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidVenta = { idEmpleado: 2 }; // Monto faltante\nconst res = await request(app).post('/api/ventas').send(invalidVenta);\nassert.strictEqual(res.status, 400); // Bad Request",
              "err": {},
              "uuid": "fef6ef35-15e2-4baf-8bb8-2bb1a64c0c1a",
              "parentUUID": "516302c4-8deb-4d06-a75a-dd3b229d33fe",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "PUT /api/ventas/:folio debe actualizar una venta",
              "fullTitle": "Ventas API Endpoints PUT /api/ventas/:folio debe actualizar una venta",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedVenta = { monto: 1200.75, idempleado: 1 }; // asegurarse de que los datos sean correctos\nconst res = await request(app).put('/api/ventas/1').send(updatedVenta);\nassert.strictEqual(res.status, 200); // Espera 200: OK\nassert.strictEqual(res.body.monto, 1200.75); // Verifica el monto actualizado\nassert.strictEqual(res.body.idempleado, 1); // Verifica el id del empleado",
              "err": {},
              "uuid": "166c0706-4a16-4ae0-a1cc-7266fe3993a1",
              "parentUUID": "516302c4-8deb-4d06-a75a-dd3b229d33fe",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "DELETE /api/ventas/:folio debe eliminar una venta",
              "fullTitle": "Ventas API Endpoints DELETE /api/ventas/:folio debe eliminar una venta",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/ventas/1');\nassert.strictEqual(res.status, 204); // No Content\n// Verificar que la venta fue eliminada\nconst getRes = await request(app).get('/api/ventas/1');\nassert.strictEqual(getRes.status, 404); // Venta no encontrada",
              "err": {},
              "uuid": "52802df7-0fb4-41e7-b166-03f88d769e9e",
              "parentUUID": "516302c4-8deb-4d06-a75a-dd3b229d33fe",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/ventas/:folio debe retornar 404 para una venta inexistente",
              "fullTitle": "Ventas API Endpoints GET /api/ventas/:folio debe retornar 404 para una venta inexistente",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/ventas/9999'); // Folio inexistente\nassert.strictEqual(res.status, 404); // No se encuentra la venta",
              "err": {},
              "uuid": "452b180f-cbda-4642-93a8-85494f3342f3",
              "parentUUID": "516302c4-8deb-4d06-a75a-dd3b229d33fe",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "65cfa6ca-57e3-4316-9533-33dc778208c9",
            "50ca399b-ad19-4728-ad03-427391652924",
            "6e1372f5-b80d-481d-96d3-03991f726412",
            "fef6ef35-15e2-4baf-8bb8-2bb1a64c0c1a",
            "166c0706-4a16-4ae0-a1cc-7266fe3993a1",
            "52802df7-0fb4-41e7-b166-03f88d769e9e",
            "452b180f-cbda-4642-93a8-85494f3342f3"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}