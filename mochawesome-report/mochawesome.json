{
  "stats": {
    "suites": 12,
    "tests": 36,
    "passes": 6,
    "pending": 0,
    "failures": 30,
    "start": "2024-11-27T01:52:30.429Z",
    "end": "2024-11-27T01:53:31.959Z",
    "duration": 61530,
    "testsRegistered": 72,
    "passPercent": 8.333333333333332,
    "pendingPercent": 0,
    "other": 6,
    "hasOther": true,
    "skipped": 36,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "0c611ab6-39a5-4cb2-8d59-f0dad6bf4d89",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await db.end();",
          "err": {},
          "uuid": "7b53e0d1-d8e0-4aa7-b7b8-6c595299a70a",
          "parentUUID": "0c611ab6-39a5-4cb2-8d59-f0dad6bf4d89",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "ac13ffb6-5ff4-4103-9a87-faf09debb239",
          "title": "Categorías API Endpoints",
          "fullFile": "C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\categorias.test.js",
          "file": "\\test\\categorias.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Categorías API Endpoints\"",
              "fullTitle": "Categorías API Endpoints \"before all\" hook in \"Categorías API Endpoints\"",
              "timedOut": false,
              "duration": 378,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Limpiar los datos existentes en la tabla y establecer datos iniciales\nawait db.query('TRUNCATE TABLE Categorias RESTART IDENTITY CASCADE');\nawait db.query(\"INSERT INTO Categorias (nombre, descripcion) VALUES ('General', 'Categoría general')\");",
              "err": {},
              "uuid": "4e581696-359d-41a9-8b12-145c1457dbfd",
              "parentUUID": "ac13ffb6-5ff4-4103-9a87-faf09debb239",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Categorías API Endpoints\"",
              "fullTitle": "Categorías API Endpoints \"after all\" hook in \"Categorías API Endpoints\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Restaurar el estado inicial de la tabla (sin cerrar la conexión, ya lo maneja el archivo global)\nawait db.query('TRUNCATE TABLE Categorias RESTART IDENTITY CASCADE');",
              "err": {},
              "uuid": "2aa7344e-375d-4500-8f93-b055d8c76585",
              "parentUUID": "ac13ffb6-5ff4-4103-9a87-faf09debb239",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /api/categorias debe retornar todas las categorías",
              "fullTitle": "Categorías API Endpoints GET /api/categorias debe retornar todas las categorías",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/categorias');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(Array.isArray(res.body), true);\nassert.strictEqual(res.body.length, 1);",
              "err": {},
              "uuid": "5a11de7d-cb84-4449-bd0d-e3898ce8d5ab",
              "parentUUID": "ac13ffb6-5ff4-4103-9a87-faf09debb239",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /api/categorias/:id debe retornar una categoría por ID",
              "fullTitle": "Categorías API Endpoints GET /api/categorias/:id debe retornar una categoría por ID",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/categorias/1');\nassert.strictEqual(res.status, 200);\nassert.ok(res.body.hasOwnProperty('nombre'));\nassert.strictEqual(res.body.nombre, 'General');",
              "err": {},
              "uuid": "8cb2b18a-e67a-4c93-9ea4-607b320588a2",
              "parentUUID": "ac13ffb6-5ff4-4103-9a87-faf09debb239",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /api/categorias debe crear una nueva categoría",
              "fullTitle": "Categorías API Endpoints POST /api/categorias debe crear una nueva categoría",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newCategoria = { nombre: 'Electronica', descripcion: 'Categoría relacionada con Electronica' };\nconst res = await request(app).post('/api/categorias').send(newCategoria);\nassert.strictEqual(res.status, 201);\nassert.ok(res.body.hasOwnProperty('nombre'));\nassert.strictEqual(res.body.nombre, 'Electronica');\n// Verificar que la categoría se agregó\nconst allCategorias = await request(app).get('/api/categorias');\nassert.strictEqual(allCategorias.body.length, 2);",
              "err": {},
              "uuid": "cb936c75-33c4-4f88-808a-72577f81a847",
              "parentUUID": "ac13ffb6-5ff4-4103-9a87-faf09debb239",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT /api/categorias/:id debe actualizar una categoría",
              "fullTitle": "Categorías API Endpoints PUT /api/categorias/:id debe actualizar una categoría",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedCategoria = { nombre: 'Papeleria', descripcion: 'Categoría relacionada con Papeleria' };\nconst res = await request(app).put('/api/categorias/1').send(updatedCategoria);\nassert.strictEqual(res.status, 200);\nassert.ok(res.body.hasOwnProperty('nombre'));\nassert.strictEqual(res.body.nombre, 'Papeleria');",
              "err": {},
              "uuid": "86471591-189f-4b15-88c5-7f03599b23a6",
              "parentUUID": "ac13ffb6-5ff4-4103-9a87-faf09debb239",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE /api/categorias/:id debe eliminar una categoría",
              "fullTitle": "Categorías API Endpoints DELETE /api/categorias/:id debe eliminar una categoría",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/categorias/1');\nassert.strictEqual(res.status, 204);\n// Verificar que la categoría fue eliminada\nconst allCategorias = await request(app).get('/api/categorias');\nassert.strictEqual(allCategorias.body.length, 1); // La categoría eliminada ya no debería estar",
              "err": {},
              "uuid": "58d48c8d-8ff1-4fd8-8dfc-acaf2d9f71d1",
              "parentUUID": "ac13ffb6-5ff4-4103-9a87-faf09debb239",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /api/categorias/:id debe retornar 404 para categoría inexistente",
              "fullTitle": "Categorías API Endpoints GET /api/categorias/:id debe retornar 404 para categoría inexistente",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/categorias/9999');\nassert.strictEqual(res.status, 404);",
              "err": {},
              "uuid": "bbd4c600-c2cf-4abb-b2b0-296495b0be21",
              "parentUUID": "ac13ffb6-5ff4-4103-9a87-faf09debb239",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5a11de7d-cb84-4449-bd0d-e3898ce8d5ab",
            "8cb2b18a-e67a-4c93-9ea4-607b320588a2",
            "cb936c75-33c4-4f88-808a-72577f81a847",
            "86471591-189f-4b15-88c5-7f03599b23a6",
            "58d48c8d-8ff1-4fd8-8dfc-acaf2d9f71d1",
            "bbd4c600-c2cf-4abb-b2b0-296495b0be21"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 85,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8a30d298-7bbe-43d4-8b70-725b181dbeb8",
          "title": "DetalleVentas API Endpoints",
          "fullFile": "C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\detalleVentas.test.js",
          "file": "\\test\\detalleVentas.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"GET /api/detalleVentas debe retornar todos los detalles de ventas\"",
              "fullTitle": "DetalleVentas API Endpoints \"before all\" hook for \"GET /api/detalleVentas debe retornar todos los detalles de ventas\"",
              "timedOut": false,
              "duration": 39,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Limpiar las tablas y establecer datos iniciales\nawait db.query('TRUNCATE TABLE DetalleVentas RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Productos RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Categorias RESTART IDENTITY CASCADE');\n// Insertar categorías de ejemplo con nombre y descripcion\nawait db.query(\n  \"INSERT INTO Categorias (idCategoria, nombre, descripcion) VALUES (1, 'Electrónica', 'Categoría de productos electrónicos')\"\n);\nawait db.query(\n  \"INSERT INTO Categorias (idCategoria, nombre, descripcion) VALUES (2, 'Ropa', 'Categoría de ropa y vestimenta')\"\n);\n// Insertar productos con una categoría asignada\nawait db.query(\n  \"INSERT INTO Productos (idProducto, nombre, precio, descripcion, stock, idCategoria) VALUES (101, 'Producto A', 450.0, 'Descripción del producto A', 100, 1)\"\n);\nawait db.query(\n  \"INSERT INTO Productos (idProducto, nombre, precio, descripcion, stock, idCategoria) VALUES (102, 'Producto B', 500.0, 'Descripción del producto B', 50, 2)\"\n);\n// Insertar un detalle de ventas con productos existentes\nawait db.query(\n  \"INSERT INTO DetalleVentas (folio, idProducto, cantidad, total) VALUES (1, 101, 2, 900)\"\n);",
              "err": {
                "message": "error: inserción o actualización en la tabla «detalleventas» viola la llave foránea «detalleventas_folio_fkey»",
                "estack": "error: inserción o actualización en la tabla «detalleventas» viola la llave foránea «detalleventas_folio_fkey»\n    at C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async Context.<anonymous> (test\\detalleVentas.test.js:32:5)",
                "diff": null
              },
              "uuid": "da7e6ee5-8202-4a93-9049-a1bbe091f73c",
              "parentUUID": "8a30d298-7bbe-43d4-8b70-725b181dbeb8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"DetalleVentas API Endpoints\"",
              "fullTitle": "DetalleVentas API Endpoints \"after all\" hook in \"DetalleVentas API Endpoints\"",
              "timedOut": false,
              "duration": 75,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Restaurar el estado inicial de las tablas (sin cerrar la conexión, ya lo maneja el archivo global)\nawait db.query('TRUNCATE TABLE DetalleVentas RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Productos RESTART IDENTITY CASCADE');\nawait db.query('TRUNCATE TABLE Categorias RESTART IDENTITY CASCADE');",
              "err": {},
              "uuid": "8e936bf1-3df6-464e-b472-0f923295b69d",
              "parentUUID": "8a30d298-7bbe-43d4-8b70-725b181dbeb8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /api/detalleVentas debe retornar todos los detalles de ventas",
              "fullTitle": "DetalleVentas API Endpoints GET /api/detalleVentas debe retornar todos los detalles de ventas",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/detalleVentas');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(Array.isArray(res.body), true);\nassert.strictEqual(res.body.length, 1);",
              "err": {},
              "uuid": "92a5ba5d-e6c3-491a-a97e-4eba17f32d7b",
              "parentUUID": "8a30d298-7bbe-43d4-8b70-725b181dbeb8",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/detalleVentas/:folio/:idProducto debe retornar un detalle específico",
              "fullTitle": "DetalleVentas API Endpoints GET /api/detalleVentas/:folio/:idProducto debe retornar un detalle específico",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/detalleVentas/1/101');\nassert.strictEqual(res.status, 200);\nassert.ok(res.body.hasOwnProperty('cantidad'));\nassert.strictEqual(res.body.cantidad, 2);\nassert.ok(res.body.hasOwnProperty('total'));\nassert.strictEqual(res.body.total, 900);",
              "err": {},
              "uuid": "16055b5d-5755-4be0-b2da-2ee637ff250c",
              "parentUUID": "8a30d298-7bbe-43d4-8b70-725b181dbeb8",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "POST /api/detalleVentas debe crear un nuevo detalle de venta",
              "fullTitle": "DetalleVentas API Endpoints POST /api/detalleVentas debe crear un nuevo detalle de venta",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newDetalle = { folio: 2, idProducto: 102, cantidad: 3, total: 1350 };\nconst res = await request(app).post('/api/detalleVentas').send(newDetalle);\nassert.strictEqual(res.status, 201);\nassert.ok(res.body.hasOwnProperty('folio'));\nassert.strictEqual(res.body.folio, 2);\n// Verificar que se agregó el nuevo detalle\nconst allDetalles = await request(app).get('/api/detalleVentas');\nassert.strictEqual(allDetalles.body.length, 2);",
              "err": {},
              "uuid": "d7c473a7-0aa4-4a46-9b83-94024c6884ef",
              "parentUUID": "8a30d298-7bbe-43d4-8b70-725b181dbeb8",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "PUT /api/detalleVentas/:folio/:idProducto debe actualizar un detalle",
              "fullTitle": "DetalleVentas API Endpoints PUT /api/detalleVentas/:folio/:idProducto debe actualizar un detalle",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedDetalle = { cantidad: 5, total: 2250 };\nconst res = await request(app).put('/api/detalleVentas/1/101').send(updatedDetalle);\nassert.strictEqual(res.status, 200);\nassert.ok(res.body.hasOwnProperty('cantidad'));\nassert.strictEqual(res.body.cantidad, 5);\nassert.ok(res.body.hasOwnProperty('total'));\nassert.strictEqual(res.body.total, 2250);",
              "err": {},
              "uuid": "ee259e80-6819-4216-863b-6e83409c0ba6",
              "parentUUID": "8a30d298-7bbe-43d4-8b70-725b181dbeb8",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "DELETE /api/detalleVentas/:folio/:idProducto debe eliminar un detalle",
              "fullTitle": "DetalleVentas API Endpoints DELETE /api/detalleVentas/:folio/:idProducto debe eliminar un detalle",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/detalleVentas/1/101');\nassert.strictEqual(res.status, 204);\n// Verificar que el detalle fue eliminado\nconst allDetalles = await request(app).get('/api/detalleVentas');\nassert.strictEqual(allDetalles.body.length, 1);",
              "err": {},
              "uuid": "a1226156-8b53-4a90-b46e-02e00a7f99f2",
              "parentUUID": "8a30d298-7bbe-43d4-8b70-725b181dbeb8",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/detalleVentas/:folio/:idProducto debe retornar 404 para un detalle inexistente",
              "fullTitle": "DetalleVentas API Endpoints GET /api/detalleVentas/:folio/:idProducto debe retornar 404 para un detalle inexistente",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/detalleVentas/9999/9999');\nassert.strictEqual(res.status, 404);",
              "err": {},
              "uuid": "9b68ca01-7990-4da6-bc34-30bef26978c9",
              "parentUUID": "8a30d298-7bbe-43d4-8b70-725b181dbeb8",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "92a5ba5d-e6c3-491a-a97e-4eba17f32d7b",
            "16055b5d-5755-4be0-b2da-2ee637ff250c",
            "d7c473a7-0aa4-4a46-9b83-94024c6884ef",
            "ee259e80-6819-4216-863b-6e83409c0ba6",
            "a1226156-8b53-4a90-b46e-02e00a7f99f2",
            "9b68ca01-7990-4da6-bc34-30bef26978c9"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c9eac2dc-3b22-4301-9a2e-f33b6322d0de",
          "title": "Empleados API Endpoints",
          "fullFile": "C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\empleados.test.js",
          "file": "\\test\\empleados.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Empleados API Endpoints\"",
              "fullTitle": "Empleados API Endpoints \"before all\" hook in \"Empleados API Endpoints\"",
              "timedOut": false,
              "duration": 21,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Limpiar la tabla empleados y agregar datos iniciales\nawait db.query('TRUNCATE TABLE empleados RESTART IDENTITY CASCADE');\nawait db.query(\n  \"INSERT INTO empleados (nombre, appaterno, apmaterno, fechanacimiento, curp, idusuario) VALUES ('Juan', 'Pérez', 'López', '1990-01-01', 'CURP123456HDFRLL01', 1)\"\n);",
              "err": {},
              "uuid": "5da81a9f-d92e-4f9c-8c27-ed56b9f9a55b",
              "parentUUID": "c9eac2dc-3b22-4301-9a2e-f33b6322d0de",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Empleados API Endpoints\"",
              "fullTitle": "Empleados API Endpoints \"after all\" hook in \"Empleados API Endpoints\"",
              "timedOut": false,
              "duration": 25,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Limpiar la tabla después de las pruebas\nawait db.query('TRUNCATE TABLE empleados RESTART IDENTITY CASCADE');",
              "err": {},
              "uuid": "110baaed-7975-45c5-8c05-b43b3f0d9e3a",
              "parentUUID": "c9eac2dc-3b22-4301-9a2e-f33b6322d0de",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /api/empleados debe retornar todos los empleados",
              "fullTitle": "Empleados API Endpoints GET /api/empleados debe retornar todos los empleados",
              "timedOut": true,
              "duration": 2008,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/empleados');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(Array.isArray(res.body), true);\nassert.strictEqual(res.body.length, 1);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\empleados.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\empleados.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                "diff": null
              },
              "uuid": "0fbca39c-1f60-419d-8b7b-8c8c58b66bf6",
              "parentUUID": "c9eac2dc-3b22-4301-9a2e-f33b6322d0de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /api/empleados/:id debe retornar un empleado por ID",
              "fullTitle": "Empleados API Endpoints GET /api/empleados/:id debe retornar un empleado por ID",
              "timedOut": true,
              "duration": 2005,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/empleados/1');\nassert.strictEqual(res.status, 200);\nassert.ok(res.body.hasOwnProperty('nombre'));\nassert.strictEqual(res.body.nombre, 'Juan');",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\empleados.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\empleados.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                "diff": null
              },
              "uuid": "fb481804-65cd-42ce-ba2c-51755ca21f24",
              "parentUUID": "c9eac2dc-3b22-4301-9a2e-f33b6322d0de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /api/empleados debe crear un nuevo empleado",
              "fullTitle": "Empleados API Endpoints POST /api/empleados debe crear un nuevo empleado",
              "timedOut": true,
              "duration": 2005,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const newEmpleado = {\n  nombre: 'Ana',\n  appaterno: 'Martínez',\n  apmaterno: 'García',\n  fechanacimiento: '1985-05-15',\n  curp: 'CURP456789GDFANA02',\n  idusuario: 2\n};\nconst res = await request(app).post('/api/empleados').send(newEmpleado);\nassert.strictEqual(res.status, 201);\nassert.ok(res.body.hasOwnProperty('nombre'));\nassert.strictEqual(res.body.nombre, 'Ana');\n// Verificar que se agregó correctamente\nconst allEmpleados = await request(app).get('/api/empleados');\nassert.strictEqual(allEmpleados.body.length, 2);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\empleados.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\empleados.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                "diff": null
              },
              "uuid": "febdfe45-e9ab-4632-ac1f-7bf5ad4da643",
              "parentUUID": "c9eac2dc-3b22-4301-9a2e-f33b6322d0de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT /api/empleados/:id debe actualizar un empleado",
              "fullTitle": "Empleados API Endpoints PUT /api/empleados/:id debe actualizar un empleado",
              "timedOut": true,
              "duration": 2015,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const updatedEmpleado = {\n  nombre: 'Carlos',\n  appaterno: 'Hernández',\n  apmaterno: 'Ruiz',\n  fechanacimiento: '1980-10-10',\n  curp: 'CURP654321CDFCRL03',\n  idusuario: 3\n};\nconst res = await request(app).put('/api/empleados/1').send(updatedEmpleado);\nassert.strictEqual(res.status, 200);\nassert.ok(res.body.hasOwnProperty('nombre'));\nassert.strictEqual(res.body.nombre, 'Carlos');",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\empleados.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\empleados.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                "diff": null
              },
              "uuid": "3dfe5db4-3d77-496d-8e2a-2ac13864f063",
              "parentUUID": "c9eac2dc-3b22-4301-9a2e-f33b6322d0de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE /api/empleados/:id debe eliminar un empleado",
              "fullTitle": "Empleados API Endpoints DELETE /api/empleados/:id debe eliminar un empleado",
              "timedOut": true,
              "duration": 2007,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/empleados/1');\nassert.strictEqual(res.status, 204);\n// Verificar que el empleado fue eliminado\nconst allEmpleados = await request(app).get('/api/empleados');\nassert.strictEqual(allEmpleados.body.length, 1);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\empleados.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\empleados.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                "diff": null
              },
              "uuid": "530b7306-89a1-4bac-b639-0b30ee130271",
              "parentUUID": "c9eac2dc-3b22-4301-9a2e-f33b6322d0de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /api/empleados/:id debe retornar 404 para un empleado inexistente",
              "fullTitle": "Empleados API Endpoints GET /api/empleados/:id debe retornar 404 para un empleado inexistente",
              "timedOut": true,
              "duration": 2005,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/empleados/9999');\nassert.strictEqual(res.status, 404);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\empleados.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\empleados.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                "diff": null
              },
              "uuid": "adb7a034-5947-4396-bd04-ad3d44d7361b",
              "parentUUID": "c9eac2dc-3b22-4301-9a2e-f33b6322d0de",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "0fbca39c-1f60-419d-8b7b-8c8c58b66bf6",
            "fb481804-65cd-42ce-ba2c-51755ca21f24",
            "febdfe45-e9ab-4632-ac1f-7bf5ad4da643",
            "3dfe5db4-3d77-496d-8e2a-2ac13864f063",
            "530b7306-89a1-4bac-b639-0b30ee130271",
            "adb7a034-5947-4396-bd04-ad3d44d7361b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 12045,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2858721c-5ffe-4e74-952c-c988b65478c4",
          "title": "Métodos de Venta API Endpoints",
          "fullFile": "C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\metodoVenta.test.js",
          "file": "\\test\\metodoVenta.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Métodos de Venta API Endpoints\"",
              "fullTitle": "Métodos de Venta API Endpoints \"before all\" hook in \"Métodos de Venta API Endpoints\"",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Limpiar la tabla y agregar datos iniciales\nawait db.query('TRUNCATE TABLE MetodoVenta RESTART IDENTITY CASCADE');\nawait db.query(\n  \"INSERT INTO MetodoVenta (idTipoPago, descripcion, comision, fecha_creacion, activo) VALUES (1, 'Tarjeta de Crédito', 2.5, NOW(), true)\"\n);",
              "err": {},
              "uuid": "fb074f8d-fed8-4a03-9554-7c7362390cb8",
              "parentUUID": "2858721c-5ffe-4e74-952c-c988b65478c4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Métodos de Venta API Endpoints\"",
              "fullTitle": "Métodos de Venta API Endpoints \"after all\" hook in \"Métodos de Venta API Endpoints\"",
              "timedOut": false,
              "duration": 20,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Limpiar la tabla después de las pruebas\nawait db.query('TRUNCATE TABLE MetodoVenta RESTART IDENTITY CASCADE');",
              "err": {},
              "uuid": "5e79edec-0c63-4ee5-959e-083dc8016ee6",
              "parentUUID": "2858721c-5ffe-4e74-952c-c988b65478c4",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /api/metodoVenta debe retornar todos los métodos de venta",
              "fullTitle": "Métodos de Venta API Endpoints GET /api/metodoVenta debe retornar todos los métodos de venta",
              "timedOut": true,
              "duration": 2004,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/metodoVenta');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(Array.isArray(res.body), true);\nassert.strictEqual(res.body.length, 1);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\metodoVenta.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\metodoVenta.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                "diff": null
              },
              "uuid": "4e216c79-1cd6-4e89-858e-80c4ba8c60c8",
              "parentUUID": "2858721c-5ffe-4e74-952c-c988b65478c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /api/metodoVenta/:id debe retornar un método de venta por ID",
              "fullTitle": "Métodos de Venta API Endpoints GET /api/metodoVenta/:id debe retornar un método de venta por ID",
              "timedOut": true,
              "duration": 2003,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/metodoVenta/1');\nassert.strictEqual(res.status, 200);\nassert.ok(res.body.hasOwnProperty('descripcion'));\nassert.strictEqual(res.body.descripcion, 'Tarjeta de Crédito');",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\metodoVenta.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\metodoVenta.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                "diff": null
              },
              "uuid": "ca5d3259-6055-4e67-95e8-2b0b03b9c4a0",
              "parentUUID": "2858721c-5ffe-4e74-952c-c988b65478c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /api/metodoVenta debe crear un nuevo método de venta",
              "fullTitle": "Métodos de Venta API Endpoints POST /api/metodoVenta debe crear un nuevo método de venta",
              "timedOut": true,
              "duration": 2002,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const newMetodoVenta = {\n  idTipoPago: 2,\n  descripcion: 'PayPal',\n  comision: 3.0,\n  activo: true\n};\nconst res = await request(app).post('/api/metodoVenta').send(newMetodoVenta);\nassert.strictEqual(res.status, 201);\nassert.ok(res.body.hasOwnProperty('descripcion'));\nassert.strictEqual(res.body.descripcion, 'PayPal');\n// Verificar que se agregó correctamente\nconst allMetodoVenta = await request(app).get('/api/metodoVenta');\nassert.strictEqual(allMetodoVenta.body.length, 2);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\metodoVenta.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\metodoVenta.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                "diff": null
              },
              "uuid": "b03a9663-ef3e-416b-afd9-bca7c6b13776",
              "parentUUID": "2858721c-5ffe-4e74-952c-c988b65478c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT /api/metodoVenta/:id debe actualizar un método de venta",
              "fullTitle": "Métodos de Venta API Endpoints PUT /api/metodoVenta/:id debe actualizar un método de venta",
              "timedOut": true,
              "duration": 2013,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const updatedMetodoVenta = {\n  idTipoPago: 3,\n  descripcion: 'Pago en Efectivo',\n  comision: 0,\n  activo: false\n};\nconst res = await request(app).put('/api/metodoVenta/1').send(updatedMetodoVenta);\nassert.strictEqual(res.status, 200);\nassert.ok(res.body.hasOwnProperty('descripcion'));\nassert.strictEqual(res.body.descripcion, 'Pago en Efectivo');",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\metodoVenta.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\metodoVenta.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                "diff": null
              },
              "uuid": "1f0793c0-6795-459e-878e-69c492d8517e",
              "parentUUID": "2858721c-5ffe-4e74-952c-c988b65478c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE /api/metodoVenta/:id debe eliminar un método de venta",
              "fullTitle": "Métodos de Venta API Endpoints DELETE /api/metodoVenta/:id debe eliminar un método de venta",
              "timedOut": true,
              "duration": 2002,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/metodoVenta/1');\nassert.strictEqual(res.status, 204);\n// Verificar que el método de venta fue eliminado\nconst allMetodoVenta = await request(app).get('/api/metodoVenta');\nassert.strictEqual(allMetodoVenta.body.length, 1);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\metodoVenta.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\metodoVenta.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                "diff": null
              },
              "uuid": "ed1fbf1e-e4f3-4849-ab45-fb483aafc3a1",
              "parentUUID": "2858721c-5ffe-4e74-952c-c988b65478c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /api/metodoVenta/:id debe retornar 404 para un método de venta inexistente",
              "fullTitle": "Métodos de Venta API Endpoints GET /api/metodoVenta/:id debe retornar 404 para un método de venta inexistente",
              "timedOut": true,
              "duration": 2015,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/metodoVenta/9999');\nassert.strictEqual(res.status, 404);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\metodoVenta.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\metodoVenta.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                "diff": null
              },
              "uuid": "f1872586-0ce8-40dd-ae51-ffda1948b566",
              "parentUUID": "2858721c-5ffe-4e74-952c-c988b65478c4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "4e216c79-1cd6-4e89-858e-80c4ba8c60c8",
            "ca5d3259-6055-4e67-95e8-2b0b03b9c4a0",
            "b03a9663-ef3e-416b-afd9-bca7c6b13776",
            "1f0793c0-6795-459e-878e-69c492d8517e",
            "ed1fbf1e-e4f3-4849-ab45-fb483aafc3a1",
            "f1872586-0ce8-40dd-ae51-ffda1948b566"
          ],
          "pending": [],
          "skipped": [],
          "duration": 12039,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4477f425-cf84-482c-8266-3dae88926176",
          "title": "PedidoDetalles API Endpoints",
          "fullFile": "C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\pedidoDetalles.test.js",
          "file": "\\test\\pedidoDetalles.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"GET /api/pedidoDetalles debe retornar todos los detalles de pedidos\"",
              "fullTitle": "PedidoDetalles API Endpoints \"before all\" hook for \"GET /api/pedidoDetalles debe retornar todos los detalles de pedidos\"",
              "timedOut": false,
              "duration": 17,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Limpiar la tabla y agregar datos iniciales\nawait db.query('TRUNCATE TABLE PedidoDetalles RESTART IDENTITY CASCADE');\nawait db.query(\"INSERT INTO PedidoDetalles (idPedido, idProducto, cantidad) VALUES (1, 101, 5)\");",
              "err": {
                "message": "error: inserción o actualización en la tabla «pedidodetalles» viola la llave foránea «pedidodetalles_idpedido_fkey»",
                "estack": "error: inserción o actualización en la tabla «pedidodetalles» viola la llave foránea «pedidodetalles_idpedido_fkey»\n    at C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async Context.<anonymous> (test\\pedidoDetalles.test.js:13:5)",
                "diff": null
              },
              "uuid": "f76eacdd-71a1-41b4-90a5-c480454ac141",
              "parentUUID": "4477f425-cf84-482c-8266-3dae88926176",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"PedidoDetalles API Endpoints\"",
              "fullTitle": "PedidoDetalles API Endpoints \"after all\" hook in \"PedidoDetalles API Endpoints\"",
              "timedOut": false,
              "duration": 39,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Limpiar la tabla después de las pruebas\nawait db.query('TRUNCATE TABLE PedidoDetalles RESTART IDENTITY CASCADE');",
              "err": {},
              "uuid": "bc8f9ee8-0950-4d62-b6cc-6e2d863c69b8",
              "parentUUID": "4477f425-cf84-482c-8266-3dae88926176",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /api/pedidoDetalles debe retornar todos los detalles de pedidos",
              "fullTitle": "PedidoDetalles API Endpoints GET /api/pedidoDetalles debe retornar todos los detalles de pedidos",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/pedidoDetalles');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(Array.isArray(res.body), true);\nassert.strictEqual(res.body.length, 1);",
              "err": {},
              "uuid": "b3ce9cfe-78cc-4e4d-801e-e8523125ced5",
              "parentUUID": "4477f425-cf84-482c-8266-3dae88926176",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/pedidoDetalles/:idPedido/:idProducto debe retornar un detalle por ID",
              "fullTitle": "PedidoDetalles API Endpoints GET /api/pedidoDetalles/:idPedido/:idProducto debe retornar un detalle por ID",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/pedidoDetalles/1/101');\nassert.strictEqual(res.status, 200);\nassert.ok(res.body.hasOwnProperty('cantidad'));\nassert.strictEqual(res.body.cantidad, 5);",
              "err": {},
              "uuid": "17b5951b-5d36-405d-8b3e-d3ba25f89db8",
              "parentUUID": "4477f425-cf84-482c-8266-3dae88926176",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "POST /api/pedidoDetalles debe crear un nuevo detalle de pedido",
              "fullTitle": "PedidoDetalles API Endpoints POST /api/pedidoDetalles debe crear un nuevo detalle de pedido",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newDetalle = { idPedido: 2, idProducto: 202, cantidad: 3 };\nconst res = await request(app).post('/api/pedidoDetalles').send(newDetalle);\nassert.strictEqual(res.status, 201);\nassert.ok(res.body.hasOwnProperty('idPedido'));\nassert.strictEqual(res.body.idPedido, 2);\n// Verificar que se agregó correctamente\nconst allDetalles = await request(app).get('/api/pedidoDetalles');\nassert.strictEqual(allDetalles.body.length, 2);",
              "err": {},
              "uuid": "8e960dd5-d197-4acb-8e02-3d3c6de64c39",
              "parentUUID": "4477f425-cf84-482c-8266-3dae88926176",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "PUT /api/pedidoDetalles/:idPedido/:idProducto debe actualizar un detalle de pedido",
              "fullTitle": "PedidoDetalles API Endpoints PUT /api/pedidoDetalles/:idPedido/:idProducto debe actualizar un detalle de pedido",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedDetalle = { cantidad: 10 };\nconst res = await request(app).put('/api/pedidoDetalles/1/101').send(updatedDetalle);\nassert.strictEqual(res.status, 200);\nassert.ok(res.body.hasOwnProperty('cantidad'));\nassert.strictEqual(res.body.cantidad, 10);",
              "err": {},
              "uuid": "4e1593ce-c8ac-4e0d-b0f1-9d9168dfe7d9",
              "parentUUID": "4477f425-cf84-482c-8266-3dae88926176",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "DELETE /api/pedidoDetalles/:idPedido/:idProducto debe eliminar un detalle de pedido",
              "fullTitle": "PedidoDetalles API Endpoints DELETE /api/pedidoDetalles/:idPedido/:idProducto debe eliminar un detalle de pedido",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/pedidoDetalles/1/101');\nassert.strictEqual(res.status, 204);\n// Verificar que el detalle fue eliminado\nconst allDetalles = await request(app).get('/api/pedidoDetalles');\nassert.strictEqual(allDetalles.body.length, 1); // Queda solo 1 detalle",
              "err": {},
              "uuid": "40876e14-3ebc-4847-a373-de3462f5421f",
              "parentUUID": "4477f425-cf84-482c-8266-3dae88926176",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/pedidoDetalles/:idPedido/:idProducto debe retornar 404 para un detalle inexistente",
              "fullTitle": "PedidoDetalles API Endpoints GET /api/pedidoDetalles/:idPedido/:idProducto debe retornar 404 para un detalle inexistente",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/pedidoDetalles/9999/9999');\nassert.strictEqual(res.status, 404);",
              "err": {},
              "uuid": "e6e93fb2-0e06-43ad-b707-371e1c0fe37a",
              "parentUUID": "4477f425-cf84-482c-8266-3dae88926176",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "b3ce9cfe-78cc-4e4d-801e-e8523125ced5",
            "17b5951b-5d36-405d-8b3e-d3ba25f89db8",
            "8e960dd5-d197-4acb-8e02-3d3c6de64c39",
            "4e1593ce-c8ac-4e0d-b0f1-9d9168dfe7d9",
            "40876e14-3ebc-4847-a373-de3462f5421f",
            "e6e93fb2-0e06-43ad-b707-371e1c0fe37a"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3df4bfb0-94af-4567-a4a7-8ead99cc1550",
          "title": "Pedidos API Endpoints",
          "fullFile": "C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\pedidos.test.js",
          "file": "\\test\\pedidos.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"GET /api/pedidos debe retornar todos los pedidos\"",
              "fullTitle": "Pedidos API Endpoints \"before all\" hook for \"GET /api/pedidos debe retornar todos los pedidos\"",
              "timedOut": false,
              "duration": 10,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Limpiar la tabla y agregar datos iniciales\nawait db.query('TRUNCATE TABLE Pedidos RESTART IDENTITY CASCADE');\nawait db.query(\"INSERT INTO Pedidos (total, estado, fechaPedido, idMetodoV, idProveedor) VALUES (1000, 'Pendiente', NOW(), 1, 1)\");",
              "err": {
                "message": "error: inserción o actualización en la tabla «pedidos» viola la llave foránea «pedidos_idmetodov_fkey»",
                "estack": "error: inserción o actualización en la tabla «pedidos» viola la llave foránea «pedidos_idmetodov_fkey»\n    at C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async Context.<anonymous> (test\\pedidos.test.js:13:5)",
                "diff": null
              },
              "uuid": "c52aa707-a11c-4683-8c28-bf2cb55153f0",
              "parentUUID": "3df4bfb0-94af-4567-a4a7-8ead99cc1550",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Pedidos API Endpoints\"",
              "fullTitle": "Pedidos API Endpoints \"after all\" hook in \"Pedidos API Endpoints\"",
              "timedOut": false,
              "duration": 41,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Limpiar la tabla después de las pruebas\nawait db.query('TRUNCATE TABLE Pedidos RESTART IDENTITY CASCADE');",
              "err": {},
              "uuid": "3e70ba2a-415e-4ec1-8fbe-2071af7b3f23",
              "parentUUID": "3df4bfb0-94af-4567-a4a7-8ead99cc1550",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /api/pedidos debe retornar todos los pedidos",
              "fullTitle": "Pedidos API Endpoints GET /api/pedidos debe retornar todos los pedidos",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/pedidos');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(Array.isArray(res.body), true);\nassert.strictEqual(res.body.length, 1);",
              "err": {},
              "uuid": "b36b74c6-aa91-493c-87c9-c10eae3e13ab",
              "parentUUID": "3df4bfb0-94af-4567-a4a7-8ead99cc1550",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/pedidos/:id debe retornar un pedido por ID",
              "fullTitle": "Pedidos API Endpoints GET /api/pedidos/:id debe retornar un pedido por ID",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/pedidos/1');\nassert.strictEqual(res.status, 200);\nassert.ok(res.body.hasOwnProperty('total'));\nassert.strictEqual(res.body.total, 1000);",
              "err": {},
              "uuid": "18e895dd-e039-4fdf-b14f-59c0c18fde22",
              "parentUUID": "3df4bfb0-94af-4567-a4a7-8ead99cc1550",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "POST /api/pedidos debe crear un nuevo pedido",
              "fullTitle": "Pedidos API Endpoints POST /api/pedidos debe crear un nuevo pedido",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newPedido = {\n  total: 500,\n  estado: 'En Proceso',\n  idMetodoV: 2,\n  idProveedor: 3\n};\nconst res = await request(app).post('/api/pedidos').send(newPedido);\nassert.strictEqual(res.status, 201);\nassert.ok(res.body.hasOwnProperty('total'));\nassert.strictEqual(res.body.total, 500);\n// Verificar que se agregó correctamente\nconst allPedidos = await request(app).get('/api/pedidos');\nassert.strictEqual(allPedidos.body.length, 2);",
              "err": {},
              "uuid": "114870e9-d5e8-4499-8ee1-8e001f83c6e1",
              "parentUUID": "3df4bfb0-94af-4567-a4a7-8ead99cc1550",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "PUT /api/pedidos/:id debe actualizar un pedido",
              "fullTitle": "Pedidos API Endpoints PUT /api/pedidos/:id debe actualizar un pedido",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedPedido = {\n  total: 1200,\n  estado: 'Completado',\n  fechaPedido: '2024-11-30',\n  idMetodoV: 3,\n  idProveedor: 2\n};\nconst res = await request(app).put('/api/pedidos/1').send(updatedPedido);\nassert.strictEqual(res.status, 200);\nassert.ok(res.body.hasOwnProperty('estado'));\nassert.strictEqual(res.body.estado, 'Completado');",
              "err": {},
              "uuid": "476ad354-4c56-433f-918c-015147861bfb",
              "parentUUID": "3df4bfb0-94af-4567-a4a7-8ead99cc1550",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "DELETE /api/pedidos/:id debe eliminar un pedido",
              "fullTitle": "Pedidos API Endpoints DELETE /api/pedidos/:id debe eliminar un pedido",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/pedidos/1');\nassert.strictEqual(res.status, 204);\n// Verificar que el pedido fue eliminado\nconst allPedidos = await request(app).get('/api/pedidos');\nassert.strictEqual(allPedidos.body.length, 1);",
              "err": {},
              "uuid": "d188032a-192a-442f-9e17-e2aa9f49328e",
              "parentUUID": "3df4bfb0-94af-4567-a4a7-8ead99cc1550",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/pedidos/:id debe retornar 404 para un pedido inexistente",
              "fullTitle": "Pedidos API Endpoints GET /api/pedidos/:id debe retornar 404 para un pedido inexistente",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/pedidos/9999');\nassert.strictEqual(res.status, 404);",
              "err": {},
              "uuid": "02b89d16-7bb1-4719-a8e0-24150e60d702",
              "parentUUID": "3df4bfb0-94af-4567-a4a7-8ead99cc1550",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "b36b74c6-aa91-493c-87c9-c10eae3e13ab",
            "18e895dd-e039-4fdf-b14f-59c0c18fde22",
            "114870e9-d5e8-4499-8ee1-8e001f83c6e1",
            "476ad354-4c56-433f-918c-015147861bfb",
            "d188032a-192a-442f-9e17-e2aa9f49328e",
            "02b89d16-7bb1-4719-a8e0-24150e60d702"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "322522a0-7a48-4553-9f6c-5bcf22ead7f3",
          "title": "Productos API Endpoints",
          "fullFile": "C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\productos.test.js",
          "file": "\\test\\productos.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"GET /api/productos debe retornar todos los productos\"",
              "fullTitle": "Productos API Endpoints \"before all\" hook for \"GET /api/productos debe retornar todos los productos\"",
              "timedOut": false,
              "duration": 11,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Limpiar la tabla y agregar datos iniciales\nawait db.query('TRUNCATE TABLE Productos RESTART IDENTITY CASCADE');\nawait db.query(\"INSERT INTO Productos (nombre, descripcion, precio, stock, idcategoria) VALUES ('Laptop', 'Portátil de alto rendimiento', 1500, 10, 1)\");",
              "err": {
                "message": "error: inserción o actualización en la tabla «productos» viola la llave foránea «productos_idcategoria_fkey»",
                "estack": "error: inserción o actualización en la tabla «productos» viola la llave foránea «productos_idcategoria_fkey»\n    at C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async Context.<anonymous> (test\\productos.test.js:13:5)",
                "diff": null
              },
              "uuid": "bb9a30f4-e742-41fd-9a93-eb89dedf3156",
              "parentUUID": "322522a0-7a48-4553-9f6c-5bcf22ead7f3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Productos API Endpoints\"",
              "fullTitle": "Productos API Endpoints \"after all\" hook in \"Productos API Endpoints\"",
              "timedOut": false,
              "duration": 43,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Limpiar la tabla después de las pruebas\nawait db.query('TRUNCATE TABLE Productos RESTART IDENTITY CASCADE');",
              "err": {},
              "uuid": "fa94e239-b08e-4ea0-8459-4e789f988b5a",
              "parentUUID": "322522a0-7a48-4553-9f6c-5bcf22ead7f3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /api/productos debe retornar todos los productos",
              "fullTitle": "Productos API Endpoints GET /api/productos debe retornar todos los productos",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/productos');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(Array.isArray(res.body), true);\nassert.strictEqual(res.body.length, 1);",
              "err": {},
              "uuid": "af10e401-6783-4639-940d-04a9448023bd",
              "parentUUID": "322522a0-7a48-4553-9f6c-5bcf22ead7f3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/productos/:id debe retornar un producto por ID",
              "fullTitle": "Productos API Endpoints GET /api/productos/:id debe retornar un producto por ID",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/productos/1');\nassert.strictEqual(res.status, 200);\nassert.ok(res.body.hasOwnProperty('nombre'));\nassert.strictEqual(res.body.nombre, 'Laptop');",
              "err": {},
              "uuid": "08dc246b-6781-4e29-aed8-579ec954ee67",
              "parentUUID": "322522a0-7a48-4553-9f6c-5bcf22ead7f3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "POST /api/productos debe crear un nuevo producto",
              "fullTitle": "Productos API Endpoints POST /api/productos debe crear un nuevo producto",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newProducto = {\n  nombre: 'Mouse',\n  descripcion: 'Mouse inalámbrico',\n  precio: 20,\n  stock: 50,\n  idcategoria: 2\n};\nconst res = await request(app).post('/api/productos').send(newProducto);\nassert.strictEqual(res.status, 201);\nassert.ok(res.body.hasOwnProperty('nombre'));\nassert.strictEqual(res.body.nombre, 'Mouse');\n// Verificar que se agregó correctamente\nconst allProductos = await request(app).get('/api/productos');\nassert.strictEqual(allProductos.body.length, 2);",
              "err": {},
              "uuid": "84cd3072-8203-4701-b53d-ac88618dcc32",
              "parentUUID": "322522a0-7a48-4553-9f6c-5bcf22ead7f3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "PUT /api/productos/:id debe actualizar un producto",
              "fullTitle": "Productos API Endpoints PUT /api/productos/:id debe actualizar un producto",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedProducto = {\n  nombre: 'Laptop Gamer',\n  descripcion: 'Portátil con tarjeta gráfica potente',\n  precio: 1800,\n  stock: 8,\n  idcategoria: 1\n};\nconst res = await request(app).put('/api/productos/1').send(updatedProducto);\nassert.strictEqual(res.status, 200);\nassert.ok(res.body.hasOwnProperty('nombre'));\nassert.strictEqual(res.body.nombre, 'Laptop Gamer');",
              "err": {},
              "uuid": "81b2288b-715c-404e-a2d6-85598e770a9e",
              "parentUUID": "322522a0-7a48-4553-9f6c-5bcf22ead7f3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "DELETE /api/productos/:id debe eliminar un producto",
              "fullTitle": "Productos API Endpoints DELETE /api/productos/:id debe eliminar un producto",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/productos/1');\nassert.strictEqual(res.status, 204);\n// Verificar que el producto fue eliminado\nconst allProductos = await request(app).get('/api/productos');\nassert.strictEqual(allProductos.body.length, 1);",
              "err": {},
              "uuid": "dad48114-0337-4484-81ee-16032dec5867",
              "parentUUID": "322522a0-7a48-4553-9f6c-5bcf22ead7f3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/productos/:id debe retornar 404 para un producto inexistente",
              "fullTitle": "Productos API Endpoints GET /api/productos/:id debe retornar 404 para un producto inexistente",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/productos/9999');\nassert.strictEqual(res.status, 404);",
              "err": {},
              "uuid": "4459cb32-5f17-4014-8a79-4212b8f4e877",
              "parentUUID": "322522a0-7a48-4553-9f6c-5bcf22ead7f3",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "af10e401-6783-4639-940d-04a9448023bd",
            "08dc246b-6781-4e29-aed8-579ec954ee67",
            "84cd3072-8203-4701-b53d-ac88618dcc32",
            "81b2288b-715c-404e-a2d6-85598e770a9e",
            "dad48114-0337-4484-81ee-16032dec5867",
            "4459cb32-5f17-4014-8a79-4212b8f4e877"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6eb7764a-8a67-4c8b-8c7c-381cb8486f3b",
          "title": "Proveedores API Endpoints",
          "fullFile": "C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\proveedores.test.js",
          "file": "\\test\\proveedores.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Proveedores API Endpoints\"",
              "fullTitle": "Proveedores API Endpoints \"before all\" hook in \"Proveedores API Endpoints\"",
              "timedOut": false,
              "duration": 14,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Limpiar la tabla y agregar datos iniciales\nawait db.query('TRUNCATE TABLE Proveedores RESTART IDENTITY CASCADE');\nawait db.query(\"INSERT INTO Proveedores (nombre, direccion, rfc, telefono) VALUES ('Proveedor A', 'Calle 1, Ciudad', 'RFC12345A', '5555555555')\");",
              "err": {},
              "uuid": "5a23dbe9-4ec2-4fdd-a301-fe1b294e4f6b",
              "parentUUID": "6eb7764a-8a67-4c8b-8c7c-381cb8486f3b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Proveedores API Endpoints\"",
              "fullTitle": "Proveedores API Endpoints \"after all\" hook in \"Proveedores API Endpoints\"",
              "timedOut": false,
              "duration": 25,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Limpiar la tabla después de las pruebas\nawait db.query('TRUNCATE TABLE Proveedores RESTART IDENTITY CASCADE');",
              "err": {},
              "uuid": "4382a2a4-858b-4f0c-bd82-763de4b72e14",
              "parentUUID": "6eb7764a-8a67-4c8b-8c7c-381cb8486f3b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /api/proveedores debe retornar todos los proveedores",
              "fullTitle": "Proveedores API Endpoints GET /api/proveedores debe retornar todos los proveedores",
              "timedOut": true,
              "duration": 2009,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/proveedores');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(Array.isArray(res.body), true);\nassert.strictEqual(res.body.length, 1);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\proveedores.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\proveedores.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                "diff": null
              },
              "uuid": "ba58eb81-0d1f-4f84-ab2d-e12895fb5b26",
              "parentUUID": "6eb7764a-8a67-4c8b-8c7c-381cb8486f3b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /api/proveedores/:id debe retornar un proveedor por ID",
              "fullTitle": "Proveedores API Endpoints GET /api/proveedores/:id debe retornar un proveedor por ID",
              "timedOut": true,
              "duration": 2017,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/proveedores/1');\nassert.strictEqual(res.status, 200);\nassert.ok(res.body.hasOwnProperty('nombre'));\nassert.strictEqual(res.body.nombre, 'Proveedor A');",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\proveedores.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\proveedores.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                "diff": null
              },
              "uuid": "0069e3f3-e4fd-4e4a-a13e-720d4387f7e3",
              "parentUUID": "6eb7764a-8a67-4c8b-8c7c-381cb8486f3b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /api/proveedores debe crear un nuevo proveedor",
              "fullTitle": "Proveedores API Endpoints POST /api/proveedores debe crear un nuevo proveedor",
              "timedOut": true,
              "duration": 2000,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const newProveedor = {\n  nombre: 'Proveedor B',\n  direccion: 'Calle 2, Ciudad',\n  rfc: 'RFC54321B',\n  telefono: '6666666666'\n};\nconst res = await request(app).post('/api/proveedores').send(newProveedor);\nassert.strictEqual(res.status, 201);\nassert.ok(res.body.hasOwnProperty('nombre'));\nassert.strictEqual(res.body.nombre, 'Proveedor B');\n// Verificar que se agregó correctamente\nconst allProveedores = await request(app).get('/api/proveedores');\nassert.strictEqual(allProveedores.body.length, 2);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\proveedores.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\proveedores.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                "diff": null
              },
              "uuid": "2e176a39-abcc-4d2b-a9b8-dea449804b94",
              "parentUUID": "6eb7764a-8a67-4c8b-8c7c-381cb8486f3b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT /api/proveedores/:id debe actualizar un proveedor",
              "fullTitle": "Proveedores API Endpoints PUT /api/proveedores/:id debe actualizar un proveedor",
              "timedOut": true,
              "duration": 2016,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const updatedProveedor = {\n  nombre: 'Proveedor Actualizado',\n  direccion: 'Calle 3, Ciudad',\n  rfc: 'RFC56789C',\n  telefono: '7777777777'\n};\nconst res = await request(app).put('/api/proveedores/1').send(updatedProveedor);\nassert.strictEqual(res.status, 200);\nassert.ok(res.body.hasOwnProperty('nombre'));\nassert.strictEqual(res.body.nombre, 'Proveedor Actualizado');",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\proveedores.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\proveedores.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                "diff": null
              },
              "uuid": "0b9ee781-f1c1-4afc-8d59-2d41126619f2",
              "parentUUID": "6eb7764a-8a67-4c8b-8c7c-381cb8486f3b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE /api/proveedores/:id debe eliminar un proveedor",
              "fullTitle": "Proveedores API Endpoints DELETE /api/proveedores/:id debe eliminar un proveedor",
              "timedOut": true,
              "duration": 2015,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/proveedores/1');\nassert.strictEqual(res.status, 204);\n// Verificar que el proveedor fue eliminado\nconst allProveedores = await request(app).get('/api/proveedores');\nassert.strictEqual(allProveedores.body.length, 1);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\proveedores.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\proveedores.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                "diff": null
              },
              "uuid": "9296fad6-94b1-441e-9389-eef1109f264b",
              "parentUUID": "6eb7764a-8a67-4c8b-8c7c-381cb8486f3b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /api/proveedores/:id debe retornar 404 para un proveedor inexistente",
              "fullTitle": "Proveedores API Endpoints GET /api/proveedores/:id debe retornar 404 para un proveedor inexistente",
              "timedOut": true,
              "duration": 2004,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/proveedores/9999');\nassert.strictEqual(res.status, 404);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\proveedores.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\proveedores.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                "diff": null
              },
              "uuid": "aa04e82f-f6d5-440e-b953-5376686c5847",
              "parentUUID": "6eb7764a-8a67-4c8b-8c7c-381cb8486f3b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "ba58eb81-0d1f-4f84-ab2d-e12895fb5b26",
            "0069e3f3-e4fd-4e4a-a13e-720d4387f7e3",
            "2e176a39-abcc-4d2b-a9b8-dea449804b94",
            "0b9ee781-f1c1-4afc-8d59-2d41126619f2",
            "9296fad6-94b1-441e-9389-eef1109f264b",
            "aa04e82f-f6d5-440e-b953-5376686c5847"
          ],
          "pending": [],
          "skipped": [],
          "duration": 12061,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d6fd6782-23af-4090-aa28-104ed4f6a67a",
          "title": "Roles API Endpoints",
          "fullFile": "C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\roles.test.js",
          "file": "\\test\\roles.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Roles API Endpoints\"",
              "fullTitle": "Roles API Endpoints \"before all\" hook in \"Roles API Endpoints\"",
              "timedOut": false,
              "duration": 25,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Limpiar la tabla y agregar datos iniciales\nawait db.query('TRUNCATE TABLE Roles RESTART IDENTITY CASCADE');\nawait db.query(\"INSERT INTO Roles (tipo) VALUES ('Admin')\");",
              "err": {},
              "uuid": "10d8c74a-866c-44db-9a0a-853cf0a47cee",
              "parentUUID": "d6fd6782-23af-4090-aa28-104ed4f6a67a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Roles API Endpoints\"",
              "fullTitle": "Roles API Endpoints \"after all\" hook in \"Roles API Endpoints\"",
              "timedOut": false,
              "duration": 33,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Limpiar la tabla después de las pruebas\nawait db.query('TRUNCATE TABLE Roles RESTART IDENTITY CASCADE');",
              "err": {},
              "uuid": "aa3eb330-d8c5-404c-9a3f-06345834088d",
              "parentUUID": "d6fd6782-23af-4090-aa28-104ed4f6a67a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /api/roles debe retornar todos los roles",
              "fullTitle": "Roles API Endpoints GET /api/roles debe retornar todos los roles",
              "timedOut": true,
              "duration": 2004,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/roles');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(Array.isArray(res.body), true);\nassert.strictEqual(res.body.length, 1);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\roles.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\roles.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                "diff": null
              },
              "uuid": "09bc175a-475e-416a-9a50-b4e733915cc3",
              "parentUUID": "d6fd6782-23af-4090-aa28-104ed4f6a67a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /api/roles/:id debe retornar un rol por ID",
              "fullTitle": "Roles API Endpoints GET /api/roles/:id debe retornar un rol por ID",
              "timedOut": true,
              "duration": 2005,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/roles/1');\nassert.strictEqual(res.status, 200);\nassert.ok(res.body.hasOwnProperty('tipo'));\nassert.strictEqual(res.body.tipo, 'Admin');",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\roles.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\roles.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                "diff": null
              },
              "uuid": "1b7850a7-1d51-4bed-b741-a765718e671c",
              "parentUUID": "d6fd6782-23af-4090-aa28-104ed4f6a67a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /api/roles debe crear un nuevo rol",
              "fullTitle": "Roles API Endpoints POST /api/roles debe crear un nuevo rol",
              "timedOut": true,
              "duration": 2006,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const newRol = { tipo: 'User' };\nconst res = await request(app).post('/api/roles').send(newRol);\nassert.strictEqual(res.status, 201);\nassert.ok(res.body.hasOwnProperty('tipo'));\nassert.strictEqual(res.body.tipo, 'User');\n// Verificar que se agregó correctamente\nconst allRoles = await request(app).get('/api/roles');\nassert.strictEqual(allRoles.body.length, 2);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\roles.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\roles.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                "diff": null
              },
              "uuid": "4061e9a4-468c-4092-af8d-a27c177ac3d5",
              "parentUUID": "d6fd6782-23af-4090-aa28-104ed4f6a67a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT /api/roles/:id debe actualizar un rol",
              "fullTitle": "Roles API Endpoints PUT /api/roles/:id debe actualizar un rol",
              "timedOut": true,
              "duration": 2009,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const updatedRol = { tipo: 'SuperAdmin' };\nconst res = await request(app).put('/api/roles/1').send(updatedRol);\nassert.strictEqual(res.status, 200);\nassert.ok(res.body.hasOwnProperty('tipo'));\nassert.strictEqual(res.body.tipo, 'SuperAdmin');",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\roles.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\roles.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                "diff": null
              },
              "uuid": "0cc3a307-b24f-43fe-b2a3-abf46998fe10",
              "parentUUID": "d6fd6782-23af-4090-aa28-104ed4f6a67a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE /api/roles/:id debe eliminar un rol",
              "fullTitle": "Roles API Endpoints DELETE /api/roles/:id debe eliminar un rol",
              "timedOut": true,
              "duration": 2011,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/roles/1');\nassert.strictEqual(res.status, 204);\n// Verificar que el rol fue eliminado\nconst allRoles = await request(app).get('/api/roles');\nassert.strictEqual(allRoles.body.length, 1);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\roles.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\roles.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                "diff": null
              },
              "uuid": "3a289496-1126-4cf4-a751-6e560e5de5d8",
              "parentUUID": "d6fd6782-23af-4090-aa28-104ed4f6a67a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /api/roles/:id debe retornar 404 para un rol inexistente",
              "fullTitle": "Roles API Endpoints GET /api/roles/:id debe retornar 404 para un rol inexistente",
              "timedOut": true,
              "duration": 2007,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/roles/9999');\nassert.strictEqual(res.status, 404);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\roles.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\roles.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                "diff": null
              },
              "uuid": "2105b456-3f87-46e2-89fc-cf0bab15aa26",
              "parentUUID": "d6fd6782-23af-4090-aa28-104ed4f6a67a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "09bc175a-475e-416a-9a50-b4e733915cc3",
            "1b7850a7-1d51-4bed-b741-a765718e671c",
            "4061e9a4-468c-4092-af8d-a27c177ac3d5",
            "0cc3a307-b24f-43fe-b2a3-abf46998fe10",
            "3a289496-1126-4cf4-a751-6e560e5de5d8",
            "2105b456-3f87-46e2-89fc-cf0bab15aa26"
          ],
          "pending": [],
          "skipped": [],
          "duration": 12042,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "657b180b-b6da-4bdf-9492-13538cc927d0",
          "title": "TipoPago API Endpoints",
          "fullFile": "C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\tipoPago.test.js",
          "file": "\\test\\tipoPago.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"TipoPago API Endpoints\"",
              "fullTitle": "TipoPago API Endpoints \"before all\" hook in \"TipoPago API Endpoints\"",
              "timedOut": false,
              "duration": 23,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Limpiar la tabla y agregar datos iniciales\nawait db.query('TRUNCATE TABLE TipoPago RESTART IDENTITY CASCADE');\nawait db.query(\"INSERT INTO TipoPago (descripcion, activo) VALUES ('Tarjeta de Crédito', true)\");",
              "err": {},
              "uuid": "a5cebb65-f9b4-4aae-b6ef-c08925c4d5f0",
              "parentUUID": "657b180b-b6da-4bdf-9492-13538cc927d0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"TipoPago API Endpoints\"",
              "fullTitle": "TipoPago API Endpoints \"after all\" hook in \"TipoPago API Endpoints\"",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Limpiar la tabla después de las pruebas\nawait db.query('TRUNCATE TABLE TipoPago RESTART IDENTITY CASCADE');",
              "err": {},
              "uuid": "e6171aae-0e64-41cb-b469-8a0b3c1fd908",
              "parentUUID": "657b180b-b6da-4bdf-9492-13538cc927d0",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /api/tipoPago debe retornar todos los tipos de pago",
              "fullTitle": "TipoPago API Endpoints GET /api/tipoPago debe retornar todos los tipos de pago",
              "timedOut": true,
              "duration": 2003,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/tipoPago');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(Array.isArray(res.body), true);\nassert.strictEqual(res.body.length, 1);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\tipoPago.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\tipoPago.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                "diff": null
              },
              "uuid": "3efaa93d-2fe2-44ce-88d4-f7f60a141728",
              "parentUUID": "657b180b-b6da-4bdf-9492-13538cc927d0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /api/tipoPago/:id debe retornar un tipo de pago por ID",
              "fullTitle": "TipoPago API Endpoints GET /api/tipoPago/:id debe retornar un tipo de pago por ID",
              "timedOut": true,
              "duration": 2001,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/tipoPago/1');\nassert.strictEqual(res.status, 200);\nassert.ok(res.body.hasOwnProperty('descripcion'));\nassert.strictEqual(res.body.descripcion, 'Tarjeta de Crédito');",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\tipoPago.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\tipoPago.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                "diff": null
              },
              "uuid": "349638c8-0993-44e7-8212-723dae40b6b2",
              "parentUUID": "657b180b-b6da-4bdf-9492-13538cc927d0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /api/tipoPago debe crear un nuevo tipo de pago",
              "fullTitle": "TipoPago API Endpoints POST /api/tipoPago debe crear un nuevo tipo de pago",
              "timedOut": true,
              "duration": 2018,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const newTipoPago = { descripcion: 'PayPal', activo: true };\nconst res = await request(app).post('/api/tipoPago').send(newTipoPago);\nassert.strictEqual(res.status, 201);\nassert.ok(res.body.hasOwnProperty('descripcion'));\nassert.strictEqual(res.body.descripcion, 'PayPal');\n// Verificar que se agregó correctamente\nconst allTiposPago = await request(app).get('/api/tipoPago');\nassert.strictEqual(allTiposPago.body.length, 2);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\tipoPago.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\tipoPago.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                "diff": null
              },
              "uuid": "4ff31602-dce2-4c49-8c4a-e6545ea1ffe7",
              "parentUUID": "657b180b-b6da-4bdf-9492-13538cc927d0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT /api/tipoPago/:id debe actualizar un tipo de pago",
              "fullTitle": "TipoPago API Endpoints PUT /api/tipoPago/:id debe actualizar un tipo de pago",
              "timedOut": true,
              "duration": 2006,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const updatedTipoPago = { descripcion: 'Pago en Efectivo', activo: false };\nconst res = await request(app).put('/api/tipoPago/1').send(updatedTipoPago);\nassert.strictEqual(res.status, 200);\nassert.ok(res.body.hasOwnProperty('descripcion'));\nassert.strictEqual(res.body.descripcion, 'Pago en Efectivo');",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\tipoPago.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\tipoPago.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                "diff": null
              },
              "uuid": "86b1ddb1-3c4c-4dba-9c0d-12899abb3683",
              "parentUUID": "657b180b-b6da-4bdf-9492-13538cc927d0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE /api/tipoPago/:id debe eliminar un tipo de pago",
              "fullTitle": "TipoPago API Endpoints DELETE /api/tipoPago/:id debe eliminar un tipo de pago",
              "timedOut": true,
              "duration": 2015,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/tipoPago/1');\nassert.strictEqual(res.status, 204);\n// Verificar que el tipo de pago fue eliminado\nconst allTiposPago = await request(app).get('/api/tipoPago');\nassert.strictEqual(allTiposPago.body.length, 1);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\tipoPago.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\tipoPago.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                "diff": null
              },
              "uuid": "9b18e705-3dfc-4ee2-928b-1ed8d1ea995b",
              "parentUUID": "657b180b-b6da-4bdf-9492-13538cc927d0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /api/tipoPago/:id debe retornar 404 para un tipo de pago inexistente",
              "fullTitle": "TipoPago API Endpoints GET /api/tipoPago/:id debe retornar 404 para un tipo de pago inexistente",
              "timedOut": true,
              "duration": 2014,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/tipoPago/9999');\nassert.strictEqual(res.status, 404);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\tipoPago.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\tipoPago.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                "diff": null
              },
              "uuid": "3fe41ca1-429d-4b83-8a37-503afa44ecb2",
              "parentUUID": "657b180b-b6da-4bdf-9492-13538cc927d0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "3efaa93d-2fe2-44ce-88d4-f7f60a141728",
            "349638c8-0993-44e7-8212-723dae40b6b2",
            "4ff31602-dce2-4c49-8c4a-e6545ea1ffe7",
            "86b1ddb1-3c4c-4dba-9c0d-12899abb3683",
            "9b18e705-3dfc-4ee2-928b-1ed8d1ea995b",
            "3fe41ca1-429d-4b83-8a37-503afa44ecb2"
          ],
          "pending": [],
          "skipped": [],
          "duration": 12057,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f8906c73-7dd1-4e8d-a61a-4ff4f5f5dc70",
          "title": "Usuarios API Endpoints",
          "fullFile": "C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\usuarios.test.js",
          "file": "\\test\\usuarios.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"GET /api/usuarios debe retornar todos los usuarios\"",
              "fullTitle": "Usuarios API Endpoints \"before all\" hook for \"GET /api/usuarios debe retornar todos los usuarios\"",
              "timedOut": false,
              "duration": 37,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Limpiar la tabla y agregar datos iniciales\nawait db.query('TRUNCATE TABLE Usuarios RESTART IDENTITY CASCADE');\nawait db.query(\"INSERT INTO Usuarios (nombre, correo, password, idRol) VALUES ('Juan Pérez', 'juan@gmail.com', '12345', 1)\");",
              "err": {
                "message": "error: inserción o actualización en la tabla «usuarios» viola la llave foránea «usuarios_idrol_fkey»",
                "estack": "error: inserción o actualización en la tabla «usuarios» viola la llave foránea «usuarios_idrol_fkey»\n    at C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async Context.<anonymous> (test\\usuarios.test.js:13:5)",
                "diff": null
              },
              "uuid": "23d47181-dad7-45fc-8356-608b293c43c0",
              "parentUUID": "f8906c73-7dd1-4e8d-a61a-4ff4f5f5dc70",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Usuarios API Endpoints\"",
              "fullTitle": "Usuarios API Endpoints \"after all\" hook in \"Usuarios API Endpoints\"",
              "timedOut": false,
              "duration": 65,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Limpiar la tabla después de las pruebas\nawait db.query('TRUNCATE TABLE Usuarios RESTART IDENTITY CASCADE');",
              "err": {},
              "uuid": "85d14f06-0ab4-4034-a563-ef286fecccd9",
              "parentUUID": "f8906c73-7dd1-4e8d-a61a-4ff4f5f5dc70",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /api/usuarios debe retornar todos los usuarios",
              "fullTitle": "Usuarios API Endpoints GET /api/usuarios debe retornar todos los usuarios",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/usuarios');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(Array.isArray(res.body), true);\nassert.strictEqual(res.body.length, 1);",
              "err": {},
              "uuid": "9b1876a3-6abf-413e-ad81-7f19d27e5c8a",
              "parentUUID": "f8906c73-7dd1-4e8d-a61a-4ff4f5f5dc70",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/usuarios/:id debe retornar un usuario por ID",
              "fullTitle": "Usuarios API Endpoints GET /api/usuarios/:id debe retornar un usuario por ID",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/usuarios/1');\nassert.strictEqual(res.status, 200);\nassert.ok(res.body.hasOwnProperty('nombre'));\nassert.strictEqual(res.body.nombre, 'Juan Pérez');",
              "err": {},
              "uuid": "fd78bc59-ef61-4c01-8369-41f188e27b57",
              "parentUUID": "f8906c73-7dd1-4e8d-a61a-4ff4f5f5dc70",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "POST /api/usuarios debe crear un nuevo usuario",
              "fullTitle": "Usuarios API Endpoints POST /api/usuarios debe crear un nuevo usuario",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUsuario = {\n  nombre: 'Ana García',\n  correo: 'ana@gmail.com',\n  password: '54321',\n  idRol: 2\n};\nconst res = await request(app).post('/api/usuarios').send(newUsuario);\nassert.strictEqual(res.status, 201);\nassert.ok(res.body.hasOwnProperty('nombre'));\nassert.strictEqual(res.body.nombre, 'Ana García');\n// Verificar que se agregó correctamente\nconst allUsuarios = await request(app).get('/api/usuarios');\nassert.strictEqual(allUsuarios.body.length, 2);",
              "err": {},
              "uuid": "e60c3390-d516-4c51-a9a7-13bb565bf378",
              "parentUUID": "f8906c73-7dd1-4e8d-a61a-4ff4f5f5dc70",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "PUT /api/usuarios/:id debe actualizar un usuario",
              "fullTitle": "Usuarios API Endpoints PUT /api/usuarios/:id debe actualizar un usuario",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedUsuario = {\n  nombre: 'Juan Pérez Actualizado',\n  correo: 'juan.actualizado@gmail.com',\n  password: '67890',\n  idRol: 1\n};\nconst res = await request(app).put('/api/usuarios/1').send(updatedUsuario);\nassert.strictEqual(res.status, 200);\nassert.ok(res.body.hasOwnProperty('nombre'));\nassert.strictEqual(res.body.nombre, 'Juan Pérez Actualizado');",
              "err": {},
              "uuid": "207526f8-a776-427b-a806-9c5cb9060df4",
              "parentUUID": "f8906c73-7dd1-4e8d-a61a-4ff4f5f5dc70",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "DELETE /api/usuarios/:id debe eliminar un usuario",
              "fullTitle": "Usuarios API Endpoints DELETE /api/usuarios/:id debe eliminar un usuario",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/usuarios/1');\nassert.strictEqual(res.status, 204);\n// Verificar que el usuario fue eliminado\nconst allUsuarios = await request(app).get('/api/usuarios');\nassert.strictEqual(allUsuarios.body.length, 1);",
              "err": {},
              "uuid": "d32a9b7c-a488-48f6-a128-07724b81fa0b",
              "parentUUID": "f8906c73-7dd1-4e8d-a61a-4ff4f5f5dc70",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/usuarios/:id debe retornar 404 para un usuario inexistente",
              "fullTitle": "Usuarios API Endpoints GET /api/usuarios/:id debe retornar 404 para un usuario inexistente",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/usuarios/9999');\nassert.strictEqual(res.status, 404);",
              "err": {},
              "uuid": "7ae3b0aa-63b2-4444-a5f6-4fce491cfe7c",
              "parentUUID": "f8906c73-7dd1-4e8d-a61a-4ff4f5f5dc70",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "9b1876a3-6abf-413e-ad81-7f19d27e5c8a",
            "fd78bc59-ef61-4c01-8369-41f188e27b57",
            "e60c3390-d516-4c51-a9a7-13bb565bf378",
            "207526f8-a776-427b-a806-9c5cb9060df4",
            "d32a9b7c-a488-48f6-a128-07724b81fa0b",
            "7ae3b0aa-63b2-4444-a5f6-4fce491cfe7c"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f7a35f0a-5aaa-43a8-9856-6a38e0b05839",
          "title": "Ventas API Endpoints",
          "fullFile": "C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\test\\ventas.test.js",
          "file": "\\test\\ventas.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"GET /api/ventas debe retornar todas las ventas\"",
              "fullTitle": "Ventas API Endpoints \"before all\" hook for \"GET /api/ventas debe retornar todas las ventas\"",
              "timedOut": false,
              "duration": 9,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Limpiar la tabla y agregar datos iniciales\nawait db.query('TRUNCATE TABLE Ventas RESTART IDENTITY CASCADE');\nawait db.query(\"INSERT INTO Ventas (monto, idempleado, fechaVenta) VALUES (500, 1, NOW())\");",
              "err": {
                "message": "error: inserción o actualización en la tabla «ventas» viola la llave foránea «ventas_idempleado_fkey»",
                "estack": "error: inserción o actualización en la tabla «ventas» viola la llave foránea «ventas_idempleado_fkey»\n    at C:\\Users\\Eliezer Cerecedo\\Documents\\Test\\TestMarias\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async Context.<anonymous> (test\\ventas.test.js:13:5)",
                "diff": null
              },
              "uuid": "73c3af8f-fca0-457b-b586-6bdd00a1f001",
              "parentUUID": "f7a35f0a-5aaa-43a8-9856-6a38e0b05839",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Ventas API Endpoints\"",
              "fullTitle": "Ventas API Endpoints \"after all\" hook in \"Ventas API Endpoints\"",
              "timedOut": false,
              "duration": 144,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Limpiar la tabla después de las pruebas\nawait db.query('TRUNCATE TABLE Ventas RESTART IDENTITY CASCADE');",
              "err": {},
              "uuid": "e88922c3-3bce-4bd4-ba2c-399c88ea0fbc",
              "parentUUID": "f7a35f0a-5aaa-43a8-9856-6a38e0b05839",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /api/ventas debe retornar todas las ventas",
              "fullTitle": "Ventas API Endpoints GET /api/ventas debe retornar todas las ventas",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/ventas');\nassert.strictEqual(res.status, 200);\nassert.strictEqual(Array.isArray(res.body), true);\nassert.strictEqual(res.body.length, 1);",
              "err": {},
              "uuid": "688ed98f-217e-4352-bd0c-c931cc724333",
              "parentUUID": "f7a35f0a-5aaa-43a8-9856-6a38e0b05839",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/ventas/:folio debe retornar una venta por folio",
              "fullTitle": "Ventas API Endpoints GET /api/ventas/:folio debe retornar una venta por folio",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/ventas/1');\nassert.strictEqual(res.status, 200);\nassert.ok(res.body.hasOwnProperty('monto'));\nassert.strictEqual(res.body.monto, 500);",
              "err": {},
              "uuid": "5625f4d1-07e4-4b5a-b1d5-e61865249c60",
              "parentUUID": "f7a35f0a-5aaa-43a8-9856-6a38e0b05839",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "POST /api/ventas debe crear una nueva venta",
              "fullTitle": "Ventas API Endpoints POST /api/ventas debe crear una nueva venta",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newVenta = { monto: 750, idempleado: 2 };\nconst res = await request(app).post('/api/ventas').send(newVenta);\nassert.strictEqual(res.status, 201);\nassert.ok(res.body.hasOwnProperty('monto'));\nassert.strictEqual(res.body.monto, 750);\n// Verificar que se agregó correctamente\nconst allVentas = await request(app).get('/api/ventas');\nassert.strictEqual(allVentas.body.length, 2);",
              "err": {},
              "uuid": "ae57f884-c42d-44b7-a86e-7b4b8b1ab177",
              "parentUUID": "f7a35f0a-5aaa-43a8-9856-6a38e0b05839",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "PUT /api/ventas/:folio debe actualizar una venta",
              "fullTitle": "Ventas API Endpoints PUT /api/ventas/:folio debe actualizar una venta",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedVenta = { monto: 1000, idempleado: 1 };\nconst res = await request(app).put('/api/ventas/1').send(updatedVenta);\nassert.strictEqual(res.status, 200);\nassert.ok(res.body.hasOwnProperty('monto'));\nassert.strictEqual(res.body.monto, 1000);",
              "err": {},
              "uuid": "c0847aba-24c7-457f-900f-01adb4ee9e1d",
              "parentUUID": "f7a35f0a-5aaa-43a8-9856-6a38e0b05839",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "DELETE /api/ventas/:folio debe eliminar una venta",
              "fullTitle": "Ventas API Endpoints DELETE /api/ventas/:folio debe eliminar una venta",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/ventas/1');\nassert.strictEqual(res.status, 204);\n// Verificar que la venta fue eliminada\nconst allVentas = await request(app).get('/api/ventas');\nassert.strictEqual(allVentas.body.length, 1);",
              "err": {},
              "uuid": "99f3fff8-139a-48d7-898e-39d5161cda4b",
              "parentUUID": "f7a35f0a-5aaa-43a8-9856-6a38e0b05839",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "GET /api/ventas/:folio debe retornar 404 para una venta inexistente",
              "fullTitle": "Ventas API Endpoints GET /api/ventas/:folio debe retornar 404 para una venta inexistente",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/ventas/9999');\nassert.strictEqual(res.status, 404);",
              "err": {},
              "uuid": "04905942-083e-4513-b560-968d5ff4626f",
              "parentUUID": "f7a35f0a-5aaa-43a8-9856-6a38e0b05839",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "688ed98f-217e-4352-bd0c-c931cc724333",
            "5625f4d1-07e4-4b5a-b1d5-e61865249c60",
            "ae57f884-c42d-44b7-a86e-7b4b8b1ab177",
            "c0847aba-24c7-457f-900f-01adb4ee9e1d",
            "99f3fff8-139a-48d7-898e-39d5161cda4b",
            "04905942-083e-4513-b560-968d5ff4626f"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}